// File: \srk assignment\Shivam\my-diamond-app\components\BlogSlider.js
// components/BlogSlider.js
import React from "react";
import Slider from "react-slick";
import { Box, Skeleton } from "@chakra-ui/react";

// Import Slick CSS (if not already imported in _document.js)
import "slick-carousel/slick/slick.css";
import "slick-carousel/slick/slick-theme.css";

const BlogSlider = ({ blogs, isLoadingBlogs, errorBlogs }) => {
  const settings = {
    dots: false,
    infinite: true,
    autoplay: false,
    arrows: true,
    rows: 1,
    slidesToShow: 4,
    slidesToScroll: 1,
    responsive: [
      {
        breakpoint: 1830,
        settings: {
          slidesToShow: 4,
        },
      },
      {
        breakpoint: 1800,
        settings: {
          slidesToShow: 4,
        },
      },
      {
        breakpoint: 1200,
        settings: {
          slidesToShow: 3,
        },
      },
      {
        breakpoint: 900,
        settings: {
          slidesToShow: 2,
        },
      },
      {
        breakpoint: 768,
        settings: {
          slidesToShow: 2,
        },
      },
      {
        breakpoint: 550,
        settings: {
          slidesToShow: 1,
        },
      },
    ],
  };

  const blogPosts = blogs;

  return (
    <div className="wbblog">
      {isLoadingBlogs ? (
        <Box>
          <Skeleton height="200px" />
          <Skeleton height="20px" mt="4" />
          <Skeleton height="20px" mt="4" />
        </Box>
      ) : (
        <Slider {...settings} style={{ height: "200px !important" }}>
          {blogPosts.map((post, index) => (
            <div key={index} className="product-block cless">
              <div className="blogshadow blog-thumbnail">
                <div className="blog-left">
                  <div className="workdo-blog-image">
                    <img
                      src={post.ImageUrl}
                      alt={post.Title}
                      title={post.Title}
                      className="img-fluid"
                    />
                    <div className="blog-post-image-hover"></div>
                  </div>
                </div>
                <div className="blog-right">
                  <h4 style={{ fontFamily: "outfit" }}>
                    <a href={post.Link}>
                      {post.Title.length > 24
                        ? `${post.Title.substring(0, 24)} ...`
                        : post.Title}
                    </a>
                  </h4>
                  <div className="blog-desc">
                    {post.Description.length > 50
                      ? `${post.Description.substring(0, 50)} ...`
                      : post.Description}
                  </div>
                  <div className="blog-date blog-bottom">
                    <div className="read_link">
                      <a className="btn btn-primary read_more" href={post.Link}>
                        read more
                      </a>
                    </div>
                    {/* <div className="date-time blogdt">
                      <span className="date-time">{post.Date}</span>
                    </div> */}
                  </div>
                </div>
              </div>
            </div>
          ))}
        </Slider>
      )}
    </div>
  );
};

export default BlogSlider;

// File: \srk assignment\Shivam\my-diamond-app\components\Breadcrumb.js

import Link from "next/link";


const Breadcrumb = ({ name, description }) => {
 

  return (
    <div className="">
    {/* Breadcrumb */}
    <div className="d-flex justify-content-between align-items-center back-page">
      <div className="">
        <div className="back-to-home">
          <a href="">
            <img src="/img/back-to-home.svg" alt="Back to home" />{" "}
            &nbsp; <span> Back to category</span>
          </a>
        </div>
      </div>
      <div className="">
        <ul className="breadcrumb ">
          <li className="breadcrumb-item">
            <a href="https://opencart.workdo.io/diamond/index.php?route=common/home&amp;language=en-gb">
              <i className="fas fa-home"></i>
            </a>
          </li>
          <li className="breadcrumb-item">
            <a href="https://opencart.workdo.io/diamond/index.php?route=product/category&amp;language=en-gb&amp;path=67">
              {name}
            </a>
          </li>
        </ul>
      </div>
    </div>
    {/* Breadcrumb end */}
    <div className="cate-top">
      <h2 className="cat-title"> {name}</h2>
      <div class="cat-desc row">
        <div class="col-sm-12">
          <p> {description}</p>
        </div>
      </div>
    </div>
  </div>
  );
};

export default Breadcrumb;

// File: \srk assignment\Shivam\my-diamond-app\components\Category.js
// components/CategorySlider.js
import React, { useState, useEffect } from "react";
import axios from "axios";
import Slider from "react-slick";
import { useRouter } from 'next/router';
// Import Slick CSS (if not already imported in _document.js)
import "slick-carousel/slick/slick.css";
import "slick-carousel/slick/slick-theme.css";

const Category = () => {
  const router = useRouter();
  const [categories, setCategories] = useState([{
    imageUrl:
      "https://opencart.workdo.io/diamond/image/cache/catalog/category/1-270x335.jpg",
    name: "bracelet",
    link: "https://opencart.workdo.io/diamond/index.php?route=product/category&path=57",
  }]);
  const [isLoadingSlider, setIsLoadingSlider] = useState(true);
  const [errorSlider, setErrorSlider] = useState(null);
  const settings = {
    dots: false,
    infinite: false,
    autoplay: false,
    arrows: true,
    slidesToShow: 3,
    slidesToScroll: 1,
    responsive: [
      {
        breakpoint: 1410,
        settings: {
          slidesToShow: 4,
        },
      },
      {
        breakpoint: 992,
        settings: {
          slidesToShow: 4,
        },
      },
      {
        breakpoint: 767,
        settings: {
          slidesToShow: 4,
        },
      },
      {
        breakpoint: 700,
        settings: {
          slidesToShow: 3,
        },
      },
      {
        breakpoint: 450,
        settings: {
          slidesToShow: 2,
        },
      },
    ],
  };
  useEffect(() => {
    fetchSliders();
  }, []);

  const fetchSliders = async () => {
    setIsLoadingSlider(true);
    setErrorSlider(null);

    try {
      const response = await axios.get("/api/categories");
      if (response.status === 200) {
        
        setCategories(response.data.data);
      } else {
        console.error("Error fetching blogs:", response.data.error);
        setErrorSlider("Error fetching blogs.");
      }
    } catch (error) {
      console.error("Error fetching blogs:", error);
      setErrorSlider("An error occurred.");
    } finally {
      setIsLoadingSlider(false);
    }
  };
  const handleNavigation = (link) => {
    router.push(`/category/${link}`);
  };
  return (
    <div className="category-bg">
      <div className="container top-category">
        <div className="row">
          <div class="col-md-12 select-ctn text-center">
            <h5>Jewellery & diamonds</h5>
          </div>
          <div className="col-md-12 col-xs-12">
            <div className="wdcategory">
              <Slider {...settings}>
                {categories.map((category, index) => (
                  <div key={index} className="wd-item-layout">
                    <div className="wd-item-img">
                      <a  style={{ cursor: 'pointer' }}  onClick={() => handleNavigation(category.link)} key={index}>
                        <img
                          src={category.imageUrl}
                          alt={category.name}
                          title={category.name}
                          className="img-fluid"
                        />
                      </a>
                    </div>
                    <h4 className="wd-item-title">
                      <div className="catbr">
                        <p>categories</p>
                        <a  style={{ cursor: 'pointer' }}  onClick={() => handleNavigation(category.link)} key={index} >{category.name}</a>
                      </div>
                      <div className="wd-item-caption">
                        <a  onClick={() => handleNavigation(category.link)} key={index}   style={{ cursor: 'pointer' }} className="btn btn-primary">
                          <span>Go to categories</span>
                          <img alt="stor-bg" src="/image/catalog/stor-bg.svg" />
                        </a>
                      </div>
                    </h4>
                  </div>
                ))}
              </Slider>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Category;

// File: \srk assignment\Shivam\my-diamond-app\components\CategorySlider.js
// components/CategorySlider.js
import React from "react";
import Slider from "react-slick";

// Import Slick CSS (if not already imported in _document.js)
import "slick-carousel/slick/slick.css";
import "slick-carousel/slick/slick-theme.css";

const CategorySlider = () => {
  const settings = {
    dots: false,
    infinite: false,
    autoplay: false,
    arrows: true,
    slidesToShow: 6,
    slidesToScroll: 1,
    responsive: [
      {
        breakpoint: 1410,
        settings: {
          slidesToShow: 6,
        },
      },
      {
        breakpoint: 992,
        settings: {
          slidesToShow: 5,
        },
      },
      {
        breakpoint: 767,
        settings: {
          slidesToShow: 4,
        },
      },
      {
        breakpoint: 700,
        settings: {
          slidesToShow: 3,
        },
      },
      {
        breakpoint: 450,
        settings: {
          slidesToShow: 2,
        },
      },
    ],
  };

  const categories = [
    {
      imageUrl:
        "https://opencart.workdo.io/diamond/image/cache/catalog/category/1-270x335.jpg",
      name: "bracelet",
      link: "https://opencart.workdo.io/diamond/index.php?route=product/category&path=57",
    },
    {
      imageUrl:
        "https://opencart.workdo.io/diamond/image/cache/catalog/category/2-270x335.jpg",
      name: "necklace",
      link: "https://opencart.workdo.io/diamond/index.php?route=product/category&path=25",
    },
    {
      imageUrl:
        "https://opencart.workdo.io/diamond/image/cache/catalog/category/3-270x335.jpg",
      name: "ring",
      link: "https://opencart.workdo.io/diamond/index.php?route=product/category&path=20",
    },
    {
      imageUrl:
        "https://opencart.workdo.io/diamond/image/cache/catalog/category/4-270x335.jpg",
      name: "bead",
      link: "https://opencart.workdo.io/diamond/index.php?route=product/category&path=17",
    },
  ];

  return (
    <div className="category-bg">
      <div className="container top-category">
        <div className="row">
          <div className="col-md-6 col-xs-12">
            <div className="category_secheading">
              <h3>Jewellery & Diamonds</h3>
              <p>
                Lorem Ipsum is simply dummy text of the printing and typesetting
                industry. Lorem Ipsum has been the industry's standard
                dummy.Lorem Ipsum is simply dummy text of the printing and
                typesetting industry. Lorem Ipsum has been the industry's
                standard dummy.
              </p>
              <a className="btn btn-primary btn-section" href="#" tabIndex={0}>
                <span>
                  check more product
                  <img alt="stor-bg" src="image/catalog/stor-bg.svg" />
                </span>
              </a>
            </div>
          </div>
          <div className="col-md-6 col-xs-12">
            <div className="wdcategory">
              <Slider {...settings}>
                {categories.map((category, index) => (
                  <div key={index} className="wd-item-layout">
                    <div className="wd-item-img">
                      <a href={category.link}>
                        <img
                          src={category.imageUrl}
                          alt={category.name}
                          title={category.name}
                          className="img-fluid"
                        />
                      </a>
                    </div>
                    <h4 className="wd-item-title">
                      <div className="catbr">
                        <p>categories</p>
                        <a href={category.link}>{category.name}</a>
                      </div>
                      <div className="wd-item-caption">
                        <a href={category.link} className="btn btn-primary">
                          <span>Go to categories</span>
                          <img alt="stor-bg" src="image/catalog/stor-bg.svg" />
                        </a>
                      </div>
                    </h4>
                  </div>
                ))}
              </Slider>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CategorySlider;

// File: \srk assignment\Shivam\my-diamond-app\components\DiamondShape.js
// components/DiamondShape.js
import { Box, Text, Center } from "@chakra-ui/react";
import rbc from "../public/img/R.png";
import Image from "next/image";
const DiamondShape = ({ shape, isSelected, onClick }) => {
  return (
    <Center
      // border="1px"
      // borderColor="#20C997"

      borderRadius="md"
      flex={1}
      flexDir={"column"}
      boxShadow={"0px 3px 10px rgba(0, 0, 0, 0.15)"}
      p={2}
      _hover={{ boxShadow: "inset 0 0 0 1px rgb(242,223,207, 1)" }}
      textAlign="center"
      backgroundColor="transparent"
      cursor="pointer"
      fontFamily="outfit"
      color={isSelected ? "var(--sub-color)" : "var(--main-color"} // Conditional text color
      bg={isSelected ? "var(--secondary-color)" : "#f2dfcf"} // Conditional background
      onClick={onClick}
      // Add active state styles (optional)
    >
      {/* Replace with diamond shape icons */}
      <Image src={rbc} alt={shape.ShapeName} width={50} height={50} />
      <Text fontSize="xs">{shape.ShapeName}</Text>
    </Center>
  );
};

export default DiamondShape;

// File: \srk assignment\Shivam\my-diamond-app\components\FilterSection.js
// components/FilterSection.js
import { Box, Text, Stack, Button } from "@chakra-ui/react";
import { Center } from "@chakra-ui/react";

const FilterSection = ({
  label,
  options,
  onFilterChange,
  selectedValues = [],
}) => {
  return (
    <Box mb={4}>
      <Text
        fontWeight="bold"
        mb={{ base: 1, md: 0 }}
        fontFamily="outfit"
        color="var(--main-color)"
      >
        {label}
      </Text>
      <hr style={{ color: "var(--main-color)", width: "50px" }} />
      <Stack direction="row" spacing={2} flexWrap="wrap">
        {options.map((option) => (
          <Center
            key={option.value}
            // variant="outline"
            fontWeight={200}
            borderRadius="4px"
            fontFamily="outfit"
            boxShadow={"0px 3px 10px rgba(0, 0, 0, 0.15)"}
            minWidth="40px"
            fontSize="xs"
            _hover={{ boxShadow: "inset 0 0 0 1px rgb(242,223,207, 1)" }}
            cursor="pointer"
            textAlign={"center"}
            p={{ base: 1, md: 2 }}
            mr={2}
            // pr={10}
            onClick={() => onFilterChange(option.value)}
            // Add active/selected state styles
            backgroundColor={
              selectedValues.includes(option.value)
                ? "var(--secondary-color)"
                : "var(--sub-color)"
            }
            color={
              selectedValues.includes(option.value)
                ? "var(--sub-color)"
                : "var(--main-color)"
            }
          >
            {option.label}
          </Center>
        ))}
      </Stack>
    </Box>
  );
};

export default FilterSection;

// File: \srk assignment\Shivam\my-diamond-app\components\Footer.js

import Link from "next/link";
import OfferBannerSlider from "@/components/OfferBannerSlider";
import { useRouter } from "next/router";
const Footer = () => {
  const router = useRouter();
  const handleNavigation = (link) => {
    router.push(`${link}`);
  };
  return (
    <footer>
          <div className="footer-top">
            <div className="container">
              <div className="row">
                <div className="offer-banner">
                  <div className="container">
                    <div className="row">
                      <div className="offer_ctn heading">
                        <span>Subscribe our channel</span>
                      </div>
                      <OfferBannerSlider />
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div className="container">
            <div className="middle-footer">
              <div className="row frist_row">
                <div className="col-md-9 col-xs-12">
                  <div className="foottop-link">
                    <a href="#">ring</a>
                    <a href="#">engagement</a>
                    <a href="#">watches</a>
                    <a href="#">necklace</a>
                  </div>
                </div>
                <div className="col-md-3 col-xs-12">
                  <div id="logo">
                    <Link href="/">
                      <h4 style={{ color: "var(--main-color)" }}>HKSURANA</h4>
                    </Link>
                  </div>
                </div>
              </div>
              <div className="row">
                <div className="col-md-3 col-sm-12 news-lborder">
                  <aside id="column-left1">
                    <div className="newsletter">
                      <div className="container news">
                        <div className="row">
                          <div className="col-xs-12 news-ctn">
                            <div
                              className="workdo-newsletter  workdo-newsletter"
                              id="newsletter_1722830721"
                              data-mode="default"
                            >
                              <form
                                id="formNewLestter"
                                method="post"
                                action="https://opencart.workdo.io/diamond/index.php?route=extension/Workdonewsletter/module/workdonewsletter|subscribe"
                                className="formNewLestter newsletter-bg"
                              >
                                <div className="inner">
                                  <div className="news-txt">
                                    <h2>
                                      <b>Subscribe newsletter and </b> get -20%
                                      off
                                    </h2>
                                    <div className="news-p">
                                      Lorem Ipsum is simply dummy text of the
                                      printing and typesetting industry. Lorem
                                      Ipsum has been the industry's standard
                                      dummy.
                                    </div>
                                  </div>
                                  <div className="new-from">
                                    <div className="field">
                                      <div className="form-group">
                                        <input
                                          type="text"
                                          className="form-control input-md inputNew"
                                          onblur="javascript:if(this.value=='')this.value='Type your address email...';"
                                          onfocus="javascript:if(this.value=='Type your address email...')this.value='';"
                                          defaultValue="Type your address email..."
                                          size={18}
                                          name="email"
                                        />
                                      </div>
                                      <div className="button-submit">
                                        <button
                                          type="submit"
                                          name="submitNewsletter"
                                          className="btn btn-danger newsbtn"
                                        >
                                          <i className="fa fa-angle-double-right" />
                                        </button>
                                      </div>
                                    </div>
                                    <input
                                      type="hidden"
                                      defaultValue={1}
                                      name="action"
                                    />
                                    <div className="valid" />
                                  </div>
                                </div>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </aside>
                </div>
                <div className="col-md-3 col-sm-12 lborder">
                  <h5>
                    Shop
                    <button
                      type="button"
                      className="btn toggle collapsed"
                      data-bs-toggle="collapse"
                      data-bs-target="#info"
                    />
                  </h5>
                  <div id="info" className="collapse footer-collapse">
                    <ul className="list-unstyled">
                      <li>
                        <a href="https://opencart.workdo.io/diamond/index.php?route=information/information&language=en-gb&information_id=5">
                          FAQ
                        </a>
                      </li>
                      <li>
                        <a style={{ cursor: "pointer" }}   onClick={() => handleNavigation("/terms-conditions")}>
                          Terms &amp; Conditions
                        </a>
                      </li>
                      <li>
                        <a style={{ cursor: "pointer" }}   onClick={() => handleNavigation("/shipping-policy")}>
                        Shipping Policy
                        </a>
                      </li>
                      <li>
                        <a href="https://opencart.workdo.io/diamond/index.php?route=information/information&language=en-gb&information_id=1">
                          About Us
                        </a>
                      </li>
                     
                      <li>
                        <a style={{ cursor: "pointer" }}   onClick={() => handleNavigation("/privacy-policy")}>
                        Privacy Policy
                        </a>
                      </li>
                    </ul>
                  </div>
                </div>
                <div className="col-md-3 col-sm-12 lborder">
                  <h5>
                    Account
                    <button
                      type="button"
                      className="btn toggle collapsed"
                      data-bs-toggle="collapse"
                      data-bs-target="#account"
                    />
                  </h5>
                  <div id="account" className="collapse footer-collapse">
                    <ul className="list-unstyled">
                      <li>
                        <a href="https://opencart.workdo.io/diamond/index.php?route=account/account&language=en-gb">
                          Account
                        </a>
                      </li>
                      <li>
                        <a href="https://opencart.workdo.io/diamond/index.php?route=account/order&language=en-gb">
                          Order History
                        </a>
                      </li>
                      <li>
                        <a href="https://opencart.workdo.io/diamond/index.php?route=account/wishlist&language=en-gb">
                          Wish List
                        </a>
                      </li>
                      <li>
                        <a href="https://opencart.workdo.io/diamond/index.php?route=account/newsletter&language=en-gb">
                          Newsletter
                        </a>
                      </li>
                      <li>
                        <a href="https://opencart.workdo.io/diamond/index.php?route=product/special&language=en-gb">
                          Specials
                        </a>
                      </li>
                      <li>
                        <a style={{ cursor: "pointer" }}   onClick={() => handleNavigation("/contact-us")}>
                          Contact Us
                        </a>
                      </li>
                    </ul>
                  </div>
                </div>
                <div className="col-md-3 col-sm-12 lborder">
                  <aside id="column-left" className="d-md-block">
                    <div>
                      <h5>share</h5>
                      <ul className="list-unstyled fsocial list-inline text-left social-media">
                        <li className="youtube">
                          <a href="#">
                            <svg>
                              <use xlinkHref="#youtube" />
                            </svg>
                          </a>
                        </li>
                        <li className="massage">
                          <a href="#">
                            <svg>
                              <use xlinkHref="#massage" />
                            </svg>
                          </a>
                        </li>
                        <li className="instagram">
                          <a href="#">
                            <svg>
                              <use xlinkHref="#instagram" />
                            </svg>
                          </a>
                        </li>
                        <li className="twitter">
                          <a href="#">
                            <svg>
                              <use xlinkHref="#twitter" />
                            </svg>
                          </a>
                        </li>
                      </ul>
                    </div>
                  </aside>
                </div>
              </div>
            </div>
          </div>
          <div className="foot-bot">
            <div className="container">
              <div className="row">
                <div className="col-md-6 copy text-start">
                  <p>
                    Powered By <a href="#">OpenCart</a> diamond © 2024
                  </p>
                </div>
                <div className="col-md-6 text-end">
                  <div className="foot-link">
                    <a href="#">about us</a>
                    <a href="#">career</a>
                    <a href="#">support</a>
                    <a href="#">information</a>
                  </div>
                </div>
              </div>
            </div>
          </div>
          {/*
OpenCart is open source software and you are free to remove the powered by OpenCart if you want, but its generally accepted practise to make a small donation.
Please donate via PayPal to donate@opencart.com
//*/}
        </footer>
  );
};

export default Footer;

// File: \srk assignment\Shivam\my-diamond-app\components\Header.js
// components/SearchBar.js
import { InputGroup, InputLeftElement, Input } from "@chakra-ui/react";
import { SearchIcon } from "@chakra-ui/icons";
import { useEffect, useState, useRef } from "react";
import Link from "next/link";
import {
  Drawer,
  DrawerBody,
  DrawerFooter,
  DrawerHeader,
  DrawerOverlay,
  DrawerContent,
  DrawerCloseButton,
  Button,
  useDisclosure,
} from "@chakra-ui/react";
import {
  getCartItemsFromLocalStorage,
  addToCart,
  removeFromCart,
  updateCartItemQuantity,
} from "../utils/cartfns";
import { useRouter } from "next/router";

const Header = () => {
  const router = useRouter();
  const cartBtnRef = useRef(null); // Create a ref for the cart button
  const [isOpen, setIsOpen] = useState(false);
  const {
    isOpen: isCartOpen,
    onOpen: onCartOpen,
    onClose: onCartClose,
  } = useDisclosure();
  const [cartDropdownOpen, setCartDropdownOpen] = useState(false); // For dropdown
  const [cartItems, setCartItems] = useState([]);
  const toggleDrawer = () => {
    setIsOpen(!isOpen);
  };
  const toggleCartDropdown = () => {
    setCartDropdownOpen(!cartDropdownOpen);
  };
  const subTotal = cartItems.reduce(
    (total, item) => total + item.Price * item.quantity,
    0
  );
  const total = subTotal;
  useEffect(() => {
    const updateCart = () => {
      setCartItems(getCartItemsFromLocalStorage());
    };

    window.addEventListener("storage", updateCart);
    return () => window.removeEventListener("storage", updateCart);
  }, []);

  useEffect(() => {
    setCartItems(getCartItemsFromLocalStorage());
  }, []);

  // Function to remove item from cart and update state
  const handleRemoveFromCart = (solitaireId) => {
    removeFromCart(solitaireId);
    setCartItems(getCartItemsFromLocalStorage());
  };

  // Toggle the cart dropdown

  // Calculate subtotal and total

  useEffect(() => {
    const updateCart = () => {
      setCartItems(getCartItemsFromLocalStorage());
    };

    window.addEventListener("storage", updateCart);
    return () => window.removeEventListener("storage", updateCart);
  }, []);

  useEffect(() => {
    // Fetch cart items from localStorage when the component mounts
    setCartItems(getCartItemsFromLocalStorage());
  }, []);

  const handleAddToCart = (solitaire) => {
    addToCart({ ...solitaire, quantity: 1 });
    setCartItems(getCartItemsFromLocalStorage());
  };
  const handleNavigation = (link) => {
    router.push(`/${link}`);
  };
  return (
    <header>
      <div className="top-header hidden-xs" style={{ fontFamily: "outfit" }}>
        <div className="container-fluid">
          <div className="row">
            <div className="topbspinner">
              <div className="col-md-6 col-xs-12">
                <div className="ebook">
                  <div className="ebook-ctn">
                    <h4 className="custom-link">
                      Monday - Saturday: 11:00 AM - 7:00 PM
                    </h4>
                  </div>
                </div>
              </div>
              <div className="col-md-5 col-xs-12">
                <div className="custom-link">
                  <a href="index.php?route=information/information&language=en-gb&information_id=1">
                    About
                  </a>
                  <a href="index.php?route=information/sitemap&language=en-gb">
                    Site Map
                  </a>
                  <a href="index.php?route=product/manufacturer&language=en-gb">
                    Brand
                  </a>
                  <a href="index.php?route=information/contact&language=en-gb">
                    Contact
                  </a>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div className="homemenu">
        <div className="container">
          <div className="row">
            <div className="sub_megamenu">
              <div className="container_wb_megamenu">
                <div
                  id="stamenu"
                  className={` ${isOpen ? "active" : ""} menu-fixed`}
                >
                  <nav id="menu" className="navbar">
                    <div className="navbar-expand-md">
                      <button
                        type="button"
                        className="btn-navbar navbar-toggler"
                        onClick={toggleDrawer}
                        data-bs-toggle="collapse"
                        data-bs-target=".navbar-ex1-collapse"
                      >
                        <i className="fa fa-bars" />
                      </button>
                    </div>
                    <div id="wr-menu-icon ">
                      <div
                        className="wrmenu collapsed"
                        data-bs-toggle="collapse"
                        data-bs-target="#under-menu"
                        aria-expanded="false"
                        aria-controls="collapseExample"
                      ></div>
                    </div>
                    <div
                      id="mySidenav"
                      className={`sidenav menu-vertical ${
                        isOpen ? "open" : ""
                      }`}
                    >
                      <div id="under-menu" className="">
                        <div className="close-nav">
                          <span
                            className="categories"
                            style={{ color: "#20C997" }}
                          >
                            Categories
                          </span>
                          <button
                            type="button"
                            className=" float-end"
                            onClick={toggleDrawer}
                          >
                            <i className="fa fa-close" />
                          </button>
                        </div>
                        <div className="navbar-collapse navbar-ex1-collapse">
                          <ul className="nav navbar-nav">
                            <li className="nav-item">
                              <Link href={"/solitaire"} className="nav-item">
                                Solitaire
                              </Link>
                            </li>
                            <li className="nav-item">
                              <Link href={"/pair"} className="nav-item">
                                Pair
                              </Link>
                            </li>
                            <li className="nav-item">
                              <a
                                href="https://opencart.workdo.io/diamond/index.php?route=product/category&language=en-gb&path=60"
                                className="nav-link"
                              >
                                {/*<img src="https://opencart.workdo.io/diamond/image/cache/catalog/menu-icon/meat-fish-14x14.png" alt="Amethyst" title="Amethyst"> */}{" "}
                                Amethyst
                              </a>
                            </li>
                            <li className="nav-item">
                              <a
                                href="https://opencart.workdo.io/diamond/index.php?route=product/category&language=en-gb&path=67"
                                className="nav-link"
                              >
                                {/*<img src="" alt="Blue Sapphire" title="Blue Sapphire"> */}{" "}
                                Blue Sapphire
                              </a>
                            </li>
                          </ul>
                        </div>
                      </div>
                    </div>
                  </nav>
                  <div
                    className="w3-overlay w3-animate-opacity"
                    onclick={toggleDrawer}
                    style={{
                      cursor: "pointer",
                      display: isOpen ? "block" : "none",
                    }}
                    id="myOverlay"
                  />
                </div>
              </div>
            </div>
            <div className="col-md-5 head-manu">
              <div className="top-manu">
                <div className="megamenu">
                  <div className="container_wb_megamenu">
                    <div
                      id="stamenu"
                      // className={` ${isOpen ? "active" : ""} menu-fixed`}
                    >
                      <nav id="menu" className="navbar">
                        <div className="navbar-expand-md">
                          <button
                            type="button"
                            className="btn-navbar navbar-toggler"
                            onClick={toggleDrawer}
                            data-bs-toggle="collapse"
                            data-bs-target=".navbar-ex1-collapse"
                          >
                            <i className="fa fa-bars" />
                          </button>
                        </div>
                        <div id="wr-menu-icon ">
                          <div
                            className="wrmenu collapsed"
                            data-bs-toggle="collapse"
                            data-bs-target="#under-menu"
                            aria-expanded="false"
                            aria-controls="collapseExample"
                          ></div>
                        </div>
                        <div
                          id="mySidenav"
                          className={`sidenav menu-vertical ${
                            isOpen ? "open" : ""
                          }`}
                        >
                          <div id="under-menu" className="">
                            <div className="close-nav">
                              <span
                                className="categories"
                                style={{ color: "#20C997" }}
                              >
                                Categories
                              </span>
                              <button
                                type="button"
                                className=" float-end"
                                onClick={toggleDrawer}
                              >
                                <i className="fa fa-close" />
                              </button>
                            </div>
                            <div className="navbar-collapse navbar-ex1-collapse">
                              <ul
                                className="nav navbar-nav"
                                style={{
                                  display: "flex",
                                  flexDirection: "row",
                                  listStyleType: "none",
                                  padding: 0,
                                }}
                              >
                                <li
                                  className="nav-item"
                                  style={{
                                    display: "inline-block",
                                    marginRight: "30px",
                                  }}
                                >
                                  <Link
                                    href={"/solitaire"}
                                    className="nav-item"
                                  >
                                    Solitaire
                                  </Link>
                                </li>
                                <li
                                  className="nav-item"
                                  style={{
                                    display: "inline-block",
                                    marginRight: "30px",
                                  }}
                                >
                                  <Link href={"/pair"} className="nav-item">
                                    Pair
                                  </Link>
                                </li>
                                <li
                                  className="nav-item"
                                  style={{
                                    display: "inline-block",
                                    marginRight: "30px",
                                  }}
                                >
                                  <a
                                    href="https://opencart.workdo.io/diamond/index.php?route=product/category&language=en-gb&path=60"
                                    className="nav-link"
                                  >
                                    {/*<img src="https://opencart.workdo.io/diamond/image/cache/catalog/menu-icon/meat-fish-14x14.png" alt="Amethyst" title="Amethyst"> */}{" "}
                                    Amethyst
                                  </a>
                                </li>
                                <li className="nav-item">
                                  <a
                                    href="https://opencart.workdo.io/diamond/index.php?route=product/category&language=en-gb&path=67"
                                    className="nav-link"
                                  >
                                    {/*<img src="" alt="Blue Sapphire" title="Blue Sapphire"> */}{" "}
                                    Blue Sapphire
                                  </a>
                                </li>
                              </ul>
                            </div>
                          </div>
                        </div>
                      </nav>
                      <div
                        className="w3-overlay w3-animate-opacity"
                        onclick={toggleDrawer}
                        style={{
                          cursor: "pointer",
                          // display: isOpen ? "block" : "none",
                        }}
                        id="myOverlay"
                      />
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div className="col-md-2 col-sm-2 text-left header-logo">
              <div id="logo">
                <a
                  style={{ cursor: "pointer" }}
                  onClick={() => handleNavigation("")}
                >
                  <img
                    style={{ height: "45px" }}
                    src="/img/logo-gold.png"
                    title="diamond"
                    alt="diamond"
                    class="img-responsive img-fluid"
                  />
                </a>
              </div>
            </div>
            <div className="col-md-5 col-sm-5 megamenu_border">
              <div className="main-header">
                <div className="h-icon">
                  <div id="top-links">
                    <div className="h-search">
                      <div className="top-search">
                        <ul>
                          <li
                            id="search"
                            className="desktop-search d-inline-block"
                          >
                            <div className="d-search">
                              <button
                                id="search_toggle"
                                className="search-toggle"
                                data-toggle="collapse"
                                onclick="openSearch()"
                              >
                                <span>Search</span>
                                <img
                                  src="/image/catalog/search.png"
                                  alt="search"
                                />
                              </button>
                            </div>
                            <div id="search" className="wbSearch">
                              <div id="search_block_top">
                                <select id="workdo-search-category">
                                  <option value={0}>Categories</option>
                                  <option value={60}>Amethyst</option>
                                  <option value={20}>bead</option>
                                  <option value={27}>
                                    &nbsp;&nbsp;&nbsp;&nbsp;bracelet
                                  </option>
                                  <option value={61}>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alexandrite
                                  </option>
                                  <option value={63}>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fashion
                                  </option>
                                  <option value={67}>Blue Sapphire</option>
                                  <option value={25}>Burma Ruby</option>
                                  <option value={29}>
                                    &nbsp;&nbsp;&nbsp;&nbsp;Citrine
                                  </option>
                                  <option value={65}>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Colombian
                                    Emerald
                                  </option>
                                  <option value={66}>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Diamond
                                  </option>
                                  <option value={64}>
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Garnet
                                  </option>
                                  <option value={28}>
                                    &nbsp;&nbsp;&nbsp;&nbsp;Morganite
                                  </option>
                                  <option value={17}>Black Diamond</option>
                                  <option value={68}>Ametrine</option>
                                </select>
                                <div className="input-group">
                                  <input
                                    type="text"
                                    name="search"
                                    defaultValue=""
                                    placeholder="Search Product..."
                                    className="search_query form-control input-lg workdo-search"
                                  />
                                  <div className="input-group-btn">
                                    <button
                                      type="button"
                                      className="btn btn-primary btn-lg"
                                    >
                                      <img
                                        src="/image/catalog/search.png"
                                        alt="search"
                                      />
                                    </button>
                                    <a
                                      href="javascript:void(0)"
                                      className="closebtn close-nav"
                                      onclick="closeSearch()"
                                    >
                                      <i className="fa fa-close" />
                                    </a>
                                  </div>
                                  {/* workdo Search Start  */}
                                  <div className="workdo-search text-left">
                                    <div
                                      className="workdo-search-loader"
                                      style={{ display: "none" }}
                                    >
                                      <div className="loaders" />
                                    </div>
                                    {/* Add Loader */}
                                    <div className="workdo-search-result">
                                      {/* search results */}
                                    </div>
                                  </div>
                                  {/* workdo Search End  */}
                                </div>
                              </div>
                            </div>
                          </li>
                        </ul>
                      </div>
                    </div>
                    <ul className="list-inline d-flex user-bg">
                      <li className="userapp" />
                      <li className="huser">
                        <div className="dropdown">
                          <a
                            href=""
                            className="dropdown-toggle huser-drop"
                            data-bs-toggle="dropdown"
                          >
                            <div className="xuser">
                              <img src="/image/catalog/huser.svg" alt="user" />
                              <span>My Profile</span>
                              <i className="fa fa-angle-down enaleng" />
                            </div>
                            <div className="xuser-desc d-none">
                              <span>
                                <span className="d-none d-lg-inline">
                                  My Account
                                </span>
                              </span>
                            </div>
                          </a>
                          <ul className="dropdown-menu dropdown-menu-right haccount  hlogout">
                            <h5 className="text-left">Your Account</h5>
                            <h6 className="text-left">
                              Access account and manage orders
                            </h6>
                            <li className="acd">
                              <a
                                href="https://opencart.workdo.io/diamond/index.php?route=account/register&language=en-gb"
                                className="dropdown-item"
                              >
                                <i className="fa fa-user-plus" />
                                Register
                              </a>
                            </li>
                            <li className="acd">
                              <a
                                href="https://opencart.workdo.io/diamond/index.php?route=account/login&language=en-gb"
                                className="dropdown-item"
                              >
                                <i className="fa fa-lock" />
                                Login
                              </a>
                            </li>
                            <li className="wishcom">
                              <a href="">
                                <i className="fa fa-compress" />
                                compare
                              </a>
                            </li>
                            <li className="wishcom">
                              <a href="https://opencart.workdo.io/diamond/index.php?route=account/wishlist&language=en-gb">
                                <i className="fa fa-heart" />
                                wishlist
                              </a>
                            </li>
                            <li className="xsla d-inline-block">
                              {" "}
                              <form
                                action="https://opencart.workdo.io/diamond/index.php?route=common/currency|save&language=en-gb"
                                method="post"
                                encType="multipart/form-data"
                                id="form-currency"
                              >
                                <div className="dropdown">
                                  <button
                                    className="btn-link dropdown-toggle test"
                                    data-bs-toggle="dropdown"
                                  >
                                    <strong>$</strong>
                                    <span className="d-md-inline">
                                      Currency
                                    </span>{" "}
                                    <i className="fa fa-angle-down" />
                                  </button>
                                  <ul className="dropdown-menu">
                                    <li>
                                      <a href="EUR" className="dropdown-item">
                                        € Euro
                                      </a>
                                    </li>
                                    <li>
                                      <a href="GBP" className="dropdown-item">
                                        £ Pound Sterling
                                      </a>
                                    </li>
                                    <li>
                                      <a href="USD" className="dropdown-item">
                                        $ US Dollar
                                      </a>
                                    </li>
                                  </ul>
                                </div>
                                <input
                                  type="hidden"
                                  name="code"
                                  defaultValue=""
                                />{" "}
                                <input
                                  type="hidden"
                                  name="redirect"
                                  defaultValue="https://opencart.workdo.io/diamond/index.php?route=common/home"
                                />
                              </form>
                            </li>
                          </ul>
                          <ul></ul>
                        </div>
                      </li>
                    </ul>
                    <div className="d-inline-block">
                      <span id="header-cart">
                        <div
                          ref={cartBtnRef} // Use cartBtnRef here
                          onClick={onCartOpen} // Use onCartOpen
                          id="cart"
                          className="dropdown btn-block"
                        >
                          <button
                            type="button"
                            data-bs-toggle="dropdown"
                            className="btn btn-inverse dropdown-toggle"
                            onClick={toggleCartDropdown}
                            aria-expanded={cartDropdownOpen}
                          >
                            {/* ... [Your existing cart icon and text] ...  */}
                            <div className="xuser">
                              <img src="/image/catalog/hcart.svg" alt="cart" />
                            </div>
                            <span className="cartl">
                              <span className="cartt">
                                {cartItems.reduce(
                                  (acc, item) => acc + item.quantity,
                                  0
                                )}{" "}
                              </span>
                              <span className="cartna">cart: items</span>
                              <strong>Items</strong>
                            </span>
                          </button>
                        </div>
                      </span>
                    </div>
                    {/* Cart Drawer */}
                    <Drawer
                      isOpen={isCartOpen}
                      placement="right"
                      onClose={onCartClose}
                      finalFocusRef={cartBtnRef}
                      size="md" // Adjust drawer size if needed
                    >
                      <DrawerOverlay />
                      <DrawerContent bg="var(--main-color)">
                        <DrawerCloseButton color="var(--secondary-color)" />
                        <DrawerHeader
                          borderBottomWidth="1px"
                          borderColor="var(--main-color)"
                          color="var(--main-color)"
                          fontSize="lg"
                          fontWeight="bold"
                        >
                          Your Cart
                        </DrawerHeader>

                        <DrawerBody color="var(--white)" fontSize="md">
                          {cartItems.length === 0 ? (
                            <p
                              className="text-center"
                              style={{ color: "var(--sub-color)" }}
                            >
                              Your cart is empty.
                            </p>
                          ) : (
                            <ul
                              style={{
                                listStyleType: "none",
                                padding: 0,
                              }}
                            >
                              {cartItems.map((item) => (
                                <li key={item.SolitaireID} className="mb-3">
                                  <div className="d-flex align-items-center">
                                    <Link href={`/${item.Slug}`}>
                                      <img
                                        src={item.Image1}
                                        alt={item.SolitaireName}
                                        style={{
                                          width: "60px",
                                          height: "60px",
                                          objectFit: "cover",
                                          marginRight: "10px",
                                          borderRadius: "5px",
                                        }}
                                      />
                                    </Link>
                                    <div className="flex-grow-1">
                                      {" "}
                                      {/* Allow item details to take up remaining space */}
                                      <Link href={`/${item.Slug}`}>
                                        <h6
                                          className="mb-1"
                                          style={{
                                            color: "var(--secondary-color)",
                                            fontWeight: "bold",
                                          }}
                                        >
                                          {item.SolitaireName}
                                        </h6>
                                      </Link>
                                      <p className="mb-0">
                                        <span className="font-weight-bold">
                                          {item.quantity} x{" "}
                                        </span>
                                        ${item?.Price?.toFixed(2)}
                                      </p>
                                    </div>
                                    <button
                                      type="button"
                                      className="btn btn-sm btn-link text-danger"
                                      onClick={() =>
                                        handleRemoveFromCart(item.SolitaireID)
                                      }
                                    >
                                      <i className="fa fa-times"></i>
                                    </button>
                                  </div>
                                </li>
                              ))}
                            </ul>
                          )}
                        </DrawerBody>

                        <DrawerFooter
                          borderTopWidth="1px"
                          borderColor="var(--secondary-color)"
                          display="flex"
                          justifyContent="space-between"
                          alignItems="center"
                        >
                          {cartItems.length > 0 && (
                            <div>
                              <p
                                className="mb-1"
                                style={{
                                  color: "var(--darker-sub-color)",
                                }}
                              >
                                Subtotal:{" "}
                                <span
                                  style={{
                                    color: "var(--white)",
                                    fontWeight: "bold",
                                  }}
                                >
                                  ${subTotal.toFixed(2)}
                                </span>
                              </p>
                              <p
                                className="mb-0"
                                style={{
                                  color: "var(--darker-sub-color)",
                                }}
                              >
                                Total:{" "}
                                <span
                                  style={{
                                    color: "var(--white)",
                                    fontWeight: "bold",
                                  }}
                                >
                                  {/* ${total?.toFixed(2)} */}
                                  {total}
                                </span>
                              </p>
                            </div>
                          )}
                          <Link href="/cart" className="btn btn-primary">
                            View Cart
                          </Link>
                        </DrawerFooter>
                      </DrawerContent>
                    </Drawer>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </header>
  );
};

export default Header;

// File: \srk assignment\Shivam\my-diamond-app\components\MainSlider.js
import Slider from "react-slick";
import React, { useState, useEffect } from "react";
import axios from "axios";
// Import Slick CSS
import "slick-carousel/slick/slick.css";
import "slick-carousel/slick/slick-theme.css";

const MainSlider = () => {
  const [sliders, setSliders] = useState([]);
  const [isLoadingSlider, setIsLoadingSlider] = useState(true);
  const [errorSlider, setErrorSlider] = useState(null);

  const settings = {
    customPaging: (i) => <span>{i + 1}</span>,
    fade: true,
    slidesToShow: 1,
    slidesToScroll: 1,
    autoplay: true,
    arrows: true,
    dots: true,
    autoplaySpeed: 3500,
  };
  useEffect(() => {
    fetchSliders();
  }, []);

  const fetchSliders = async () => {
    setIsLoadingSlider(true);
    setErrorSlider(null);

    try {
      const response = await axios.get("/api/sliders");
      if (response.status === 200) {
        setSliders(response.data.data);
      } else {
        console.error("Error fetching blogs:", response.data.error);
        setErrorSlider("Error fetching blogs.");
      }
    } catch (error) {
      console.error("Error fetching blogs:", error);
      setErrorSlider("An error occurred.");
    } finally {
      setIsLoadingSlider(false);
    }
  };
  const slides = [
    {
      imageUrl: "/image/cache/catalog/slider/1-1920x750.png", // Keep the image URL for reference or background
      title: "Jewellery & diamonds",
      text: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy...",
      buttonText: "Check more product",
      buttonLink: "#",
    },

    {
      imageUrl: "/image/cache/catalog/slider/2-1920x750.png", // Keep the image URL for reference or background
      title: "Explore the Sale!!",
      text: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy...",
      buttonText: "Check more product",
      buttonLink: "#",
    },
    // ... add other slides ...
  ];

  return (
    <div className="s-panel">
      <div className="imgslider">
        <Slider {...settings}>
          {sliders.map((slide, index) => (
            <div key={index} className="sliderel">
              <div className="container">
                <div className="slidertext">
                  <div className="slideff">
                    <div className="slidesmall">
                      <h1>{slide.title}</h1>
                      <p>{slide.text}</p>
                      <div className="slider-btn">
                        <a className="btn btn-primary btn-section" href="#">
                          <span>
                            {slide.buttonText}
                            <img
                              alt="stor-bg"
                              src="image/catalog/stor-bg.svg"
                            />
                          </span>
                        </a>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <a href="#">
                <img
                  src={slide.imageUrl}
                  alt="slider"
                  className="mx-auto img-fluid"
                />
              </a>
            </div>
          ))}
        </Slider>
      </div>
    </div>
  );
};

export default MainSlider;

// File: \srk assignment\Shivam\my-diamond-app\components\OfferBannerSlider.js
// components/OfferBannerSlider.js
import React from "react";
import Slider from "react-slick";

// Import Slick CSS
import "slick-carousel/slick/slick.css";
import "slick-carousel/slick/slick-theme.css";

const OfferBannerSlider = () => {
  const settings = {
    dots: false,
    arrows: false, // Disable arrows for this slider
    infinite: true,
    autoplay: true,
    autoplaySpeed: 2000,
    slidesToShow: 4,
    slidesToScroll: 1,
    responsive: [
      {
        breakpoint: 1830,
        settings: {
          slidesToShow: 4,
        },
      },
      {
        breakpoint: 1800,
        settings: {
          slidesToShow: 4,
        },
      },
      {
        breakpoint: 1200,
        settings: {
          slidesToShow: 3,
        },
      },
      {
        breakpoint: 900,
        settings: {
          slidesToShow: 2,
        },
      },
      {
        breakpoint: 768,
        settings: {
          slidesToShow: 2,
        },
      },
      {
        breakpoint: 550,
        settings: {
          slidesToShow: 1,
        },
      },
    ],
  };

  const banners = [
    {
      imageUrl: "/image/cache/catalog/offerbanner/1-260x260.jpg",
      link: "#",
    },
    {
      imageUrl: "/image/cache/catalog/offerbanner/2-260x260.jpg",
      link: "#",
    },
    {
      imageUrl: "/image/cache/catalog/offerbanner/3-260x260.jpg",
      link: "#",
    },
    {
      imageUrl: "/image/cache/catalog/offerbanner/4-260x260.jpg",
      link: "#",
    },
    {
      imageUrl: "/image/cache/catalog/offerbanner/5-260x260.jpg",
      link: "#",
    },
    {
      imageUrl: "/image/cache/catalog/offerbanner/6-260x260.jpg",
      link: "#",
    },
  ];

  return (
    <div className="offer_bnr">
      <Slider {...settings}>
        {banners.map((banner, index) => (
          <div key={index} className="beffect">
            <a href={banner.link}>
              <img
                src={banner.imageUrl}
                alt={`Offer Banner ${index + 1}`}
                className="mx-auto img-fluid"
              />
            </a>
            {/* <div className="offerdesc"></div> */}{" "}
            {/* You can remove or style this as needed */}
          </div>
        ))}
      </Slider>
    </div>
  );
};

export default OfferBannerSlider;

// File: \srk assignment\Shivam\my-diamond-app\components\OnsaleSlider.js
// components/OnsaleSlider.js
import React from "react";
import Slider from "react-slick";

// Import Slick CSS (if not already imported in _document.js)
import "slick-carousel/slick/slick.css";
import "slick-carousel/slick/slick-theme.css";

const OnsaleSlider = () => {
  const settings = {
    dots: false,
    infinite: true,
    autoplay: true,
    autoplaySpeed: 1000,
    slidesToShow: 2,
    slidesToScroll: 1,
    rows: 1,
    arrows: true,
    responsive: [
      {
        breakpoint: 1440,
        settings: {
          slidesToShow: 2,
        },
      },
      {
        breakpoint: 1400,
        settings: {
          slidesToShow: 2,
        },
      },
      {
        breakpoint: 1200,
        settings: {
          slidesToShow: 2,
        },
      },
      {
        breakpoint: 992,
        settings: {
          slidesToShow: 2,
        },
      },
      {
        breakpoint: 600,
        settings: {
          slidesToShow: 1,
        },
      },
      {
        breakpoint: 450,
        settings: {
          slidesToShow: 1,
        },
      },
    ],
  };

  const products = [
    {
      imageUrl1:
        "https://opencart.workdo.io/diamond/image/cache/catalog/product/2/1-1000x1000.png",
      imageUrl2:
        "https://opencart.workdo.io/diamond/image/cache/catalog/product/2/2-1000x1000.png",
      brand: "bag",
      name: "heart design pandal chain",
      price: "$1.00",
      description:
        "The 30-inch Apple Cinema HD Display delivers an amazing 2560 x 1600 pixel resolution. Designed specifically for the creative professional, this display provides more space for easier access to all the...",
      link: "https://opencart.workdo.io/diamond/index.php?route=product/product&language=en-gb&product_id=42",
      sizes: ["m", "s"],
    },
    {
      imageUrl1:
        "https://opencart.workdo.io/diamond/image/cache/catalog/product/11/1-1000x1000.png",
      imageUrl2:
        "https://opencart.workdo.io/diamond/image/cache/catalog/product/11/2-1000x1000.png",
      brand: "cloths",
      name: "Crystal Gym & Fitness Glove",
      price: "$1.00",
      description:
        "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy.Lorem Ipsum is simply dummy text of the printing and typesetting industry...",
      link: "https://opencart.workdo.io/diamond/index.php?route=product/product&language=en-gb&product_id=30",
      sizes: ["l", "m"],
    },
    {
      imageUrl1:
        "https://opencart.workdo.io/diamond/image/cache/catalog/product/1/1-1000x1000.png",
      imageUrl2:
        "https://opencart.workdo.io/diamond/image/cache/catalog/product/1/2-1000x1000.png",
      brand: "shoes",
      name: "Abigail Moon & Stars Ring",
      price: "$1.00",
      description:
        "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum is simply dummy text of the printing and typesetting industry...",
      link: "https://opencart.workdo.io/diamond/index.php?route=product/product&language=en-gb&product_id=28",
      sizes: ["m", "s", "l"],
    },
    {
      imageUrl1:
        "https://opencart.workdo.io/diamond/image/cache/catalog/product/13/1-1000x1000.png",
      imageUrl2:
        "https://opencart.workdo.io/diamond/image/cache/catalog/product/13/2-1000x1000.png",
      brand: "bag",
      name: "golden ring",
      price: "$1.00",
      description:
        "Born to be worn. Clip on the worlds most wearable music player and take up to 240 songs with you anywhere. Choose from five colors including four new hues to make your musical fashion statement. R..",
      link: "https://opencart.workdo.io/diamond/index.php?route=product/product&language=en-gb&product_id=34",
      sizes: ["xl", "xxl"],
    },
    // ... Add more product data
  ];

  return (
    <div className="wdonsale" style={{ display: "block" }}>
      <Slider {...settings}>
        {products.map((product, index) => (
          <div key={index} className="col cless">
            <form>
              {/* ... [Your form code, removing PHP and data-oc attributes] ... */}
              <div className="product-thumb">
                <div className="product-bg">
                  <div className="image">
                    {/* ... [Your discount logic (if any)] ... */}
                    <a href={product.link}>
                      <div className="second-image">
                        <img
                          src={product.imageUrl1}
                          alt={product.name}
                          className="img-fluid"
                        />
                      </div>
                      <div className="second-image">
                        <img
                          src={product.imageUrl2}
                          alt={product.name}
                          className="img-fluid"
                        />
                      </div>
                    </a>
                  </div>
                  {/* ... [Your product details, removing PHP and data-oc attributes] ... */}
                  <div className="caption">
                    {/* ...  */}
                    <div className="price">
                      <span className="price-new">{product.price}</span>
                    </div>
                    <p className="catlist-des">{product.description}</p>
                    {/* ... [Your size options logic (if any)] ... */}
                    {/* ...  */}
                  </div>
                  {/* ... [Rest of your product details] ... */}
                </div>
              </div>
              {/* ... [Rest of your form code] ... */}
            </form>
          </div>
        ))}
      </Slider>
    </div>
  );
};

export default OnsaleSlider;

// File: \srk assignment\Shivam\my-diamond-app\components\ProductCategory.js
// components/ProductCategory.js
import axios from "axios";
import Link from "next/link";
import { useRouter } from "next/router";
import React, { useEffect, useState } from "react";
import Breadcrumb from "../components/Breadcrumb"
const ProductCategory = ({ categories, activeLink }) => {
  const router = useRouter();
  console.log(activeLink);

  const [products, setProducts] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    fetchProducts();
    console.log("products", products);
  }, [activeLink]);

  const fetchProducts = async () => {
    setIsLoading(true);
    setError(null);

    try {
      const response = await axios.get(
        "/api/product/category-products?category=" + activeLink
      );
      console.log("response", response);
      if (response.status === 200) {
        setProducts(response.data.products);
      } else {
        console.error("Error fetching products:", response.data.error);
        setError("Error fetching products");
      }
    } catch (error) {
      console.error("Error fetching products:", error);
      setError("An error occurred");
    } finally {
      setIsLoading(false);
    }
  };

  var activeCategory = categories.find(
    (category) => category.link === activeLink
  );
  if (activeCategory) {
    console.log("Active Category:", activeCategory);
  } else {
    activeCategory = {};
  }

  const handleNavigation = (link) => {
    router.push(`${link}`);
  };
  return (
    <div id="product-category">
      <div className="category-page">
        <div className="container">
         <Breadcrumb name={activeCategory.name}  description={activeCategory.description}/>
        </div>
      </div>
      <div className="pb-30">
        <div className="container">
          <div className="row">
            <aside id="column-left" className="col-3 d-none d-md-block">
              <div className="panel-heading cathed">category</div>
              <div className="list-group mb-3">
                {categories.map((category, index) => (
                  <a
                    style={{ cursor: "pointer" }}
                    onClick={() => handleNavigation("/category/"+category.link)}
                    key={index}
                    className={`list-group-item ${
                      category.link === activeLink ? "active" : ""
                    }`}
                  >
                    {category.name} (1)
                  </a>
                ))}
              </div>
            </aside>
            <div id="content" className="col colright">
            <div className="row panel-default workdo_blog_page rless">
      {products.map((post) => (
        <div key={post.id} className="panel panel-default col-lg-4"  style={{ cursor: "pointer" }}   onClick={() => handleNavigation("/product/"+post.link)}>
          <div className="panel-body blog-thumbnail">
            <div className="wbblogimg">
              <div className="workdo-blog-image">
                <div className="blog-post-image-hover"> </div>
                <img src={post.image} alt={post.alt} title={post.title} className="img-thumbnail" />
              </div>
            </div>
            <div className="allcomment">
              <div className="blog_links">
                <span className="blog_comment">
                  {post.comments} Comment
                </span>
                <span className="write-comment">
                  <a href={post.link}>
                    <i className="fa fa-comment"></i>Leave Comments
                  </a>
                </span>
              </div>
              <h4><a href={post.link}>{post.Title}</a></h4>
              <div className="blog-desc">
                <p>{post.description}</p>
              </div>
              <div className="date-time blogdt">
                <span className="blog-date">{post.date}</span>
              </div>
              
              <div className="blog-bottom">
                <div className="read-more">
                  <a href={post.link} className="btn btn-primary"  style={{ maxWidth: "100%" }}><span
                                >Add to Cart<img
                                  alt="stor-bg"
                                  src="/img/stor-bg.svg"
                              /></span></a>
                </div>
              </div>
              
            </div>
          </div>
        </div>
      ))}
    </div>

              <div className="row pagi">
                <div className="col-sm-6 text-start"></div>
                <div className="col-sm-6 text-end tot">
                  Showing 1 to 10 of 10 (1 Pages)
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ProductCategory;

// File: \srk assignment\Shivam\my-diamond-app\components\SearchBar.js
// components/SearchBar.js
import { InputGroup, InputLeftElement, Input } from "@chakra-ui/react";
import { SearchIcon } from "@chakra-ui/icons";

const SearchBar = () => {
  return (
    <InputGroup ml={4} flex="1" maxW="400px">
      <InputLeftElement pointerEvents="none">
        <SearchIcon color="gray.300" />
      </InputLeftElement>
      <Input
        type="text"
        color={"white"}
        _placeholder={{ color: "white" }} // This line changes the placeholder color to white
        placeholder="Stone ID / Certificate no"
      />
    </InputGroup>
  );
};

export default SearchBar;

// File: \srk assignment\Shivam\my-diamond-app\components\Sidebar.js
// components/Sidebar.js
import { HamburgerIcon } from "@chakra-ui/icons";
import {
  Box,
  Text,
  List,
  ListItem,
  useBreakpointValue,
  Flex,
} from "@chakra-ui/react";
import {
  AiOutlineHome,
  AiOutlineSearch,
  AiOutlineShoppingCart,
  AiOutlineHeart,
  AiOutlineFileText,
  AiOutlineUser,
  AiOutlineQuestionCircle,
} from "react-icons/ai"; // Import from react-icons/ai

const navItems = [
  { label: "Home", icon: <AiOutlineHome size={32} /> },
  { label: "Search", icon: <AiOutlineSearch size={32} /> },
  { label: "Cart", icon: <AiOutlineShoppingCart size={32} /> },
  { label: "Wishlist", icon: <AiOutlineHeart size={32} /> },
  { label: "Orders", icon: <AiOutlineFileText size={32} /> },
  { label: "Account", icon: <AiOutlineUser size={32} /> },
  { label: "Help", icon: <AiOutlineQuestionCircle size={32} /> },
];

const Sidebar = ({ isOpen, onClose, onOpen, ...rest }) => {
  const isCollapsed = useBreakpointValue({ base: !isOpen, md: !isOpen });
  return (
    <Box
      bg="white"
      pos="fixed"
      h="100%"
      //   shadow="md"
      zIndex={10}
      transition="width 0.3s" // Add a smooth transition
      {...rest} // Apply width from index.js
      // onClick={isCollapsed ? onOpen : undefined} // Open sidebar on click when collapsed
      width={isCollapsed ? "45px" : "200px"} // Adjust width
      onClick={onClose}
    >
      <List spacing={3} p={isCollapsed ? 1 : 4}>
        {" "}
        {/* Adjust padding */}
        {isCollapsed && (
          <ListItem
            onClick={onClose}
            _hover={{ bg: "gray.100", cursor: "pointer" }}
            display="flex"
            borderRadius={3}
            pt={4}
            alignItems="center"
            justifyContent={"center"}
            mb={30}
          >
            <HamburgerIcon
              display={{ base: "none", md: "block" }}
              onClick={onClose}
              color={"black"}
              boxSize="24px" // Adjust the size as needed
            />
          </ListItem>
        )}
        {navItems.map((item) => (
          <ListItem
            key={item.label}
            onClick={onClose}
            _hover={{ bg: "gray.100", cursor: "pointer" }}
            display="flex"
            borderRadius={3}
            py={2}
            alignItems="center"
            mb={30}
          >
            <Flex alignItems="center" ml={isCollapsed ? 0 : 2}>
              {item.icon} {/* Icon always visible */}
              {!isCollapsed && <Text ml={2}>{item.label}</Text>}{" "}
              {/* Label hidden when collapsed */}
            </Flex>
          </ListItem>
        ))}
      </List>
    </Box>
  );
};

export default Sidebar;

// File: \srk assignment\Shivam\my-diamond-app\components\TestimonialSlider.js
// components/TestimonialSlider.js
import React from "react";
import Slider from "react-slick";
import { Box, Skeleton } from "@chakra-ui/react";
import axios from "axios";

// Import Slick CSS (if not already imported in _document.js)
import "slick-carousel/slick/slick.css";
import "slick-carousel/slick/slick-theme.css";

const TestimonialSlider = ({
  testimonials,
  isLoadingTestimonials,
  errorTestimonials,
}) => {
  const settings = {
    dots: false,
    infinite: true,
    autoplay: true,
    autoplaySpeed: 1700,
    arrows: true,
    rows: 1,
    slidesToShow: 2,
    slidesToScroll: 1,
    responsive: [
      {
        breakpoint: 1440,
        settings: {
          slidesToShow: 2,
        },
      },
      {
        breakpoint: 1200,
        settings: {
          slidesToShow: 2,
        },
      },
      {
        breakpoint: 992,
        settings: {
          slidesToShow: 2,
        },
      },
      {
        breakpoint: 768,
        settings: {
          slidesToShow: 1,
        },
      },
      {
        breakpoint: 500,
        settings: {
          slidesToShow: 1,
        },
      },
    ],
  };

  // const testimonials = [
  //   {
  //     imageUrl:
  //       "https://opencart.workdo.io/diamond/image/catalog/testimonial/1.png",
  //     quote:
  //       "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's dummy.",
  //     author: "mr. onsequat developer",
  //     title: "Excellent",
  //   },
  //   {
  //     imageUrl:
  //       "https://opencart.workdo.io/diamond/image/catalog/testimonial/2.png",
  //     quote:
  //       "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's dummy.",
  //     author: "mr. onsequat developer",
  //     title: "Excellent",
  //   },
  //   {
  //     imageUrl:
  //       "https://opencart.workdo.io/diamond/image/catalog/testimonial/1.png",
  //     quote:
  //       "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's dummy.",
  //     author: "mr. onsequat developer",
  //     title: "Excellent",
  //   },
  //   {
  //     imageUrl:
  //       "https://opencart.workdo.io/diamond/image/catalog/testimonial/2.png",
  //     quote:
  //       "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's dummy.",
  //     author: "mr. onsequat developer",
  //     title: "Excellent",
  //   },
  // ];

  return (
    <div className="wbtesti">
      {/* {console.log(
        "in testimonial slider, tesimonials, isLoadingTestimonials",
        testimonials,
        isLoadingTestimonials
      )} */}
      {isLoadingTestimonials ? (
        <Box>
          <Skeleton height="200px" />
          <Skeleton height="20px" mt="4" />
          <Skeleton height="20px" mt="4" />
        </Box>
      ) : (
        testimonials &&
        testimonials.length > 0 && (
          <Slider {...settings}>
            {testimonials.map((testimonial, index) => (
              <div key={index} className="testi-spc">
                <div className="item">
                  <div className="testi-img">
                    <img
                      src={testimonial.ImageUrl}
                      alt={testimonial.Author}
                      className="img-fluid"
                    />
                  </div>
                  <div className="testi-dec">
                    <h4>{testimonial.Title}</h4>
                    <p>{testimonial.Quote}</p>
                    <div className="testdec-ctn">
                      <h4>{testimonial.Author}</h4>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </Slider>
        )
      )}
    </div>
  );
};

export default TestimonialSlider;

// File: \srk assignment\Shivam\my-diamond-app\components\WbSpecialSlider.js
// components/WbSpecialSlider.js
import React, { useEffect, useState } from "react";
import Slider from "react-slick";
// Import Slick CSS (you might already have this in _document.js)
import "slick-carousel/slick/slick.css";
import "slick-carousel/slick/slick-theme.css";

const WbSpecialSlider = () => {
  const settings = {
    dots: false,
    arrows: true,
    infinite: true,
    autoplay: true,
    autoplaySpeed: 2000,
    slidesToShow: 2,
    slidesToScroll: 1,
    rows: 1,
    responsive: [
      {
        breakpoint: 1900,
        settings: {
          slidesToShow: 2,
        },
      },
      {
        breakpoint: 1600,
        settings: {
          slidesToShow: 2,
        },
      },
      {
        breakpoint: 1400,
        settings: {
          slidesToShow: 2,
        },
      },
      {
        breakpoint: 1200,
        settings: {
          slidesToShow: 2,
        },
      },
      {
        breakpoint: 992,
        settings: {
          slidesToShow: 2,
        },
      },
      {
        breakpoint: 450,
        settings: {
          slidesToShow: 1,
        },
      },
    ],
  };

  // Commented out fetching logic
  // const [products, setProducts] = useState([]);
  // const [isLoading, setIsLoading] = useState(true);
  // const [error, setError] = useState(null);

  // useEffect(() => {
  //   fetchProducts();
  //   console.log("products", products);
  // }, []);

  // const fetchProducts = async () => {
  //   setIsLoading(true);
  //   setError(null);

  //   try {
  //     const response = await axios.get("/api/products");
  //     console.log("response", response);
  //     if (response.status === 200) {
  //       setProducts(response.data.products);
  //     } else {
  //       console.error("Error fetching products:", response.data.error);
  //       setError("Error fetching products");
  //     }
  //   } catch (error) {
  //     console.error("Error fetching products:", error);
  //     setError("An error occurred");
  //   } finally {
  //     setIsLoading(false);
  //   }
  // };

  // Static products data
  const products = [
    {
      Image1Url: "/image/cache/catalog/product/9/1-1000x1000.png",
      Image2Url: "/image/cache/catalog/product/9/2-1000x1000.png",
      ProductName: "Abigail Moon & Stars Ring",
      BrandName: "sunglass",
      PriceNew: "$150.00",
      PriceOld: "$3.00",
      DiscountPercentage: "46%",
      Link: "https://opencart.workdo.io/diamond/index.php?route=product/product&language=en-gb&product_id=29",
      sizes: ["xl", "xxl", "xxxl"], // Add size options if needed
      // ... other product properties
    },
    {
      Image1Url: "/image/cache/catalog/product/11/1-1000x1000.png",
      Image2Url: "/image/cache/catalog/product/11/2-1000x1000.png",
      ProductName: "Abigail Moon & Stars Ring",
      BrandName: "sunglass",
      PriceNew: "$150.00",
      PriceOld: "$3.00",
      DiscountPercentage: "46%",
      Link: "https://opencart.workdo.io/diamond/index.php?route=product/product&language=en-gb&product_id=29",
      sizes: ["xl", "xxl", "xxxl"], // Add size options if needed
      // ... other product properties
    },
    {
      Image1Url: "/image/cache/catalog/product/7/1-1000x1000.png",
      Image2Url: "/image/cache/catalog/product/7/2-1000x1000.png",
      ProductName: "Abigail Moon & Stars Ring",
      BrandName: "sunglass",
      PriceNew: "$150.00",
      PriceOld: "$3.00",
      DiscountPercentage: "46%",
      Link: "https://opencart.workdo.io/diamond/index.php?route=product/product&language=en-gb&product_id=29",
      sizes: ["xl", "xxl", "xxxl"], // Add size options if needed
      // ... other product properties
    },
    {
      Image1Url: "/image/cache/catalog/product/8/1-1000x1000.png",
      Image2Url: "/image/cache/catalog/product/8/2-1000x1000.png",
      ProductName: "Abigail Moon & Stars Ring",
      BrandName: "sunglass",
      PriceNew: "$150.00",
      PriceOld: "$3.00",
      DiscountPercentage: "46%",
      Link: "https://opencart.workdo.io/diamond/index.php?route=product/product&language=en-gb&product_id=29",
      sizes: ["xl", "xxl", "xxxl"], // Add size options if needed
      // ... other product properties
    },
    {
      Image1Url: "/image/cache/catalog/product/9/1-1000x1000.png",
      Image2Url: "/image/cache/catalog/product/9/2-1000x1000.png",
      ProductName: "Abigail Moon & Stars Ring",
      BrandName: "sunglass",
      PriceNew: "$150.00",
      PriceOld: "$3.00",
      DiscountPercentage: "46%",
      Link: "https://opencart.workdo.io/diamond/index.php?route=product/product&language=en-gb&product_id=29",
      sizes: ["xl", "xxl", "xxxl"], // Add size options if needed
      // ... other product properties
    },
  ];

  return (
    <div className="wbspecial">
      <Slider {...settings}>
        {products.map((product, index) => (
          <div key={index} className="col cless">
            <form>
              {/* ... (Your form code, removing any PHP and data-oc attributes) ... */}
              <div className="product-thumb">
                <div className="product-bg">
                  <div className="image">
                    {/* ... [discount % display logic] ... */}
                    {/* {product.DiscountPercentage > 0 && (
                      <span className="discount-onprice">
                        {product.DiscountPercentage}%
                      </span>
                    )} */}
                    <a href={product.Link}>
                      <div className="second-image">
                        <img
                          src={product.Image1Url}
                          title="Specials"
                          alt="Specials"
                          className="img-fluid"
                        />
                      </div>
                      <div className="second-image">
                        <img
                          src={product.Image2Url}
                          title="Specials"
                          alt="Specials"
                          className="img-fluid"
                        />
                      </div>
                    </a>
                  </div>
                  <div className="product-caption">
                    <div className="bran">
                      <span>
                        <a href="" className="textdeb">
                          {product.BrandName}
                        </a>
                      </span>
                    </div>
                    <h4 className="protitle">
                      <a href={product.Link}>{product.ProductName}</a>
                    </h4>
                  </div>
                  {/* ... [Rest of your caption and product details, removing PHP and data-oc attributes] ... */}
                </div>
              </div>
              {/* ... [Rest of your form code] ... */}
            </form>
          </div>
        ))}
      </Slider>
    </div>
  );
};

export default WbSpecialSlider;

// File: \srk assignment\Shivam\my-diamond-app\components\WdCategorySlider.js
// components/WdCategorySlider.js
import React from "react";
import Slider from "react-slick";

// Import Slick CSS (if not already imported in _document.js)
import "slick-carousel/slick/slick.css";
import "slick-carousel/slick/slick-theme.css";

const WdCategorySlider = () => {
  const settings = {
    dots: false,
    infinite: true,
    autoplay: false,
    slidesToShow: 2, // Show 2 categories at a time
    slidesToScroll: 1,
    rows: 1,
    arrows: true,
    responsive: [
      {
        breakpoint: 1400,
        settings: {
          slidesToShow: 2,
        },
      },
      {
        breakpoint: 1200,
        settings: {
          slidesToShow: 2,
        },
      },
      {
        breakpoint: 992,
        settings: {
          slidesToShow: 1,
        },
      },
      {
        breakpoint: 600,
        settings: {
          slidesToShow: 2,
        },
      },
      {
        breakpoint: 450,
        settings: {
          slidesToShow: 1,
        },
      },
    ],
  };

  const categories = [
    {
      imageUrl:
        "https://opencart.workdo.io/diamond/image/cache/catalog/category/1-270x335.jpg",
      name: "bracelet",
      link: "https://opencart.workdo.io/diamond/index.php?route=product/category&path=57",
      description: "A beautiful collection of bracelets for every occasion.",
    },
    {
      imageUrl:
        "https://opencart.workdo.io/diamond/image/cache/catalog/category/2-270x335.jpg",
      name: "necklace",
      link: "https://opencart.workdo.io/diamond/index.php?route=product/category&path=25",
      description:
        "Explore our stunning range of necklaces, from classic to modern.",
    },
    {
      imageUrl:
        "https://opencart.workdo.io/diamond/image/cache/catalog/category/3-270x335.jpg",
      name: "ring",
      link: "https://opencart.workdo.io/diamond/index.php?route=product/category&path=20",
      description:
        "Find the perfect ring for any occasion - engagement, wedding, or everyday wear.",
    },
    {
      imageUrl:
        "https://opencart.workdo.io/diamond/image/cache/catalog/category/4-270x335.jpg",
      name: "bead",
      link: "https://opencart.workdo.io/diamond/index.php?route=product/category&path=17",
      description:
        "Browse our collection of beautiful beads for jewelry making and crafting.",
    },
    // ... add more categories
  ];

  return (
    <div className="wdcategory">
      <Slider {...settings}>
        {categories.map((category, index) => (
          <div key={index} className="wd-item-layout">
            <div className="wd-item-img">
              <a href={category.link}>
                <img
                  src={category.imageUrl}
                  alt={category.name}
                  title={category.name}
                  className="img-fluid"
                />
              </a>
            </div>
            <h4 className="wd-item-title">
              <div className="catbr">
                <p>categories</p>
                <a href={category.link}>{category.name}</a>
              </div>
              <div className="wd-item-caption">
                <a href={category.link} className="btn btn-primary">
                  <span>Go to categories</span>
                  <img alt="stor-bg" src="image/catalog/stor-bg.svg" />
                </a>
              </div>
            </h4>
          </div>
        ))}
      </Slider>
    </div>
  );
};

export default WdCategorySlider;

// File: \srk assignment\Shivam\my-diamond-app\components\WdSelectedSlider.js
// components/WdSelectedSlider.js
import React from "react";
import Slider from "react-slick";

// Import Slick CSS
import "slick-carousel/slick/slick.css";
import "slick-carousel/slick/slick-theme.css";

const WdSelectedSlider = () => {
  const settings = {
    dots: false,
    infinite: true,
    autoplay: true,
    autoplaySpeed: 1700,
    slidesToShow: 4,
    slidesToScroll: 1,
    rows: 1,
    arrows: true,
    responsive: [
      {
        breakpoint: 1400,
        settings: {
          slidesToShow: 4,
        },
      },
      {
        breakpoint: 1200,
        settings: {
          slidesToShow: 4,
        },
      },
      {
        breakpoint: 992,
        settings: {
          slidesToShow: 3,
        },
      },
      {
        breakpoint: 600,
        settings: {
          slidesToShow: 2,
        },
      },
      {
        breakpoint: 450,
        settings: {
          slidesToShow: 1,
        },
      },
    ],
  };

  // Replace this with your actual product data
  const products = [
    {
      imageUrl1: "/image/cache/catalog/product/1/1-1000x1000.png",
      imageUrl2: "/image/cache/catalog/product/1/2-1000x1000.png",
      name: "Abigail Moon & Stars Ring",
      brand: "shoes", // Assuming brand is the manufacturer name
      price: "$1.00",
      link: "https://opencart.workdo.io/diamond/index.php?route=product/product&language=en-gb&product_id=28",
      // ... other product properties
    },
    {
      imageUrl1: "/image/cache/catalog/product/2/1-1000x1000.png",
      imageUrl2: "/image/cache/catalog/product/2/2-1000x1000.png",
      name: "Abigail Moon & Stars Ring",
      brand: "shoes", // Assuming brand is the manufacturer name
      price: "$1.00",
      link: "https://opencart.workdo.io/diamond/index.php?route=product/product&language=en-gb&product_id=28",
      // ... other product properties
    },
    {
      imageUrl1: "/image/cache/catalog/product/3/1-1000x1000.png",
      imageUrl2: "/image/cache/catalog/product/3/2-1000x1000.png",
      name: "Abigail Moon & Stars Ring",
      brand: "shoes", // Assuming brand is the manufacturer name
      price: "$1.00",
      link: "https://opencart.workdo.io/diamond/index.php?route=product/product&language=en-gb&product_id=28",
      // ... other product properties
    },
    {
      imageUrl1: "/image/cache/catalog/product/4/1-1000x1000.png",
      imageUrl2: "/image/cache/catalog/product/4/2-1000x1000.png",
      name: "Abigail Moon & Stars Ring",
      brand: "shoes", // Assuming brand is the manufacturer name
      price: "$1.00",
      link: "https://opencart.workdo.io/diamond/index.php?route=product/product&language=en-gb&product_id=28",
      // ... other product properties
    },
    {
      imageUrl1: "/image/cache/catalog/product/5/1-1000x1000.png",
      imageUrl2: "/image/cache/catalog/product/5/2-1000x1000.png",
      name: "Abigail Moon & Stars Ring",
      brand: "shoes", // Assuming brand is the manufacturer name
      price: "$1.00",
      link: "https://opencart.workdo.io/diamond/index.php?route=product/product&language=en-gb&product_id=28",
      // ... other product properties
    },
    {
      imageUrl1: "/image/cache/catalog/product/6/1-1000x1000.png",
      imageUrl2: "/image/cache/catalog/product/6/2-1000x1000.png",
      name: "Abigail Moon & Stars Ring",
      brand: "shoes", // Assuming brand is the manufacturer name
      price: "$1.00",
      link: "https://opencart.workdo.io/diamond/index.php?route=product/product&language=en-gb&product_id=28",
      // ... other product properties
    },
  ];

  return (
    <div className="wdselected" style={{ display: "block" }}>
      <Slider {...settings}>
        {products.map((product, index) => (
          <div key={index} className="col cless">
            <form>
              {/* ... (Your form code, removing PHP and data-oc attributes) ... */}
              <div className="product-thumb">
                <div className="product-bg">
                  <div className="image">
                    <a href={product.link}>
                      <div className="second-image">
                        <img
                          src={product.imageUrl1}
                          title="Product"
                          alt="Product"
                          className="img-fluid"
                        />
                      </div>
                      <div className="second-image">
                        <img
                          src={product.imageUrl2}
                          title="Product"
                          alt="Product"
                          className="img-fluid"
                        />
                      </div>
                    </a>
                  </div>
                  {/* ... [Your product details, removing PHP and data-oc attributes] ... */}
                </div>
              </div>
              {/* ... [Rest of your form code] ... */}
            </form>
          </div>
        ))}
      </Slider>
    </div>
  );
};

export default WdSelectedSlider;

// File: \srk assignment\Shivam\my-diamond-app\components\WdSelectedSlider2.js
// components/WdSelectedSlider.js
import React from "react";
import Slider from "react-slick";

// Import Slick CSS
import "slick-carousel/slick/slick.css";
import "slick-carousel/slick/slick-theme.css";

const WdSelectedSlider = () => {
  const settings = {
    dots: false,
    infinite: true,
    autoplay: false,
    slidesToShow: 4,
    slidesToScroll: 1,
    rows: 1,
    arrows: true,
    responsive: [
      {
        breakpoint: 1400,
        settings: {
          slidesToShow: 4,
        },
      },
      {
        breakpoint: 1200,
        settings: {
          slidesToShow: 4,
        },
      },
      {
        breakpoint: 992,
        settings: {
          slidesToShow: 3,
        },
      },
      {
        breakpoint: 600,
        settings: {
          slidesToShow: 2,
        },
      },
      {
        breakpoint: 450,
        settings: {
          slidesToShow: 1,
        },
      },
    ],
  };

  // Replace this with your actual product data
  const products = [
    {
      imageUrl1:
        "https://img.freepik.com/free-photo/precious-necklace-decorated-with-gemstones-lights-isolated_181624-28431.jpg",
      imageUrl2:
        "https://img.freepik.com/free-photo/precious-necklace-decorated-with-gemstones-lights-isolated_181624-28431.jpg",
      name: "Abigail Moon & Stars Ring",
      brand: "shoes", // Assuming brand is the manufacturer name
      price: "$1.00",
      link: "https://opencart.workdo.io/diamond/index.php?route=product/product&language=en-gb&product_id=28",
      // ... other product properties
    },
    {
      imageUrl1:
        "https://img.freepik.com/free-photo/beautiful-luxury-necklace-jewelry-stand-neck_1339-7953.jpg",
      imageUrl2:
        "https://img.freepik.com/free-photo/beautiful-luxury-necklace-jewelry-stand-neck_1339-7953.jpg",
      name: "Abigail Moon & Stars Ring",
      brand: "shoes", // Assuming brand is the manufacturer name
      price: "$1.00",
      link: "https://opencart.workdo.io/diamond/index.php?route=product/product&language=en-gb&product_id=28",
      // ... other product properties
    },
    {
      imageUrl1:
        "https://img.freepik.com/free-photo/precious-necklace-decorated-with-gemstones-lights-isolated_181624-28431.jpg",
      imageUrl2:
        "https://img.freepik.com/free-photo/precious-necklace-decorated-with-gemstones-lights-isolated_181624-28431.jpg",
      name: "Abigail Moon & Stars Ring",
      brand: "shoes", // Assuming brand is the manufacturer name
      price: "$1.00",
      link: "https://opencart.workdo.io/diamond/index.php?route=product/product&language=en-gb&product_id=28",
      // ... other product properties
    },
    {
      imageUrl1:
        "https://img.freepik.com/free-photo/beautiful-luxury-necklace-jewelry-stand-neck_1339-7953.jpg",
      imageUrl2:
        "https://img.freepik.com/free-photo/beautiful-luxury-necklace-jewelry-stand-neck_1339-7953.jpg",
      name: "Abigail Moon & Stars Ring",
      brand: "shoes", // Assuming brand is the manufacturer name
      price: "$1.00",
      link: "https://opencart.workdo.io/diamond/index.php?route=product/product&language=en-gb&product_id=28",
      // ... other product properties
    },
    {
      imageUrl1:
        "https://img.freepik.com/free-photo/precious-necklace-decorated-with-gemstones-lights-isolated_181624-28431.jpg",
      imageUrl2:
        "https://img.freepik.com/free-photo/precious-necklace-decorated-with-gemstones-lights-isolated_181624-28431.jpg",
      name: "Abigail Moon & Stars Ring",
      brand: "shoes", // Assuming brand is the manufacturer name
      price: "$1.00",
      link: "https://opencart.workdo.io/diamond/index.php?route=product/product&language=en-gb&product_id=28",
      // ... other product properties
    },
    {
      imageUrl1:
        "https://img.freepik.com/free-photo/beautiful-luxury-necklace-jewelry-stand-neck_1339-7953.jpg",
      imageUrl2:
        "https://img.freepik.com/free-photo/beautiful-luxury-necklace-jewelry-stand-neck_1339-7953.jpg",
      name: "Abigail Moon & Stars Ring",
      brand: "shoes", // Assuming brand is the manufacturer name
      price: "$1.00",
      link: "https://opencart.workdo.io/diamond/index.php?route=product/product&language=en-gb&product_id=28",
      // ... other product properties
    },
  ];
  return (
    <div className="wdselected" style={{ display: "block" }}>
      <Slider {...settings}>
        {products.map((product, index) => (
          <div key={index} className="col cless">
            <form>
              {/* ... (Your form code, removing PHP and data-oc attributes) ... */}
              <div className="product-thumb">
                <div className="product-bg">
                  <div className="image">
                    <div className="image-container">
                      <a href={product.link}>
                        <div className="second-image">
                          <img
                            src={product.imageUrl1}
                            title="Product"
                            alt="Product"
                            className="img-fluid"
                          />
                        </div>
                        <div className="second-image">
                          <img
                            src={product.imageUrl2}
                            title="Product"
                            alt="Product"
                            className="img-fluid"
                          />
                        </div>
                      </a>
                    </div>
                  </div>
                  {/* ... [Your product details, removing PHP and data-oc attributes] ... */}
                </div>
              </div>
              {/* ... [Rest of your form code] ... */}
            </form>
          </div>
        ))}
      </Slider>
    </div>
  );
};

export default WdSelectedSlider;

// File: \srk assignment\Shivam\my-diamond-app\pages\admin\dashboard.js
// pages/admin/dashboard.js
import { useSession } from "next-auth/react";
import { useRouter } from "next/router";
import { useEffect } from "react";

const AdminDashboard = () => {
  const router = useRouter();
  const { data: session } = useSession();

  useEffect(() => {
    if (!session || session.user.role !== "admin") {
      // Redirect to login or unauthorized page
      router.push("/auth/login");
    }
  }, [session, router]);

  //  admin dashboard content
  return (
    <div>
      <h1>ADMIN Dashboard</h1>
    </div>
  );
};

export default AdminDashboard;

// File: \srk assignment\Shivam\my-diamond-app\pages\api\auth\[...nextauth].js

// File: \srk assignment\Shivam\my-diamond-app\pages\api\product\category-products.js
// pages/api/products.js
import { callStoredProcedure } from "../db";

export default async (req, res) => {
  if (req.method === "GET") {
    try {
      const { category } = req.query;
      const result = await callStoredProcedure("sp_GetProductsByCategory",{
        category:category
      });

      if (result.status === 1) {
        res.status(200).json({
          products: result.data,
          totalCount: result.total,
        });
      } else {
        throw new Error(result.message);
      }
    } catch (error) {
      console.error(error);
      res.status(500).json({ error: "Error fetching products" });
    }
  } else {
    res.status(405).end(); // Method Not Allowed
  }
};

// File: \srk assignment\Shivam\my-diamond-app\pages\api\product\products-details.js
// pages/api/products.js
import { callStoredProcedure } from "../db";

export default async (req, res) => {
  if (req.method === "GET") {
    try {
      const { product } = req.query;
      const result = await callStoredProcedure("sp_GetProductsBySlug",{
        slug:product
      });

      if (result.status === 1) {
        res.status(200).json({
          products: result.data,
          totalCount: result.total,
        });
      } else {
        throw new Error(result.message);
      }
    } catch (error) {
      console.error(error);
      res.status(500).json({ error: "Error fetching products" });
    }
  } else {
    res.status(405).end(); // Method Not Allowed
  }
};

// File: \srk assignment\Shivam\my-diamond-app\pages\api\product\products.js
// pages/api/products.js
import { callStoredProcedure } from "../db";

export default async (req, res) => {
  if (req.method === "GET") {
    try {
      const result = await callStoredProcedure("sp_GetProductsForSliders");

      if (result.status === 1) {
        res.status(200).json({
          products: result.data,
          totalCount: result.total,
        });
      } else {
        throw new Error(result.message);
      }
    } catch (error) {
      console.error(error);
      res.status(500).json({ error: "Error fetching products" });
    }
  } else {
    res.status(405).end(); // Method Not Allowed
  }
};

// File: \srk assignment\Shivam\my-diamond-app\pages\api\solitairebySlug\[solitaireSlug].js

// File: \srk assignment\Shivam\my-diamond-app\pages\api\blogs.js
import { callStoredProcedure } from "./db";

export default async (req, res) => {
  if (req.method === "GET") {
    try {
      const result = await callStoredProcedure("sp_GetActiveBlogs");

      if (result.status === 1) {
        res.status(200).json({
          blogs: result.data,
          totalCount: result.total,
        });
      } else {
        throw new Error(result.message);
      }
    } catch (error) {
      console.error(error);
      res.status(500).json({ error: "Error fetching blogs." });
    }
  } else {
    res.status(405).end();
  }
};

// File: \srk assignment\Shivam\my-diamond-app\pages\api\categories.js
import { callStoredProcedure } from "./db";

export default async (req, res) => {
  if (req.method === "GET") {
    try {
      const result = await callStoredProcedure("sp_GetCategories");

      if (result.status === 1) {
        res.status(200).json({
          data: result.data,
          totalCount: result.total,
        });
      } else {
        throw new Error(result.message);
      }
    } catch (error) {
      console.error(error);
      res.status(500).json({ error: "Error fetching blogs." });
    }
  } else {
    res.status(405).end();
  }
};

// File: \srk assignment\Shivam\my-diamond-app\pages\api\db.js
// lib/db.js
import sql from "mssql";

const config = {
  user: process.env.SQL_USERNAME,
  password: process.env.SQL_PASSWORD, // *** VERY IMPORTANT *** Change this password immediately
  server: process.env.SQL_HOST,
  database: process.env.SQL_DBNAME,
  options: {
    encrypt: false,
    trustServerCertificate: true,
  },
};

const dbClientService = async () => {
  try {
    const pool = await sql.connect(config);
    return pool;
  } catch (error) {
    console.error("Error connecting to database:", error);
    throw error;
  }
};

async function callStoredProcedure(procedureName, params = {}) {
  try {
    const pool = await dbClientService();
    const request = pool.request();

    // Add parameters if provided
    if (Object.keys(params).length > 0) {
      for (const paramName in params) {
        request.input(paramName, params[paramName]);
      }
    }

    // Add output parameters
    request.output("StatusID", sql.Int);
    request.output("StatusMessage", sql.VarChar(200));
    request.output("TotalCount", sql.Int);

    const result = await request.execute(procedureName);

    return {
      status: result.output.StatusID,
      message: result.output.StatusMessage,
      total: result.output.TotalCount,
      data: result.recordset,
    };
  } catch (error) {
    console.error("Error occurred:", error);
    throw error;
  }
}

export { dbClientService, callStoredProcedure };

// File: \srk assignment\Shivam\my-diamond-app\pages\api\faq.js
// pages/api/products.js
import { callStoredProcedure } from "./db";

export default async (req, res) => {
  if (req.method === "GET") {
    try {
      
      const result = await callStoredProcedure("sp_GetFaq",{
       
      });

      if (result.status === 1) {
        res.status(200).json({
          data: result.data,
          totalCount: result.total,
        });
      } else {
        throw new Error(result.message);
      }
    } catch (error) {
      console.error(error);
      res.status(500).json({ error: "Error fetching products" });
    }
  } else {
    res.status(405).end(); // Method Not Allowed
  }
};

// File: \srk assignment\Shivam\my-diamond-app\pages\api\hello.js
// Next.js API route support: https://nextjs.org/docs/api-routes/introduction

export default function handler(req, res) {
  res.status(200).json({ name: "John Doe" });
}

// File: \srk assignment\Shivam\my-diamond-app\pages\api\pages.js
// pages/api/products.js
import { callStoredProcedure } from "./db";

export default async (req, res) => {
  if (req.method === "GET") {
    try {
      const { slug } = req.query;
      const result = await callStoredProcedure("sp_GetPage",{
        slug:slug
      });

      if (result.status === 1) {
        res.status(200).json({
          data: result.data,
          totalCount: result.total,
        });
      } else {
        throw new Error(result.message);
      }
    } catch (error) {
      console.error(error);
      res.status(500).json({ error: "Error fetching products" });
    }
  } else {
    res.status(405).end(); // Method Not Allowed
  }
};

// File: \srk assignment\Shivam\my-diamond-app\pages\api\s3.js
// s3.js

import {
  S3Client,
  PutObjectCommand,
  DeleteObjectCommand,
  GetObjectCommand,
} from "@aws-sdk/client-s3";
import { getSignedUrl } from "@aws-sdk/s3-request-presigner";

const bucketName = process.env.MY_AWS_BUCKET_NAME;
const region = process.env.MY_AWS_BUCKET_REGION;
const accessKeyId = process.env.MY_AWS_ACCESS_KEY;
const secretAccessKey = process.env.MY_AWS_SECRET_ACCESS_KEY;

const s3Client = new S3Client({
  region,
  credentials: {
    accessKeyId,
    secretAccessKey,
  },
});

export async function uploadFile(fileBuffer, fileName, mimetype) {
  const uploadParams = {
    Bucket: bucketName,
    Body: fileBuffer,
    Key: fileName,
    ContentType: mimetype,
  };

  try {
    const data = await s3Client.send(new PutObjectCommand(uploadParams));
    console.log("Successfully uploaded file s3.js:", data);
    return data;
  } catch (error) {
    console.error("Error uploading file s3.js:", error);
    throw error;
  }
}

export async function deleteFile(fileName) {
  const deleteParams = {
    Bucket: bucketName,
    Key: fileName,
  };

  return s3Client.send(new DeleteObjectCommand(deleteParams));
}

// get signed url for image to be displayed in browser
export async function getObjectSignedUrl(key) {
  const params = {
    Bucket: bucketName,
    Key: key,
  };

  try {
    // https://aws.amazon.com/blogs/developer/generate-presigned-url-modular-aws-sdk-javascript/
    const command = new GetObjectCommand(params);
    const seconds = 86400;
    const url = await getSignedUrl(s3Client, command, { expiresIn: seconds });
    console.log("Signed URL in S3.js:", url);
    return url;
  } catch (error) {
    console.error("Error generating signed URL:", error);
    throw new Error("Could not generate signed URL:" + error);
  }
}

// File: \srk assignment\Shivam\my-diamond-app\pages\api\searchsolitaire.js
import { callStoredProcedure } from "./db";
import { getObjectSignedUrl } from "./s3";

export default async (req, res) => {
  if (req.method === "GET") {
    try {
      const pageNumber = parseInt(req.query.pageNumber) || 1; // Default to page 1
      const pageSize = parseInt(req.query.pageSize) || 20; // Default to page size 20

      const result = await callStoredProcedure(
        "sp_GetSolitairesByPage",
        {
          PageNumber: pageNumber,
          PageSize: pageSize,
        },
        ["StatusID", "StatusMessage", "TotalCount"]
      );

      if (result.status === 1) {
        const solitairesWithUrls = await Promise.all(
          result.data.map(async (solitaire) => {
            const imageKeys = [
              "Image1",
              "Image2",
              "Image3",
              "Image4",
              "Image5",
            ];
            const imageUrls = await Promise.all(
              imageKeys.map(async (key) => {
                let imageUrl = null;
                if (solitaire[key]) {
                  try {
                    imageUrl = await getObjectSignedUrl(solitaire[key]);
                    console.log(
                      `Signed URL for solitaire ${solitaire.SolitaireID} (${key}):`,
                      imageUrl
                    );
                  } catch (error) {
                    console.error(
                      `Error generating signed URL for solitaire ${solitaire.SolitaireID} (${key}):`,
                      error
                    );
                  }
                }
                return imageUrl;
              })
            );

            // Generate signed URLs for PDF and Video
            let pdfUrl = null;
            if (solitaire.PDFKey) {
              try {
                pdfUrl = await getObjectSignedUrl(solitaire.PDFKey);
                console.log(
                  `Signed PDF URL for solitaire ${solitaire.SolitaireID}:`,
                  pdfUrl
                );
              } catch (error) {
                console.error(
                  `Error generating signed PDF URL for solitaire ${solitaire.SolitaireID}:`,
                  error
                );
              }
            }

            let videoUrl = null;
            if (solitaire.VideoKey) {
              try {
                videoUrl = await getObjectSignedUrl(solitaire.VideoKey);
                console.log(
                  `Signed Video URL for solitaire ${solitaire.SolitaireID}:`,
                  videoUrl
                );
              } catch (error) {
                console.error(
                  `Error generating signed Video URL for solitaire ${solitaire.SolitaireID}:`,
                  error
                );
              }
            }

            return {
              ...solitaire,
              Image1: imageUrls[0],
              Image2: imageUrls[1],
              Image3: imageUrls[2],
              Image4: imageUrls[3],
              Image5: imageUrls[4],
              pdfUrl: pdfUrl,
              videoUrl: videoUrl,
            };
          })
        );

        res.setHeader("Cache-Control", "no-cache, no-store, must-revalidate"); //  Prevent caching
        res.setHeader("Pragma", "no-cache"); //  Prevent caching
        res.setHeader("Expires", "0"); //  Prevent caching
        res.json({
          statusid: result.status,
          statusmessage: result.message,
          totalcount: result.total,
          solitaires: solitairesWithUrls,
        });
      } else {
        throw new Error(result.statusmessage);
      }
    } catch (error) {
      console.error("Error fetching solitaires:", error);
      res
        .status(500)
        .json({ statusid: 0, statusmessage: "Error fetching solitaires" });
    }
  } else {
    res.status(405).end(); // Method Not Allowed
  }
};

// File: \srk assignment\Shivam\my-diamond-app\pages\api\shapes.js
// pages/api/shapes.js
import { callStoredProcedure } from "./db"; // Import from db.js

export default async (req, res) => {
  try {
    const result = await callStoredProcedure("sp_GetShapes");

    if (result.status === 1) {
      res.status(200).json({
        shapes: result.data,
        totalCount: result.total,
      });
      // console.log("Shapes fetched successfully");
      // console.log("Shapes:", result.data);
    } else {
      throw new Error(result.message);
    }
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "Error fetching shapes" });
  }
};

// File: \srk assignment\Shivam\my-diamond-app\pages\api\sliders.js
import { callStoredProcedure } from "./db";

export default async (req, res) => {
  if (req.method === "GET") {
    try {
      const result = await callStoredProcedure("sp_GetSliders");

      if (result.status === 1) {
        res.status(200).json({
          data: result.data,
          totalCount: result.total,
        });
      } else {
        throw new Error(result.message);
      }
    } catch (error) {
      console.error(error);
      res.status(500).json({ error: "Error fetching blogs." });
    }
  } else {
    res.status(405).end();
  }
};

// File: \srk assignment\Shivam\my-diamond-app\pages\api\solitaire.js
import { callStoredProcedure } from "./db"; // Import from db.js
import { getObjectSignedUrl } from "./s3";

export default async function handler(req, res) {
  if (req.method === "GET") {
    try {
      const result = await callStoredProcedure("sp_AdminGetAllFilters", {}, [
        "StatusID",
        "StatusMessage",
        "TotalCount",
      ]); // Include TotalCount output parameter
      // console.log("Result from sp_AdminGetAllFilters:", result);
      if (result.status === 1) {
        const filterData = result.data[0]; // Extract data from the first row

        // Parse the JSON strings into JavaScript arrays
        const shapes = JSON.parse(filterData.Shapes);
        const carats = JSON.parse(filterData.Carats);
        const colors = JSON.parse(filterData.Colors);
        const flours = JSON.parse(filterData.Flours);
        const purities = JSON.parse(filterData.Purities);
        const cuts = JSON.parse(filterData.Cuts);
        const labs = JSON.parse(filterData.Labs);
        const polishs = JSON.parse(filterData.Polishs);
        const symmetries = JSON.parse(filterData.Symmetries);
        const locations = JSON.parse(filterData.Locations);

        // Generate signed URLs for shapes
        const shapesWithUrls = await Promise.all(
          shapes.map(async (shape) => {
            let imageUrl = null;
            if (shape.ImageKey) {
              try {
                imageUrl = await getObjectSignedUrl(shape.ImageKey);
              } catch (error) {
                console.error(
                  `Error generating signed URL for shape ${shape.ShapeID}:`,
                  error
                );
              }
            }
            return { ...shape, imageUrl };
          })
        );

        res.status(200).json({
          shapes: shapesWithUrls,
          carats: carats, // Use the parsed arrays
          colors: colors,
          flours: flours,
          purities: purities,
          cuts: cuts,
          labs: labs,
          polishs: polishs,
          symmetries: symmetries,
          locations: locations,
          totalCount: result.totalcount,
        });
      } else {
        res.status(400).json({ error: "Error fetching filter data." });
      }
    } catch (error) {
      console.error("Error fetching all filter data:", error);
      res.status(500).json({ error: "Error fetching filter data." });
    }
  } else {
    res.status(405).end(); // Method Not Allowed
  }
}

// File: \srk assignment\Shivam\my-diamond-app\pages\api\testimonials.js
import { callStoredProcedure } from "./db";

export default async (req, res) => {
  if (req.method === "GET") {
    try {
      const result = await callStoredProcedure("sp_GetTestimonials");

      if (result.status === 1) {
        res.status(200).json({
          testimonials: result.data,
          totalCount: result.total,
        });
      } else {
        throw new Error(result.message);
      }
    } catch (error) {
      console.error(error);
      res.status(500).json({ error: "Error fetching testimonials." });
    }
  } else {
    res.status(405).end();
  }
};

// File: \srk assignment\Shivam\my-diamond-app\pages\api\users.js
// pages/api/users.js
import { callStoredProcedure } from "./db";

export default async (req, res) => {
  if (req.method === "POST") {
    try {
      const { email, password, role } = req.body;
      const result = await callStoredProcedure("sp_CreateUser", {
        Email: email,
        PasswordHash: password, // Password is already hashed in the frontend
        Role: role,
      });

      res.status(200).json(result);
    } catch (error) {
      console.error(error);
      res.status(500).json({ error: "Error creating user" });
    }
  } else {
    res.status(405).json({ error: "Method not allowed" });
  }
};

// File: \srk assignment\Shivam\my-diamond-app\pages\api\auth\[...nextauth].js

// File: \srk assignment\Shivam\my-diamond-app\pages\api\product\category-products.js
// pages/api/products.js
import { callStoredProcedure } from "../db";

export default async (req, res) => {
  if (req.method === "GET") {
    try {
      const { category } = req.query;
      const result = await callStoredProcedure("sp_GetProductsByCategory",{
        category:category
      });

      if (result.status === 1) {
        res.status(200).json({
          products: result.data,
          totalCount: result.total,
        });
      } else {
        throw new Error(result.message);
      }
    } catch (error) {
      console.error(error);
      res.status(500).json({ error: "Error fetching products" });
    }
  } else {
    res.status(405).end(); // Method Not Allowed
  }
};

// File: \srk assignment\Shivam\my-diamond-app\pages\api\product\products-details.js
// pages/api/products.js
import { callStoredProcedure } from "../db";

export default async (req, res) => {
  if (req.method === "GET") {
    try {
      const { product } = req.query;
      const result = await callStoredProcedure("sp_GetProductsBySlug",{
        slug:product
      });

      if (result.status === 1) {
        res.status(200).json({
          products: result.data,
          totalCount: result.total,
        });
      } else {
        throw new Error(result.message);
      }
    } catch (error) {
      console.error(error);
      res.status(500).json({ error: "Error fetching products" });
    }
  } else {
    res.status(405).end(); // Method Not Allowed
  }
};

// File: \srk assignment\Shivam\my-diamond-app\pages\api\product\products.js
// pages/api/products.js
import { callStoredProcedure } from "../db";

export default async (req, res) => {
  if (req.method === "GET") {
    try {
      const result = await callStoredProcedure("sp_GetProductsForSliders");

      if (result.status === 1) {
        res.status(200).json({
          products: result.data,
          totalCount: result.total,
        });
      } else {
        throw new Error(result.message);
      }
    } catch (error) {
      console.error(error);
      res.status(500).json({ error: "Error fetching products" });
    }
  } else {
    res.status(405).end(); // Method Not Allowed
  }
};

// File: \srk assignment\Shivam\my-diamond-app\pages\api\solitairebySlug\[solitaireSlug].js

// File: \srk assignment\Shivam\my-diamond-app\pages\auth\login.js
// pages/auth/login.js
import { useEffect, useState } from "react";
import { useRouter } from "next/router";
import { getSession, signIn, useSession } from "next-auth/react";
import {
  Box,
  Flex,
  Heading,
  FormControl,
  FormLabel,
  Input,
  Button,
  Tab,
  Tabs,
  TabList,
  TabPanel,
  TabPanels,
  Alert,
  AlertIcon,
  AlertTitle,
  CloseButton,
  Checkbox,
} from "@chakra-ui/react";
import bcrypt from "bcryptjs";
import axios from "axios";

const LoginSignup = () => {
  const [tabIndex, setTabIndex] = useState(0);
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState(null);
  const [remember, setRemember] = useState(false);
  //   const { data: session, status } = useSession();
  const router = useRouter();

  const handleEmailChange = (event) => setEmail(event.target.value);
  const handlePasswordChange = (event) => setPassword(event.target.value);
  const handleRememberChange = (event) => setRemember(event.target.checked);

  //   useEffect(() => {
  //     console.log(remember);
  //   }, [remember]);

  const handleSubmit = async (event) => {
    event.preventDefault();

    setError(null);

    try {
      if (tabIndex === 0) {
        // Login
        const result = await signIn("credentials", {
          redirect: false,
          email,
          password,
          remember,
        });
        console.log("Login result:", result);

        if (result.error) {
          setError(result.error);
        } else {
          // Redirect to the appropriate dashboard based on role
          // ...
          if (result.ok) {
            // Check if login was successful
            const session = await getSession();
            if (session?.user?.role === "admin") {
              // Optional chaining for safety
              router.push("/admin/dashboard");
            } else {
              router.push(router.query.callbackUrl || "/user/dashboard");
            }
          }
        }
      } else {
        // Signup
        const hashedPassword = await bcrypt.hash(password, 10);
        const res = await axios.post("/api/users", {
          email,
          password: hashedPassword,
          role: "user", // Set default role
        });

        if (res.data.status === 1) {
          // Redirect to login page
          setTabIndex(0);
          setEmail("");
          setPassword("");
        } else {
          setError(res.data.message);
        }
      }
    } catch (error) {
      console.error(error);
      setError("An error occurred. Please try again.");
    }
  };

  return (
    <Flex
      minHeight="100vh"
      width="full"
      align="center"
      justifyContent="center"
      backgroundColor="gray.200" // Set background color for base breakpoint
    >
      <Box
        display={{ base: "block", md: "flex" }} // Show as flex on medium and larger screens
        maxWidth={{ base: "100%", md: "80%", lg: "100%" }} // Full width on base, 80% on medium, 100% on large
        width="100%"
      >
        {/* Video Background (lg only) */}
        <Box
          position="relative"
          w={{ base: "0%", md: "0%", lg: "66%" }} // Adjust width based on breakpoint
          h="100vh"
          display={{ base: "none", lg: "block" }} // Only display on large screens
          overflow="hidden"
        >
          <video
            src="/vid/login-video.mp4" // Replace with your stock video URL
            autoPlay
            loop
            muted
            style={{
              position: "absolute",
              top: 0,
              left: 0,
              width: "100%",
              height: "100%",
              objectFit: "cover",
            }}
          />
          <Box
            position="absolute"
            top={0}
            left={0}
            w="100%"
            h="100%"
            bg="blackAlpha.50" // Add a semi-transparent overlay for better readability
          />
        </Box>

        {/* Login UI */}
        <Flex
          direction="column"
          alignItems="center"
          justifyContent="center"
          w={{ base: "100%", md: "auto", lg: "34%" }} // Adjust width based on breakpoint
          p={8}
          backgroundColor="white"
          borderRadius={{ base: 0, md: "8px", lg: "8px" }} // Add borderRadius on medium and larger screens
          boxShadow={{ base: "none", md: "lg", lg: "lg" }} // Add boxShadow on medium and larger screens
        >
          <Heading mb={6} textAlign="center">
            {tabIndex === 0 ? "Login" : "Signup"}
          </Heading>

          {/* Error Alert */}
          {error && (
            <Alert status="error" mb={4}>
              <AlertIcon />
              <AlertTitle mr={2}>{error}</AlertTitle>
              <CloseButton
                position="absolute"
                right="8px"
                top="8px"
                onClick={() => setError(null)}
              />
            </Alert>
          )}

          {/* Tabs */}
          <Tabs
            index={tabIndex}
            onChange={setTabIndex}
            variant="soft-rounded"
            colorScheme="blue"
          >
            <TabList mb={4}>
              <Tab>Login</Tab>
              <Tab>Signup</Tab>
            </TabList>
            <TabPanels>
              {/* Login Form */}
              <TabPanel>
                <form onSubmit={handleSubmit}>
                  <FormControl id="email" isRequired mb={3}>
                    <FormLabel>Email</FormLabel>
                    <Input
                      value={email}
                      onChange={handleEmailChange}
                      type="email"
                    />
                  </FormControl>
                  <FormControl id="password" isRequired mb={3}>
                    <FormLabel>Password</FormLabel>
                    <Input
                      value={password}
                      onChange={handlePasswordChange}
                      type="password"
                    />
                  </FormControl>
                  <FormControl
                    id="remember"
                    display="flex"
                    alignItems="center"
                    mb={6}
                  >
                    <FormLabel htmlFor="remember" mb="0">
                      Remember me
                    </FormLabel>
                    <Checkbox
                      id="remember"
                      onChange={(event) => handleRememberChange(event)}
                      ml={2}
                    />
                  </FormControl>
                  <Button colorScheme="blue" type="submit" width="full">
                    Login
                  </Button>
                </form>
              </TabPanel>

              {/* Signup Form */}
              <TabPanel>
                {/* ... (Your signup form code remains the same) ... */}
                <form onSubmit={handleSubmit}>
                  <FormControl id="email" isRequired mb={3}>
                    <FormLabel>Email</FormLabel>
                    <Input
                      value={email}
                      onChange={handleEmailChange}
                      type="email"
                    />
                  </FormControl>
                  <FormControl id="password" isRequired mb={6}>
                    <FormLabel>Password</FormLabel>
                    <Input
                      value={password}
                      onChange={handlePasswordChange}
                      type="password"
                    />
                  </FormControl>
                  <Button colorScheme="teal" type="submit">
                    Signup
                  </Button>
                </form>
              </TabPanel>
            </TabPanels>
          </Tabs>
        </Flex>
      </Box>
    </Flex>
  );
};

export default LoginSignup;

// File: \srk assignment\Shivam\my-diamond-app\pages\category\[slug].js

// File: \srk assignment\Shivam\my-diamond-app\pages\product\[productSlug].js

// File: \srk assignment\Shivam\my-diamond-app\pages\user\dashboard.js
// pages/user/dashboard.js
import { useSession } from "next-auth/react";
import { useRouter } from "next/router";
import { useEffect } from "react";

const UserDashboard = () => {
  const router = useRouter();
  const { data: session } = useSession();

  useEffect(() => {
    if (!session || session.user.role !== "user") {
      // Check for 'user' role
      // Redirect to login or unauthorized page
      router.push("/auth/login");
    }
  }, [session, router]);

  // ... Your user dashboard content ...
  return (
    <div>
      <h1>User Dashboard</h1>
    </div>
  );
};

export default UserDashboard;

// File: \srk assignment\Shivam\my-diamond-app\pages\cart.js
import React, { useEffect, useState } from "react";
import Link from "next/link";
import {
  getCartItemsFromLocalStorage,
  addToCart,
  removeFromCart,
  updateCartItemQuantity,
} from "../utils/cartfns";

const CartPage = () => {
  const [cartItems, setCartItems] = useState([]);
  const [country, setCountry] = useState("");
  const [region, setRegion] = useState("");
  const [postcode, setPostcode] = useState("");
  const [coupon, setCoupon] = useState(""); // For coupon code
  const [giftCertificate, setGiftCertificate] = useState("");
  const [cartDropdownOpen, setCartDropdownOpen] = useState(false); // For dropdown

  useEffect(() => {
    const updateCart = () => {
      setCartItems(getCartItemsFromLocalStorage());
    };

    window.addEventListener("storage", updateCart);
    return () => window.removeEventListener("storage", updateCart);
  }, []);

  useEffect(() => {
    // Fetch cart items from localStorage when the component mounts
    setCartItems(getCartItemsFromLocalStorage());
  }, []);

  const handleRemoveFromCart = (solitaireId) => {
    removeFromCart(solitaireId);
    setCartItems(getCartItemsFromLocalStorage());
  };

  const handleQuantityChange = (solitaireId, newQuantity) => {
    updateCartItemQuantity({ SolitaireID: solitaireId, quantity: newQuantity });
    setCartItems(getCartItemsFromLocalStorage());
  };

  // Dummy functions for handling form submissions (replace with your actual logic)
  const handleShippingSubmit = async (event) => {
    event.preventDefault();
    console.log("Shipping form submitted:", country, region, postcode);
  };

  const handleCouponSubmit = async (event) => {
    event.preventDefault();
    console.log("Coupon form submitted:", coupon);
  };
  const toggleCartDropdown = () => {
    setCartDropdownOpen(!cartDropdownOpen);
  };
  const handleGiftCertificateSubmit = async (event) => {
    event.preventDefault();
    console.log("Gift certificate form submitted:", giftCertificate);
  };

  // Calculate subtotal and total (replace with your actual logic)
  const subTotal = cartItems.reduce(
    (total, item) => total + item.Price * item.quantity,
    0
  );
  const total = subTotal; // For now, total is the same as subtotal

  return (
    <div>
      {/* Main Content */}
      <header>
        <div className="top-header hidden-xs" style={{ fontFamily: "outfit" }}>
          <div className="container">
            <div className="row">
              <div className="topbspinner">
                <div className="col-md-6 col-xs-12">
                  <div className="ebook">
                    <div className="ebook-ctn">
                      <h4>Monday - Friday: 8:00 AM - 9:00 PM</h4>
                    </div>
                  </div>
                </div>
                <div className="col-md-6 col-xs-12">
                  <div className="custom-link">
                    <a href="index.php?route=information/information&language=en-gb&information_id=1">
                      About
                    </a>
                    <a href="index.php?route=information/sitemap&language=en-gb">
                      Site Map
                    </a>
                    <a href="index.php?route=product/manufacturer&language=en-gb">
                      Brand
                    </a>
                    <a href="index.php?route=information/contact&language=en-gb">
                      Contact
                    </a>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div className="homemenu">
          <div className="container">
            <div className="row">
              <div className="sub_megamenu">
                <div className="container_wb_megamenu">
                  <div id="stamenu">
                    <nav id="menu" className="navbar">
                      <div className="navbar-expand-md">
                        <button
                          type="button"
                          className="btn-navbar navbar-toggler"
                          onclick="openNav()"
                          data-bs-toggle="collapse"
                          data-bs-target=".navbar-ex1-collapse"
                        >
                          <i className="fa fa-bars" />
                        </button>
                      </div>
                      <div id="wr-menu-icon ">
                        <div
                          className="wrmenu collapsed"
                          data-bs-toggle="collapse"
                          data-bs-target="#under-menu"
                          aria-expanded="false"
                          aria-controls="collapseExample"
                        ></div>
                      </div>
                      <div id="mySidenav" className="sidenav menu-vertical">
                        <div id="under-menu" className="">
                          <div className="close-nav">
                            <span className="categories">Categories</span>
                            <a
                              href="javascript:void(0)"
                              className="closebtn float-end"
                              onclick="closeNav()"
                            >
                              <i className="fa fa-close" />
                            </a>
                          </div>
                          <div className="navbar-collapse navbar-ex1-collapse">
                            <ul className="nav navbar-nav">
                              <li className="nav-item">
                                <a href={"/solitaire"} className="nav-item">
                                  Solitaire
                                </a>
                              </li>
                              <li className="nav-item">
                                <a
                                  href="https://opencart.workdo.io/diamond/index.php?route=product/category&language=en-gb&path=60"
                                  className="nav-link"
                                >
                                  {/*<img src="https://opencart.workdo.io/diamond/image/cache/catalog/menu-icon/meat-fish-14x14.png" alt="Amethyst" title="Amethyst"> */}{" "}
                                  Amethyst
                                </a>
                              </li>
                              <li className="nav-item">
                                <a
                                  href="https://opencart.workdo.io/diamond/index.php?route=product/category&language=en-gb&path=67"
                                  className="nav-link"
                                >
                                  {/*<img src="" alt="Blue Sapphire" title="Blue Sapphire"> */}{" "}
                                  Blue Sapphire
                                </a>
                              </li>
                              <li className="nav-item">
                                <a
                                  href="https://opencart.workdo.io/diamond/index.php?route=product/category&language=en-gb&path=17"
                                  className="nav-link"
                                >
                                  {/*<img src="https://opencart.workdo.io/diamond/image/cache/catalog/menu-icon/coffee--tea-14x14.png" alt="Black Diamond" title="Black Diamond"> */}{" "}
                                  Black Diamond
                                </a>
                              </li>
                              <li className="nav-item">
                                <a
                                  href="https://opencart.workdo.io/diamond/index.php?route=product/category&language=en-gb&path=68"
                                  className="nav-link"
                                >
                                  {/*<img src="https://opencart.workdo.io/diamond/image/cache/catalog/menu-icon/chocolate-crackers-14x14.png" alt="Ametrine" title="Ametrine"> */}{" "}
                                  Ametrine
                                </a>
                              </li>
                            </ul>
                          </div>
                        </div>
                      </div>
                    </nav>
                    <div
                      className="w3-overlay w3-animate-opacity"
                      onclick="closeNav()"
                      style={{ cursor: "pointer" }}
                      id="myOverlay"
                    />
                  </div>
                </div>
              </div>
              <div className="col-md-5 head-manu">
                <div className="top-manu">
                  <div className="megamenu">
                    <div className="container_wb_megamenu">
                      <div id="stamenu">
                        <nav id="menu" className="navbar">
                          <div className="navbar-expand-md">
                            <button
                              type="button"
                              className="btn-navbar navbar-toggler"
                              onclick="openNav()"
                              data-bs-toggle="collapse"
                              data-bs-target=".navbar-ex1-collapse"
                            >
                              <i className="fa fa-bars" />
                            </button>
                          </div>
                          <div id="wr-menu-icon ">
                            <div
                              className="wrmenu collapsed"
                              data-bs-toggle="collapse"
                              data-bs-target="#under-menu"
                              aria-expanded="false"
                              aria-controls="collapseExample"
                            ></div>
                          </div>
                          <div id="mySidenav" className="sidenav menu-vertical">
                            <div id="under-menu" className="">
                              <div className="close-nav">
                                <span className="categories">Categories</span>
                                <a
                                  href="javascript:void(0)"
                                  className="closebtn float-end"
                                  onclick="closeNav()"
                                >
                                  <i className="fa fa-close" />
                                </a>
                              </div>
                              <div className="navbar-collapse navbar-ex1-collapse">
                                <ul className="nav navbar-nav">
                                  <li className="nav-item">
                                    <Link
                                      href={"/solitaire"}
                                      className="nav-item"
                                    >
                                      Solitaire
                                    </Link>
                                  </li>
                                  <li className="nav-item">
                                    <a
                                      href="https://opencart.workdo.io/diamond/index.php?route=product/category&language=en-gb&path=60"
                                      className="nav-link"
                                    >
                                      {/*<img src="https://opencart.workdo.io/diamond/image/cache/catalog/menu-icon/meat-fish-14x14.png" alt="Amethyst" title="Amethyst"> */}{" "}
                                      Amethyst
                                    </a>
                                  </li>
                                  <li className="nav-item">
                                    <a
                                      href="https://opencart.workdo.io/diamond/index.php?route=product/category&language=en-gb&path=67"
                                      className="nav-link"
                                    >
                                      {/*<img src="" alt="Blue Sapphire" title="Blue Sapphire"> */}{" "}
                                      Blue Sapphire
                                    </a>
                                  </li>
                                  <li className="nav-item">
                                    <a
                                      href="https://opencart.workdo.io/diamond/index.php?route=product/category&language=en-gb&path=17"
                                      className="nav-link"
                                    >
                                      {/*<img src="https://opencart.workdo.io/diamond/image/cache/catalog/menu-icon/coffee--tea-14x14.png" alt="Black Diamond" title="Black Diamond"> */}{" "}
                                      Black Diamond
                                    </a>
                                  </li>
                                  <li className="nav-item">
                                    <a
                                      href="https://opencart.workdo.io/diamond/index.php?route=product/category&language=en-gb&path=68"
                                      className="nav-link"
                                    >
                                      {/*<img src="https://opencart.workdo.io/diamond/image/cache/catalog/menu-icon/chocolate-crackers-14x14.png" alt="Ametrine" title="Ametrine"> */}{" "}
                                      Ametrine
                                    </a>
                                  </li>
                                </ul>
                              </div>
                            </div>
                          </div>
                        </nav>
                        <div
                          className="w3-overlay w3-animate-opacity"
                          onclick="closeNav()"
                          style={{ cursor: "pointer" }}
                          id="myOverlay"
                        />
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div className="col-md-2 col-sm-2 text-left header-logo">
                <div id="logo">
                  <Link href="/">
                    <h4 style={{ color: "var(--main-color)" }}>HKSURANA</h4>
                  </Link>
                </div>
              </div>
              <div className="col-md-5 col-sm-5 megamenu_border">
                <div className="main-header">
                  <div className="h-icon">
                    <div id="top-links">
                      <div className="h-search">
                        <div className="top-search">
                          <ul>
                            <li
                              id="search"
                              className="desktop-search d-inline-block"
                            >
                              <div className="d-search">
                                <button
                                  id="search_toggle"
                                  className="search-toggle"
                                  data-toggle="collapse"
                                  onclick="openSearch()"
                                >
                                  <span>Search</span>
                                  <img
                                    src="image/catalog/search.png"
                                    alt="search"
                                  />
                                </button>
                              </div>
                              <div id="search" className="wbSearch">
                                <div id="search_block_top">
                                  <select id="workdo-search-category">
                                    <option value={0}>Categories</option>
                                    <option value={60}>Amethyst</option>
                                    <option value={20}>bead</option>
                                    <option value={27}>
                                      &nbsp;&nbsp;&nbsp;&nbsp;bracelet
                                    </option>
                                    <option value={61}>
                                      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alexandrite
                                    </option>
                                    <option value={63}>
                                      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fashion
                                    </option>
                                    <option value={67}>Blue Sapphire</option>
                                    <option value={25}>Burma Ruby</option>
                                    <option value={29}>
                                      &nbsp;&nbsp;&nbsp;&nbsp;Citrine
                                    </option>
                                    <option value={65}>
                                      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Colombian
                                      Emerald
                                    </option>
                                    <option value={66}>
                                      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Diamond
                                    </option>
                                    <option value={64}>
                                      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Garnet
                                    </option>
                                    <option value={28}>
                                      &nbsp;&nbsp;&nbsp;&nbsp;Morganite
                                    </option>
                                    <option value={17}>Black Diamond</option>
                                    <option value={68}>Ametrine</option>
                                  </select>
                                  <div className="input-group">
                                    <input
                                      type="text"
                                      name="search"
                                      defaultValue=""
                                      placeholder="Search Product..."
                                      className="search_query form-control input-lg workdo-search"
                                    />
                                    <div className="input-group-btn">
                                      <button
                                        type="button"
                                        className="btn btn-primary btn-lg"
                                      >
                                        <img
                                          src="image/catalog/search.png"
                                          alt="search"
                                        />
                                      </button>
                                      <a
                                        href="javascript:void(0)"
                                        className="closebtn close-nav"
                                        onclick="closeSearch()"
                                      >
                                        <i className="fa fa-close" />
                                      </a>
                                    </div>
                                    {/* workdo Search Start  */}
                                    <div className="workdo-search text-left">
                                      <div
                                        className="workdo-search-loader"
                                        style={{ display: "none" }}
                                      >
                                        <div className="loaders" />
                                      </div>
                                      {/* Add Loader */}
                                      <div className="workdo-search-result">
                                        {/* search results */}
                                      </div>
                                    </div>
                                    {/* workdo Search End  */}
                                  </div>
                                </div>
                              </div>
                            </li>
                          </ul>
                        </div>
                      </div>
                      <ul className="list-inline d-flex user-bg">
                        <li className="userapp" />
                        <li className="huser">
                          <div className="dropdown">
                            <a
                              href=""
                              className="dropdown-toggle huser-drop"
                              data-bs-toggle="dropdown"
                            >
                              <div className="xuser">
                                <img src="image/catalog/huser.svg" alt="user" />
                                <span>My Profile</span>
                                <i className="fa fa-angle-down enaleng" />
                              </div>
                              <div className="xuser-desc d-none">
                                <span>
                                  <span className="d-none d-lg-inline">
                                    My Account
                                  </span>
                                </span>
                              </div>
                            </a>
                            <ul className="dropdown-menu dropdown-menu-right haccount  hlogout">
                              <h5 className="text-left">Your Account</h5>
                              <h6 className="text-left">
                                Access account and manage orders
                              </h6>
                              <li className="acd">
                                <a
                                  href="https://opencart.workdo.io/diamond/index.php?route=account/register&language=en-gb"
                                  className="dropdown-item"
                                >
                                  <i className="fa fa-user-plus" />
                                  Register
                                </a>
                              </li>
                              <li className="acd">
                                <a
                                  href="https://opencart.workdo.io/diamond/index.php?route=account/login&language=en-gb"
                                  className="dropdown-item"
                                >
                                  <i className="fa fa-lock" />
                                  Login
                                </a>
                              </li>
                              <li className="wishcom">
                                <a href="">
                                  <i className="fa fa-compress" />
                                  compare
                                </a>
                              </li>
                              <li className="wishcom">
                                <a href="https://opencart.workdo.io/diamond/index.php?route=account/wishlist&language=en-gb">
                                  <i className="fa fa-heart" />
                                  wishlist
                                </a>
                              </li>
                              <li className="xsla d-inline-block">
                                {" "}
                                <form
                                  action="https://opencart.workdo.io/diamond/index.php?route=common/currency|save&language=en-gb"
                                  method="post"
                                  encType="multipart/form-data"
                                  id="form-currency"
                                >
                                  <div className="dropdown">
                                    <button
                                      className="btn-link dropdown-toggle test"
                                      data-bs-toggle="dropdown"
                                    >
                                      <strong>$</strong>
                                      <span className="d-md-inline">
                                        Currency
                                      </span>{" "}
                                      <i className="fa fa-angle-down" />
                                    </button>
                                    <ul className="dropdown-menu">
                                      <li>
                                        <a href="EUR" className="dropdown-item">
                                          € Euro
                                        </a>
                                      </li>
                                      <li>
                                        <a href="GBP" className="dropdown-item">
                                          £ Pound Sterling
                                        </a>
                                      </li>
                                      <li>
                                        <a href="USD" className="dropdown-item">
                                          $ US Dollar
                                        </a>
                                      </li>
                                    </ul>
                                  </div>
                                  <input
                                    type="hidden"
                                    name="code"
                                    defaultValue=""
                                  />{" "}
                                  <input
                                    type="hidden"
                                    name="redirect"
                                    defaultValue="https://opencart.workdo.io/diamond/index.php?route=common/home"
                                  />
                                </form>
                              </li>
                            </ul>
                            <ul></ul>
                          </div>
                        </li>
                      </ul>
                      <div className="d-inline-block">
                        <span id="header-cart">
                          <div id="cart" className="dropdown btn-block">
                            <button
                              type="button"
                              data-bs-toggle="dropdown"
                              className="btn btn-inverse dropdown-toggle"
                              onClick={toggleCartDropdown}
                              aria-expanded={cartDropdownOpen}
                            >
                              {/* ... [Your existing cart icon and text] ...  */}
                              <div className="xuser">
                                <img src="image/catalog/hcart.svg" alt="cart" />
                              </div>
                              <span className="cartl">
                                <span className="cartt">
                                  {cartItems.reduce(
                                    (acc, item) => acc + item.quantity,
                                    0
                                  )}{" "}
                                </span>
                                <span className="cartna">cart: items</span>
                                <strong>Items</strong>
                              </span>
                            </button>

                            {/* Cart Dropdown (Custom Styled) */}
                            <ul
                              className={`dropdown-menu dropdown-menu-right${
                                cartDropdownOpen ? " show" : ""
                              }`}
                              aria-labelledby="cart"
                              style={{
                                padding: "1rem",
                                maxWidth: "300px",
                                backgroundColor: "rgb(33, 37, 41)", // Dark background color
                                boxShadow: "0 2px 4px rgba(0, 0, 0, 0.1)",
                                border: "1px solid #dee2e6",
                              }}
                            >
                              {cartItems.length === 0 ? (
                                <li className="text-center">
                                  Your shopping cart is empty!
                                </li>
                              ) : (
                                <>
                                  <div
                                    style={{
                                      maxHeight: "250px",
                                      overflowY: "auto",
                                    }}
                                  >
                                    {cartItems.map((item) => (
                                      <div
                                        key={item.SolitaireID}
                                        className="d-flex align-items-center mb-3"
                                      >
                                        <Link href={`/${item.SolitaireID}`}>
                                          <img
                                            src={item.Image1}
                                            alt={
                                              item.ShapeName +
                                              "-" +
                                              item.SolitaireID
                                            }
                                            style={{
                                              width: "50px",
                                              height: "50px",
                                              objectFit: "cover",
                                              marginRight: "10px",
                                            }}
                                          />
                                        </Link>
                                        <div>
                                          <Link href={`/${item.SolitaireID}`}>
                                            <h6
                                              className="mb-0"
                                              style={{
                                                color: "#20C997",
                                                fontFamily: "outfit",
                                              }}
                                            >
                                              {item.ShapeName +
                                                "-" +
                                                item.SolitaireID}
                                            </h6>
                                          </Link>
                                          <span className="text-muted small">
                                            Qty: {item.quantity} x ${item.Price}
                                          </span>
                                        </div>
                                        <button
                                          type="button"
                                          className="btn btn-sm btn-link text-danger ml-auto"
                                          onClick={() =>
                                            handleRemoveFromCart(
                                              item.SolitaireID
                                            )
                                          }
                                        >
                                          <i className="fa fa-times"></i>
                                        </button>
                                      </div>
                                    ))}
                                  </div>

                                  {/* Cart Totals */}
                                  <div className="text-right">
                                    <p className="mb-1">
                                      Subtotal:{" "}
                                      <span className="font-weight-bold">
                                        ${subTotal.toFixed(2)}
                                      </span>
                                    </p>
                                    <p className="mb-1">
                                      Total:{" "}
                                      <span className="font-weight-bold">
                                        ${total.toFixed(2)}
                                      </span>
                                    </p>
                                    <Link
                                      href="/cart"
                                      className="btn btn-primary btn-block"
                                    >
                                      View Cart
                                    </Link>
                                  </div>
                                </>
                              )}
                            </ul>
                          </div>
                        </span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </header>
      <main>
        <div className="pb-50">
          <div id="checkout-cart" className="container">
            <div className="d-flex justify-content-between align-items-center back-page">
              <div className="">
                <div className="back-to-home">
                  <Link href="/">
                    <i className="fas fa-arrow-left"></i>{" "}
                    <span> Back to category</span>
                  </Link>
                </div>
              </div>
              <div className="">
                <ul className="breadcrumb ">
                  <li className="breadcrumb-item">
                    <Link href="/">
                      <i className="fas fa-home"></i>
                    </Link>
                  </li>
                  <li className="breadcrumb-item">
                    <Link href="/cart">Shopping Cart</Link>
                  </li>
                </ul>
              </div>
            </div>

            <div className="row">
              <div id="content" className="col">
                <h2 className="heading">
                  {" "}
                  <span>
                    Shopping Cart (
                    {cartItems.reduce((acc, item) => acc + item.quantity, 0)}{" "}
                    Items)
                  </span>
                </h2>

                {cartItems.length === 0 ? (
                  <div id="shopping-cart">
                    <p>Your shopping cart is empty!</p>
                  </div>
                ) : (
                  <div id="shopping-cart">
                    <div className="table-responsive">
                      <table className="table table-bordered">
                        <thead>
                          <tr>
                            <td className="text-center">Image</td>
                            <td className="text-start">Product Name</td>
                            <td className="text-start">UniqueCode</td>
                            <td className="text-start">Quantity</td>
                            <td className="text-end">Unit Price</td>
                            <td className="text-end">Total</td>
                          </tr>
                        </thead>
                        <tbody>
                          {cartItems.map((item) => (
                            <tr key={item.SolitaireID}>
                              <td
                                className=""
                                style={{
                                  alignContent: "center",
                                  justifyContent: "center",
                                  alignItems: "center",
                                }}
                              >
                                <Link
                                  href={`/${item.SolitaireID}`}
                                  style={{
                                    alignContent: "center",
                                    justifyContent: "center",
                                    alignItems: "center",
                                  }}
                                >
                                  <img
                                    src={item.Image1}
                                    alt={item.ProductName}
                                    title={item.ProductName}
                                    className="img-thumbnail"
                                    style={{ height: "100px", width: "auto" }}
                                  />
                                </Link>
                              </td>
                              <td className="text-start text-wrap">
                                <Link href={`/${item.SolitaireID}`}>
                                  {item.ShapeName + "-" + item.SolitaireID}
                                </Link>
                                <br />
                                <small> - Size: {item.SizeOptions} </small>
                                {/* ... [Add other details if needed] ... */}
                              </td>
                              <td className="text-start">{item.UniqueCode}</td>
                              <td className="text-start">
                                <div className="input-group cartpsp">
                                  <input
                                    type="number"
                                    name="quantity"
                                    value={item.quantity}
                                    size="1"
                                    className="form-control"
                                    min="1"
                                    onChange={(e) =>
                                      handleQuantityChange(
                                        item.SolitaireID,
                                        parseInt(e.target.value) || 1
                                      )
                                    }
                                  />{" "}
                                  <button
                                    type="button"
                                    data-bs-toggle="tooltip"
                                    title="Update"
                                    className="btn btn-danger"
                                    onClick={() =>
                                      handleQuantityChange(
                                        item.SolitaireID,
                                        item.quantity
                                      )
                                    }
                                  >
                                    <i className="fa-solid fa-rotate"></i>
                                  </button>
                                  <button
                                    type="button"
                                    data-bs-toggle="tooltip"
                                    title="Remove"
                                    className="btn btn-danger"
                                    onClick={() =>
                                      handleRemoveFromCart(item.SolitaireID)
                                    }
                                  >
                                    <i className="fa-solid fa-circle-xmark"></i>
                                  </button>
                                </div>
                              </td>
                              <td className="text-end">${item.Price}</td>
                              <td className="text-end">
                                ${item.Price * item.quantity}
                              </td>
                            </tr>
                          ))}
                        </tbody>
                        <tfoot id="checkout-total">
                          <tr>
                            <td colSpan="5" className="text-end">
                              <strong>Sub-Total</strong>
                            </td>
                            <td className="text-end">${subTotal.toFixed(2)}</td>
                          </tr>
                          <tr>
                            <td colSpan="5" className="text-end">
                              <strong>Total</strong>
                            </td>
                            <td className="text-end">${total.toFixed(2)}</td>
                          </tr>
                        </tfoot>
                      </table>
                    </div>
                  </div>
                )}

                <h2 className="heading">
                  {" "}
                  <span>What would you like to do next?</span>
                </h2>
                <p>
                  Choose if you have a discount code or reward points you want
                  to use or would like to estimate your delivery cost.
                </p>
                <div id="accordion" className="accordion">
                  {/* Estimate Shipping & Taxes */}
                  <div className="accordion-item">
                    <h2 className="accordion-header">
                      <button
                        type="button"
                        className="accordion-button collapsed"
                        data-bs-toggle="collapse"
                        data-bs-target="#collapse-shipping"
                      >
                        Estimate Shipping & Taxes
                      </button>
                    </h2>
                    <div
                      id="collapse-shipping"
                      className="accordion-collapse collapse"
                      data-bs-parent="#accordion"
                    >
                      <div className="accordion-body">
                        <form id="form-quote" onSubmit={handleShippingSubmit}>
                          <p>
                            Enter your destination to get a shipping estimate.
                          </p>
                          <div className="row mb-3 required">
                            <label
                              htmlFor="input-country"
                              className="col-md-4 col-form-label"
                            >
                              Country
                            </label>
                            <div className="col-md-8">
                              <select
                                name="country_id"
                                id="input-country"
                                className="form-select"
                                value={country}
                                onChange={(e) => setCountry(e.target.value)}
                              >
                                <option value="">
                                  {" "}
                                  --- Please Select ---{" "}
                                </option>
                                {/* ... [Your country options] ... */}
                              </select>
                              <div
                                id="error-country"
                                className="invalid-feedback"
                              ></div>
                            </div>
                          </div>
                          <div className="row mb-3 required">
                            <label
                              htmlFor="input-zone"
                              className="col-md-4 col-form-label"
                            >
                              Region / State
                            </label>
                            <div className="col-md-8">
                              <select
                                name="zone_id"
                                id="input-zone"
                                className="form-select"
                                value={region}
                                onChange={(e) => setRegion(e.target.value)}
                              >
                                <option value="">
                                  {" "}
                                  --- Please Select ---{" "}
                                </option>
                                {/* ... [Your region/state options] ... */}
                              </select>
                              <div
                                id="error-zone"
                                className="invalid-feedback"
                              ></div>
                            </div>
                          </div>
                          <div className="row mb-3 required">
                            <label
                              htmlFor="input-postcode"
                              className="col-md-4 col-form-label"
                            >
                              Post Code
                            </label>
                            <div className="col-md-8">
                              <input
                                type="text"
                                name="postcode"
                                value={postcode}
                                placeholder="Post Code"
                                id="input-postcode"
                                className="form-control"
                                onChange={(e) => setPostcode(e.target.value)}
                              />
                              <div
                                id="error-postcode"
                                className="invalid-feedback"
                              ></div>
                            </div>
                          </div>
                          <div className="text-end">
                            <button
                              type="submit"
                              id="button-quote"
                              className="btn btn-primary"
                            >
                              Get Quotes
                            </button>
                          </div>
                        </form>
                      </div>
                    </div>
                  </div>

                  {/* Use Coupon Code */}
                  <div className="accordion-item">
                    <h2 className="accordion-header">
                      <button
                        type="button"
                        className="accordion-button collapsed"
                        data-bs-toggle="collapse"
                        data-bs-target="#collapse-coupon"
                      >
                        Use Coupon Code
                      </button>
                    </h2>
                    <div
                      id="collapse-coupon"
                      className="accordion-collapse collapse"
                      data-bs-parent="#accordion"
                    >
                      <div className="accordion-body">
                        <form id="form-coupon" onSubmit={handleCouponSubmit}>
                          <div className="row mb-3">
                            <label
                              htmlFor="input-coupon"
                              className="col-md-4 col-form-label"
                            >
                              Enter your coupon here
                            </label>
                            <div className="col-md-8">
                              <input
                                type="text"
                                name="coupon"
                                value={coupon}
                                placeholder="Enter your coupon here"
                                id="input-coupon"
                                className="form-control"
                                onChange={(e) => setCoupon(e.target.value)}
                              />
                            </div>
                          </div>
                          <div className="text-end">
                            <button type="submit" className="btn btn-primary">
                              Apply Coupon
                            </button>
                          </div>
                        </form>
                      </div>
                    </div>
                  </div>

                  {/* Use Gift Certificate */}
                  <div className="accordion-item">
                    <h2 className="accordion-header">
                      <button
                        type="button"
                        className="accordion-button collapsed"
                        data-bs-toggle="collapse"
                        data-bs-target="#collapse-voucher"
                      >
                        Use Gift Certificate
                      </button>
                    </h2>
                    <div
                      id="collapse-voucher"
                      className="accordion-collapse collapse"
                      data-bs-parent="#accordion"
                    >
                      <div className="accordion-body">
                        <form
                          id="form-voucher"
                          onSubmit={handleGiftCertificateSubmit}
                        >
                          <div className="row mb-3">
                            <label
                              htmlFor="input-voucher"
                              className="col-md-4 col-form-label"
                            >
                              Enter your gift certificate code here
                            </label>
                            <div className="col-md-8">
                              <input
                                type="text"
                                name="voucher"
                                value={giftCertificate}
                                placeholder="Enter your gift certificate code here"
                                id="input-voucher"
                                className="form-control"
                                onChange={(e) =>
                                  setGiftCertificate(e.target.value)
                                }
                              />
                            </div>
                          </div>
                          <div className="text-end">
                            <button type="submit" className="btn btn-primary">
                              Apply Gift Certificate
                            </button>
                          </div>
                        </form>
                      </div>
                    </div>
                  </div>
                </div>
                <br />
                <div className="d-inline-block pt-2 pd-2 w-100">
                  <div className="float-start">
                    <Link href="/" className="btn btn-primary">
                      Continue Shopping
                    </Link>
                  </div>
                  <div className="float-end">
                    <Link href="/checkout" className="btn btn-primary">
                      Checkout
                    </Link>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>
    </div>
  );
};

export default CartPage;

// File: \srk assignment\Shivam\my-diamond-app\pages\contact-us.js
import React, { useState, useEffect } from "react";
import Head from "next/head";
import Link from "next/link";
import MainSlider from "@/components/MainSlider";
import Breadcrumb from "../components/Breadcrumb";
import BlogSlider from "@/components/BlogSlider";
import Footer from "../components/Footer";
import Header from "../components/Header";
import Category from "../components/Category";
import axios from "axios";

const Contact = () => {
  const [isLoadingSlider, setIsLoadingSlider] = useState(true);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [errorSlider, setErrorSlider] = useState(null);
  const [page, setPage] = useState({});
  useEffect(() => {
    fetchData();
  }, []);
  const fetchData = async () => {
    setIsLoading(true);
    setError(null);

    try {
      const response = await axios.get(
        "/api/pages?slug=privacy-policy"
      );
      console.log("response", response);
      if (response.status === 200) {
        if(response.data.data.length>0){
          setPage(response.data.data[0]);
        }
       
      } else {
        console.error("Error fetching products:", response.data.error);
        setError("Error fetching products");
      }
    } catch (error) {
      console.error("Error fetching products:", error);
      setError("An error occurred");
    } finally {
      setIsLoading(false);
    }
  };
  return (
    <div>
      <>
        <Header />
        <div className="contact-top-bg pb-30">
          <div className="container">
            <Breadcrumb name={"Contact Us"} />
          </div>
        </div>
        <div id="information-contact" className="container">
      <div className="row">
        <div id="content" className="col">
          <div className="row">
            <div className="col-md-6 col-xs-12 wbcntleft">
              <div className="card">
                <div className="card-body">
                  <div className="row">
                    <div className="col-md-6 col-xs-12">
                      <div className="contact-store-information">
                        <h4>Telephone</h4>
                        <div className="store-inf">610-403-403</div>
                      </div>
                      <div className="contact-store-information">
                        <h4>Email</h4>
                        <div className="store-inf">shop@company.com</div>
                      </div>
                    </div>
                    <div className="col-md-6 col-xs-12 store-add">
                      <div className="contact-store-information">
                        <h4>Address</h4>
                        <div className="store-inf">
                          diamond
                          <address>
                            9070 Green Lake Drive Chevy Chase, MD 20815, USA
                          </address>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div className="col-sm-3">
                    <strong></strong>
                    <br />
                    <br />
                    <br />
                  </div>
                  <div className="col-sm-3"></div>
                </div>
              </div>
            </div>
            <div className="contact col-md-6 col-xs-12">
              <h3 className="other-title">Contact Form</h3>
              <form
                id="form-contact"
                action="https://opencart.workdo.io/diamond/index.php?route=information/contact|send&amp;language=en-gb"
                method="post"
                data-oc-toggle="ajax"
              >
                <fieldset>
                  <div className="mb-3 required">
                    <label htmlFor="input-name" className="col-form-label">
                      Your Name
                    </label>
                    <input
                      type="text"
                      name="name"
                      id="input-name"
                      className="form-control"
                    />
                    <div id="error-name" className="invalid-feedback"></div>
                  </div>
                  <div className="mb-3 required">
                    <label htmlFor="input-email" className="col-form-label">
                      E-Mail Address
                    </label>
                    <input
                      type="text"
                      name="email"
                      id="input-email"
                      className="form-control"
                    />
                    <div id="error-email" className="invalid-feedback"></div>
                  </div>
                  <div className="mb-3 required">
                    <label htmlFor="input-enquiry" className="col-form-label">
                      Enquiry
                    </label>
                    <textarea
                      name="enquiry"
                      rows="10"
                      id="input-enquiry"
                      className="form-control"
                    ></textarea>
                    <div id="error-enquiry" className="invalid-feedback"></div>
                  </div>
                </fieldset>
                <div className="d-inline-block pt-2 pd-2 w-100">
                  <div className="text-end">
                    <button style={{ minWidth: "100%" }}   type="submit" className="btn btn-primary">
                      Submit
                    </button>
                  </div>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
        <Footer/>
      </>
    </div>
  );
};

export default Contact;

// File: \srk assignment\Shivam\my-diamond-app\pages\faq.js
import React, { useState, useEffect } from "react";
import Head from "next/head";
import Link from "next/link";
import MainSlider from "@/components/MainSlider";
import Breadcrumb from "../components/Breadcrumb";
import BlogSlider from "@/components/BlogSlider";
import Footer from "../components/Footer";
import Header from "../components/Header";
import Category from "../components/Category";
import axios from "axios";
import {
  Accordion,
  AccordionItem,
  AccordionItemHeading,
  AccordionItemButton,
  AccordionItemPanel,
} from "react-accessible-accordion";
import "react-accessible-accordion/dist/fancy-example.css";

const Faq = () => {
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [faqs, setFaqs] = useState([]);

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    setIsLoading(true);
    setError(null);

    try {
      const response = await axios.get("/api/faq");
      console.log("response", response);
      if (response.status === 200) {
        if (response.data.data.length > 0) {
          setFaqs(response.data.data);
        }
      } else {
        console.error("Error fetching products:", response.data.error);
        setError("Error fetching products");
      }
    } catch (error) {
      console.error("Error fetching products:", error);
      setError("An error occurred");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div>
      <>
        <Header />
        <div className="contact-top-bg pb-30">
          <div className="container">
            <Breadcrumb name={"Faq"} />
          </div>
        </div>
        <div className="information">
          <div id="information-information" className="container">
            <div className="container">
              <div className="row">
                <div id="content" className="col">
                  <h1>FAQ</h1>
                  <Accordion preExpanded={faqs.map((_, index) => index.toString())}>
                    {faqs.map((item, sectionIndex) => (
                      <AccordionItem key={sectionIndex} uuid={sectionIndex.toString()}>
                        <AccordionItemHeading>
                          <AccordionItemButton>
                            {item.title}
                          </AccordionItemButton>
                        </AccordionItemHeading>
                        <AccordionItemPanel>
                          <p>{item.title}</p>
                        </AccordionItemPanel>
                      </AccordionItem>
                    ))}
                  </Accordion>
                </div>
              </div>
            </div>
          </div>
        </div>
        <Footer />
      </>
    </div>
  );
};

export default Faq;

// File: \srk assignment\Shivam\my-diamond-app\pages\index.js
import React, { useState, useEffect } from "react";
import Head from "next/head";
import Link from "next/link";
import MainSlider from "@/components/MainSlider";
import WbSpecialSlider from "@/components/WbSpecialSlider";
import WdSelectedSlider from "@/components/WdSelectedSlider";
import WdSelectedSlider2 from "@/components/WdSelectedSlider2";
import OnsaleSlider from "@/components/OnsaleSlider";
import WdCategorySlider from "@/components/WdCategorySlider";
import TestimonialSlider from "@/components/TestimonialSlider";
import BlogSlider from "@/components/BlogSlider";
import Footer from "../components/Footer";
import Header from "../components/Header";
import Category from "../components/Category";
import axios from "axios";
import {
  getCartItemsFromLocalStorage,
  addToCart,
  removeFromCart,
  updateCartItemQuantity,
} from "../utils/cartfns";
import {
  Drawer,
  DrawerBody,
  DrawerFooter,
  DrawerHeader,
  DrawerOverlay,
  DrawerContent,
  DrawerCloseButton,
  Button,
  useDisclosure,
} from "@chakra-ui/react";

const Index = () => {
  const [cartItems, setCartItems] = useState([]);
  const [cartDropdownOpen, setCartDropdownOpen] = useState(false); // For dropdown
  // Testimonials
  const {
    isOpen: isCartOpen,
    onOpen: onCartOpen,
    onClose: onCartClose,
  } = useDisclosure();
  const cartBtnRef = React.useRef();
  const [testimonials, setTestimonials] = useState([]);
  const [isLoadingTestimonials, setIsLoadingTestimonials] = useState(true);
  const [errorTestimonials, setErrorTestimonials] = useState(null);

  // Blogs
  const [blogs, setBlogs] = useState([]);
  const [isLoadingBlogs, setIsLoadingBlogs] = useState(true);
  const [errorBlogs, setErrorBlogs] = useState(null);
  const [isOpen, setIsOpen] = useState(false);

  const toggleDrawer = () => {
    setIsOpen(!isOpen);
  };

  useEffect(() => {
    const updateCart = () => {
      setCartItems(getCartItemsFromLocalStorage());
    };

    window.addEventListener("storage", updateCart);
    return () => window.removeEventListener("storage", updateCart);
  }, []);

  useEffect(() => {
    setCartItems(getCartItemsFromLocalStorage());
  }, []);

  // Function to remove item from cart and update state
  const handleRemoveFromCart = (solitaireId) => {
    removeFromCart(solitaireId);
    setCartItems(getCartItemsFromLocalStorage());
  };
  useEffect(() => {
    fetchTestimonials();
  }, []);

  const fetchTestimonials = async () => {
    setIsLoadingTestimonials(true);
    console.log("loading testimonials true");
    setErrorTestimonials(null);

    try {
      const response = await axios.get("/api/testimonials");
      console.log("testimoinals response", response);
      if (response.status === 200) {
        setTestimonials(response.data.testimonials);
      } else {
        console.error("Error fetching testimonials:", response.data.error);
        setErrorTestimonials("Error fetching testimonials.");
      }
    } catch (error) {
      console.error("Error fetching testimonials:", error);
      setErrorTestimonials("An error occurred.");
    } finally {
      setIsLoadingTestimonials(false);
      console.log("testimonials finnaly clause reached ");
    }
  };

  useEffect(() => {
    fetchBlogs();
  }, []);

  const fetchBlogs = async () => {
    setIsLoadingBlogs(true);
    setErrorBlogs(null);

    try {
      const response = await axios.get("/api/blogs");
      if (response.status === 200) {
        setBlogs(response.data.blogs);
      } else {
        console.error("Error fetching blogs:", response.data.error);
        setErrorBlogs("Error fetching blogs.");
      }
    } catch (error) {
      console.error("Error fetching blogs:", error);
      setErrorBlogs("An error occurred.");
    } finally {
      setIsLoadingBlogs(false);
    }
  };

  // Toggle the cart dropdown
  const toggleCartDropdown = () => {
    setCartDropdownOpen(!cartDropdownOpen);
  };
  // Calculate subtotal and total
  const subTotal = cartItems.reduce(
    (total, item) => total + item.Price * item.quantity,
    0
  );
  const total = subTotal; // For now, total is the same as subtotal
  return (
    <div>
      <>
        <div className="main-home">
          <div>
            <svg style={{ display: "none" }}>
              <symbol viewBox="0 0 8 7" id="youtube">
                <path
                  fillRule="evenodd"
                  clipRule="evenodd"
                  d="M1.50015 1.20163C1.99665 1.11474 2.76171 1.03447 3.89246 1.03447C5.02321 1.03447 5.78827 1.11474 6.28476 1.20163C6.62039 1.26037 6.85877 1.59168 6.85877 2.06569V5.0089C6.85877 5.48291 6.62039 5.81422 6.28476 5.87296C5.78827 5.95985 5.02321 6.04012 3.89246 6.04012C2.76171 6.04012 1.99665 5.95985 1.50015 5.87296C1.16453 5.81422 0.926148 5.48291 0.926148 5.0089V2.06569C0.926148 1.59168 1.16453 1.26037 1.50015 1.20163ZM3.89246 0.200195C2.73147 0.200195 1.92747 0.282534 1.38616 0.377273C0.61158 0.512839 0.18457 1.2757 0.18457 2.06569V5.0089C0.18457 5.79889 0.611581 6.56175 1.38616 6.69732C1.92747 6.79206 2.73147 6.87439 3.89246 6.87439C5.05345 6.87439 5.85745 6.79206 6.39876 6.69732C7.17334 6.56175 7.60035 5.79889 7.60035 5.0089V2.06569C7.60035 1.2757 7.17334 0.512839 6.39876 0.377273C5.85745 0.282534 5.05345 0.200195 3.89246 0.200195ZM3.34671 2.33524C3.46727 2.26265 3.61357 2.27061 3.72735 2.35594L4.83971 3.19022C4.94287 3.26758 5.00482 3.39782 5.00482 3.5373C5.00482 3.67677 4.94287 3.80701 4.83971 3.88437L3.72735 4.71865C3.61357 4.80398 3.46727 4.81194 3.34671 4.73935C3.22615 4.66676 3.15088 4.52541 3.15088 4.37157V2.70302C3.15088 2.54918 3.22615 2.40783 3.34671 2.33524Z"
                />
              </symbol>
              <symbol viewBox="0 0 8 8" id="massage">
                <path
                  fillRule="evenodd"
                  clipRule="evenodd"
                  d="M3.59564 0.985352C2.89847 0.985352 2.03687 1.19755 1.34001 1.68137C0.628737 2.1752 0.09375 2.95132 0.09375 4.03641C0.09375 4.69785 0.333058 5.19927 0.574931 5.53513C0.679323 5.68009 0.784268 5.79444 0.871055 5.8785L0.518039 7.18567C0.479016 7.33016 0.53443 7.48246 0.659933 7.57566C0.785437 7.66886 0.958064 7.68589 1.10197 7.61928L2.58869 6.93115C3.43084 7.19234 4.58464 7.10329 5.54435 6.6951C6.5965 6.24759 7.50953 5.372 7.50953 4.03641C7.50953 2.8556 6.94689 2.06818 6.14832 1.59396C5.37505 1.13476 4.41156 0.985352 3.59564 0.985352ZM1.7294 5.84513C1.76936 5.69716 1.71023 5.54147 1.57928 5.44919L1.57783 5.44812C1.57527 5.44623 1.57001 5.44227 1.56243 5.43625C1.54722 5.42419 1.52285 5.40398 1.49229 5.37569C1.43096 5.31892 1.34611 5.23087 1.26052 5.11203C1.09041 4.87581 0.917725 4.51913 0.917725 4.03641C0.917725 3.21459 1.30971 2.65587 1.8344 2.29159C2.3735 1.9173 3.05686 1.74812 3.59564 1.74812C4.32448 1.74812 5.11194 1.88474 5.70343 2.23598C6.26962 2.57221 6.68555 3.11962 6.68555 4.03641C6.68555 4.98912 6.05362 5.63906 5.20034 6.00199C4.3271 6.3734 3.3179 6.3989 2.72797 6.16485C2.61658 6.12066 2.48982 6.12411 2.38143 6.17428L1.53466 6.56621L1.7294 5.84513ZM3.64702 3.35722C3.48309 3.23582 3.24677 3.24794 3.09833 3.38535L2.27436 4.14812C2.11347 4.29706 2.11347 4.53854 2.27436 4.68748C2.43525 4.83642 2.6961 4.83642 2.85699 4.68748L3.42023 4.16608L4.16225 4.71561C4.32618 4.83701 4.5625 4.82489 4.71094 4.68748L5.53491 3.92471C5.69581 3.77577 5.69581 3.53429 5.53491 3.38535C5.37402 3.23642 5.11317 3.23642 4.95228 3.38535L4.38904 3.90675L3.64702 3.35722Z"
                />
              </symbol>
              <symbol viewBox="0 0 9 9" id="instagram">
                <path
                  fillRule="evenodd"
                  clipRule="evenodd"
                  d="M0.746094 3.26117C0.746094 1.90962 1.74214 0.813965 2.97083 0.813965H5.93714C7.16582 0.813965 8.16187 1.90962 8.16187 3.26117V6.52411C8.16187 7.87567 7.16582 8.97132 5.93714 8.97132H2.97083C1.74214 8.97132 0.746094 7.87567 0.746094 6.52411V3.26117ZM2.97083 1.6297C2.1517 1.6297 1.48767 2.36013 1.48767 3.26117V6.52411C1.48767 7.42515 2.1517 8.15558 2.97083 8.15558H5.93714C6.75626 8.15558 7.42029 7.42515 7.42029 6.52411V3.26117C7.42029 2.36013 6.75626 1.6297 5.93714 1.6297H2.97083ZM3.7124 4.89264C3.7124 5.34316 4.04442 5.70838 4.45398 5.70838C4.86354 5.70838 5.19556 5.34316 5.19556 4.89264C5.19556 4.44212 4.86354 4.07691 4.45398 4.07691C4.04442 4.07691 3.7124 4.44212 3.7124 4.89264ZM4.45398 3.26117C3.63486 3.26117 2.97083 3.99161 2.97083 4.89264C2.97083 5.79368 3.63486 6.52411 4.45398 6.52411C5.27311 6.52411 5.93714 5.79368 5.93714 4.89264C5.93714 3.99161 5.27311 3.26117 4.45398 3.26117ZM6.12253 2.44544C5.81536 2.44544 5.56635 2.71935 5.56635 3.05724C5.56635 3.39513 5.81536 3.66904 6.12253 3.66904C6.4297 3.66904 6.67871 3.39513 6.67871 3.05724C6.67871 2.71935 6.4297 2.44544 6.12253 2.44544Z"
                />
              </symbol>
              <symbol viewBox="0 0 9 8" id="twitter">
                <path
                  fillRule="evenodd"
                  clipRule="evenodd"
                  d="M4.43044 2.01665C4.20198 2.37906 4.12486 2.8042 4.12486 3.00598C4.12486 3.13893 4.05847 3.26322 3.94764 3.33775C3.83681 3.41229 3.69598 3.42736 3.57171 3.37798C3.49044 3.34569 3.39989 3.31286 3.30198 3.27736C3.04833 3.1854 2.74529 3.07553 2.42621 2.91071C2.10216 2.74333 1.74904 2.51601 1.34908 2.17847C1.35404 2.32915 1.38755 2.46715 1.44386 2.59504C1.5753 2.8936 1.85401 3.18878 2.31554 3.46368C2.44181 3.5389 2.51679 3.67648 2.51116 3.82262C2.50553 3.96876 2.42018 4.10025 2.28849 4.16565L2.28805 4.16587L2.28757 4.16611L2.28649 4.16664L2.28388 4.16791L2.27684 4.17128C2.27135 4.17388 2.26425 4.17717 2.25561 4.18105C2.23832 4.1888 2.21479 4.19893 2.18543 4.2106C2.12676 4.23391 2.0444 4.26353 1.94161 4.2927C1.83351 4.32338 1.70189 4.35382 1.55078 4.37576C1.63701 4.6799 1.82918 4.86974 2.03627 5.01314C2.15804 5.09747 2.27585 5.15954 2.39425 5.22192C2.4237 5.23743 2.45319 5.25297 2.48279 5.26887C2.54745 5.30362 2.63246 5.35057 2.70276 5.40644C2.75702 5.44955 2.91481 5.5834 2.91481 5.81057C2.91481 5.95582 2.84849 6.06901 2.80651 6.12951C2.7574 6.20029 2.69541 6.26416 2.63051 6.32C2.49957 6.43266 2.32381 6.54091 2.11542 6.62959C1.87548 6.7317 1.58255 6.812 1.2477 6.84092C1.27513 6.85553 1.30429 6.86949 1.33522 6.8828C1.6288 7.00917 2.05815 7.06088 2.57539 7.01418C3.60087 6.92159 4.81744 6.45675 5.65361 5.72801C6.29461 4.9926 6.56609 4.26495 6.67908 3.72566C6.73623 3.45287 6.7529 3.22769 6.75565 3.07399C6.75702 2.99721 6.75491 2.93854 6.75271 2.901C6.75161 2.88224 6.75048 2.8688 6.74976 2.86105L6.74903 2.85377C6.73716 2.75588 6.76202 2.65684 6.81894 2.57602L6.74914 2.85466L6.74923 2.85535L6.81894 2.57602L7.5609 2.91575C7.55476 2.92507 7.56646 2.90741 7.5609 2.91575C7.5609 2.91575 7.56341 3.02146 7.56222 3.08822C7.5587 3.28509 7.53762 3.56074 7.46886 3.88893C7.331 4.54692 7.00173 5.41392 6.24413 6.27462C6.23297 6.28729 6.22103 6.29925 6.20836 6.31043C5.22888 7.17475 3.83384 7.70517 2.64841 7.8122C2.0563 7.86567 1.47721 7.81722 1.01448 7.61805C0.535329 7.41182 0.165766 7.03203 0.0939387 6.46125C0.0781412 6.33572 0.122962 6.21014 0.214839 6.12253C0.306716 6.03492 0.434855 5.99555 0.560485 6.01635C1.08522 6.10322 1.51159 6.0148 1.79775 5.89303C1.82628 5.88089 1.87832 5.85614 1.87832 5.85614C1.87832 5.85614 1.67888 5.74248 1.57492 5.67048C1.1493 5.37574 0.696379 4.87758 0.696379 4.00762C0.696379 3.78635 0.876965 3.60697 1.09973 3.60697C1.12906 3.60697 1.15782 3.60641 1.18599 3.60537C0.980502 3.39881 0.816425 3.16978 0.704743 2.91611C0.478326 2.40183 0.49016 1.8383 0.725227 1.25456C0.775582 1.12951 0.885814 1.03797 1.01863 1.01089C1.15144 0.983807 1.28907 1.02482 1.38494 1.12005C1.96468 1.69592 2.41932 2.00398 2.79838 2.19978C3.01615 2.31226 3.20289 2.38638 3.38967 2.4552C3.45442 2.18216 3.56756 1.87559 3.74671 1.59139C4.07763 1.06644 4.64862 0.602051 5.53659 0.602051C6.08741 0.602051 6.44184 0.871683 6.66502 1.05648C6.69191 1.07875 6.71524 1.09823 6.73573 1.11534C6.78733 1.15843 6.82097 1.18652 6.84839 1.20638C7.03175 1.12005 7.19731 1.05957 7.34453 1.0317C7.50103 1.00208 7.72657 0.992993 7.91227 1.14068C8.10767 1.29608 8.13029 1.51961 8.12359 1.652C8.11656 1.79055 8.07503 1.9293 8.03137 2.04491C7.94217 2.28107 7.80026 2.5321 7.68962 2.71311C7.64115 2.79239 7.59639 2.86193 7.5609 2.91575C7.56797 3.00322 7.56013 2.90749 7.5609 2.91575L6.81894 2.57602L6.8194 2.57536L6.82172 2.57204L6.83176 2.55751C6.84073 2.54445 6.85404 2.52491 6.87061 2.50003C6.90384 2.45016 6.94977 2.3795 7.00007 2.29722C7.07155 2.18029 7.14615 2.04902 7.20595 1.92485C7.18168 1.93614 7.15597 1.9485 7.12875 1.96202C7.12329 1.96474 7.11776 1.96733 7.11218 1.9698C6.86539 2.07878 6.64304 2.0149 6.48694 1.92709C6.37916 1.86647 6.26913 1.77361 6.1897 1.70657C6.17482 1.69401 6.16101 1.68235 6.14849 1.67199C5.95962 1.5156 5.79247 1.40336 5.53659 1.40336C4.98329 1.40336 4.64674 1.67351 4.43044 2.01665Z"
                />
              </symbol>
              <symbol viewBox="0 0 24 24" id="arleft">
                <g clipPath="url(#clip0_16_1732)">
                  <path
                    fillRule="evenodd"
                    clipRule="evenodd"
                    d="M1.29289 12.7071C1.10536 12.5196 0.999999 12.2652 0.999999 12C0.999999 11.7348 1.10536 11.4804 1.29289 11.2929L12.2929 0.292894C12.6834 -0.0976306 13.3166 -0.0976306 13.7071 0.292894C14.0976 0.683418 14.0976 1.31658 13.7071 1.70711L3.41421 12L13.7071 22.2929C14.0976 22.6834 14.0976 23.3166 13.7071 23.7071C13.3166 24.0976 12.6834 24.0976 12.2929 23.7071L1.29289 12.7071ZM10.2929 12.7071C10.1054 12.5196 10 12.2652 10 12C10 11.7348 10.1054 11.4804 10.2929 11.2929L21.2929 0.292894C21.6834 -0.0976302 22.3166 -0.0976302 22.7071 0.292894C23.0976 0.683419 23.0976 1.31658 22.7071 1.70711L12.4142 12L22.7071 22.2929C23.0976 22.6834 23.0976 23.3166 22.7071 23.7071C22.3166 24.0976 21.6834 24.0976 21.2929 23.7071L10.2929 12.7071Z"
                  />
                </g>
                <defs>
                  <clipPath id="clip0_16_1732">
                    <rect
                      width={24}
                      height={24}
                      transform="translate(24) rotate(90)"
                    />
                  </clipPath>
                </defs>
              </symbol>
              <symbol viewBox="0 0 24 24" id="arright">
                <g clipPath="url(#clip0_16_1732)">
                  <path
                    fillRule="evenodd"
                    clipRule="evenodd"
                    d="M1.29289 12.7071C1.10536 12.5196 0.999999 12.2652 0.999999 12C0.999999 11.7348 1.10536 11.4804 1.29289 11.2929L12.2929 0.292894C12.6834 -0.0976306 13.3166 -0.0976306 13.7071 0.292894C14.0976 0.683418 14.0976 1.31658 13.7071 1.70711L3.41421 12L13.7071 22.2929C14.0976 22.6834 14.0976 23.3166 13.7071 23.7071C13.3166 24.0976 12.6834 24.0976 12.2929 23.7071L1.29289 12.7071ZM10.2929 12.7071C10.1054 12.5196 10 12.2652 10 12C10 11.7348 10.1054 11.4804 10.2929 11.2929L21.2929 0.292894C21.6834 -0.0976302 22.3166 -0.0976302 22.7071 0.292894C23.0976 0.683419 23.0976 1.31658 22.7071 1.70711L12.4142 12L22.7071 22.2929C23.0976 22.6834 23.0976 23.3166 22.7071 23.7071C22.3166 24.0976 21.6834 24.0976 21.2929 23.7071L10.2929 12.7071Z"
                  />
                </g>
                <defs>
                  <clipPath id="clip0_16_1732">
                    <rect
                      width={24}
                      height={24}
                      transform="translate(24) rotate(90)"
                    />
                  </clipPath>
                </defs>
              </symbol>
              <symbol id="heart" viewBox="0 0 17 14">
                <path
                  fillRule="evenodd"
                  clipRule="evenodd"
                  d="M9.02585 3.26961C8.73272 3.54789 8.26988 3.54789 7.97676 3.26961L7.45221 2.77163C6.83825 2.18877 6.00883 1.83287 5.09221 1.83287C3.20942 1.83287 1.68312 3.3428 1.68312 5.20538C1.68312 6.99103 2.66023 8.4655 4.07082 9.67699C5.4826 10.8895 7.17055 11.6937 8.17906 12.1041C8.38994 12.1899 8.61267 12.1899 8.82354 12.1041C9.83206 11.6937 11.52 10.8895 12.9318 9.67698C14.3424 8.4655 15.3195 6.99102 15.3195 5.20538C15.3195 3.3428 13.7932 1.83287 11.9104 1.83287C10.9938 1.83287 10.1644 2.18877 9.55039 2.77163L9.02585 3.26961ZM8.5013 1.69016C7.61653 0.850205 6.41531 0.333984 5.09221 0.333984C2.37263 0.333984 0.167969 2.51498 0.167969 5.20538C0.167969 9.97804 5.44853 12.6137 7.60266 13.4903C8.18279 13.7263 8.81981 13.7263 9.39995 13.4903C11.5541 12.6137 16.8346 9.97803 16.8346 5.20538C16.8346 2.51498 14.63 0.333984 11.9104 0.333984C10.5873 0.333984 9.38607 0.850205 8.5013 1.69016Z"
                  fill="white"
                />
              </symbol>
              <symbol id="compare" viewBox="0 0 490 490">
                <path d="M215.746,324.797L109.763,98.724l127.557-23.822v288.682c-137.303,6.625-190.134,99.45-192.383,103.566l-12.408,22.659 h444.023l-17.213-24.174c-2.876-4.024-69.217-94.753-191.419-101.975V69.195l113.894-21.267l-107.56,229.424H490L382.395,47.82 l93.958-17.534l-5.615-30.095L28.886,82.689l5.615,30.095l71.115-13.281L0,324.797H215.746z M88.939,459.209 c24.021-26.209,74.909-65.653,163.68-65.653c76.791,0,131.336,39.046,159.61,65.653H88.939z M322.403,246.752l59.731-127.419 l59.716,127.419H322.403z M48.149,294.197l59.716-127.419l59.731,127.419H48.149z" />
              </symbol>
              <symbol id="hcart" viewBox="0 0 28 30">
                <path
                  d="M7.02246 8.45572H21.1605C22.9277 8.45572 24.4004 10.3442 24.695 12.2328L26.4622 23.5639C26.7569 25.4534 24.695 27.341 22.9277 27.341H5.25521C3.48796 27.341 1.42601 25.4534 1.72071 23.5639L3.48796 12.2328C3.7825 10.3442 5.25521 8.45572 7.02246 8.45572Z"
                  strokeWidth="1.7"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                />
                <path
                  d="M8.78955 12.2329V6.54535"
                  strokeWidth="1.7"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                />
                <path
                  d="M19.3933 6.56717V12.2327"
                  strokeWidth="1.7"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                />
                <path
                  d="M2.06201 21.595H26.1209"
                  strokeWidth="1.7"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                />
                <path
                  d="M19.3932 6.56722C19.3932 4.67869 18.3661 2.66588 16.732 1.65774C15.098 0.649608 13.0848 0.649608 11.4508 1.65774C9.8168 2.66588 8.78967 4.67869 8.78967 6.56722"
                  strokeWidth="1.7"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                />
              </symbol>
              <symbol viewBox="0 0 52 52" id="successi">
                <path
                  d="M26,0C11.664,0,0,11.663,0,26s11.664,26,26,26s26-11.663,26-26S40.336,0,26,0z M26,50C12.767,50,2,39.233,2,26
  S12.767,2,26,2s24,10.767,24,24S39.233,50,26,50z"
                />
                <path
                  d="M38.252,15.336l-15.369,17.29l-9.259-7.407c-0.43-0.345-1.061-0.274-1.405,0.156c-0.345,0.432-0.275,1.061,0.156,1.406
  l10,8C22.559,34.928,22.78,35,23,35c0.276,0,0.551-0.114,0.748-0.336l16-18c0.367-0.412,0.33-1.045-0.083-1.411
  C39.251,14.885,38.62,14.922,38.252,15.336z"
                />
              </symbol>
              <symbol viewBox="0 0 95.494 95.494" id="clist">
                <circle cx="10.906" cy="17.294" r="10.906" />
                <circle cx="10.906" cy="47.294" r="10.906" />
                <circle cx="10.906" cy="78.2" r="10.906" />
                <path
                  d="M34.258,24.43h59.236c0.529,0,1.039-0.211,1.414-0.586s0.586-0.884,0.586-1.414l-0.002-10.271c0-1.104-0.896-2-2-2
  H34.258c-1.104,0-2,0.896-2,2V22.43C32.258,23.534,33.153,24.43,34.258,24.43z"
                />
                <path
                  d="M93.492,40.158H34.258c-1.104,0-2,0.896-2,2v10.271c0,1.104,0.896,2,2,2h59.236c0.529,0,1.039-0.211,1.414-0.586
  s0.586-0.885,0.586-1.414l-0.002-10.271C95.492,41.054,94.598,40.158,93.492,40.158z"
                />
                <path
                  d="M93.492,71.064H34.258c-1.104,0-2,0.896-2,2v10.271c0,1.104,0.896,2,2,2h59.236c0.529,0,1.039-0.211,1.414-0.586
  s0.586-0.885,0.586-1.414l-0.002-10.271C95.492,71.96,94.598,71.064,93.492,71.064z"
                />
              </symbol>
              <symbol viewBox="0 0 341.333 341.333" id="cgrid">
                <rect x={128} y={128} width="85.333" height="85.333" />
                <rect x={0} y={0} width="85.333" height="85.333" />
                <rect x={128} y={256} width="85.333" height="85.333" />
                <rect x={0} y={128} width="85.333" height="85.333" />
                <rect x={0} y={256} width="85.333" height="85.333" />
                <rect x={256} y={0} width="85.333" height="85.333" />
                <rect x={128} y={0} width="85.333" height="85.333" />
                <rect x={256} y={128} width="85.333" height="85.333" />
                <rect x={256} y={256} width="85.333" height="85.333" />
              </symbol>
              <symbol viewBox="0 0 512 512" id="aclorder">
                <path
                  d="M448,177.14V448c0,35.344-28.656,64-64,64H64c-35.344,0-64-28.656-64-64V128c0-35.344,28.656-64,64-64h270.844l-63.969,64
  H64v320h320V241.156L448,177.14z M398.875,45.25L376.25,67.875l67.875,67.891l22.625-22.625L398.875,45.25z M444.125,0
  L421.5,22.625l67.875,67.891L512,67.875L444.125,0z M150,294.188l67.875,67.875L421.5,158.406l-67.875-67.891L150,294.188z
  M128,384h64l-64-64V384z"
                />
              </symbol>
              <symbol viewBox="0 0 510 510" id="aclufolder">
                <path
                  d="M459,102H255l-51-51H51C22.95,51,0,73.95,0,102v306c0,28.05,22.95,51,51,51h408c28.05,0,51-22.95,51-51V153
  C510,124.95,487.05,102,459,102z M331.5,178.5c28.05,0,51,22.95,51,51s-22.95,51-51,51s-51-22.95-51-51S303.45,178.5,331.5,178.5z
  M433.5,382.5h-204V357c0-33.15,68.85-51,102-51s102,17.85,102,51V382.5z"
                />
              </symbol>
              <symbol viewBox="0 0 348.458 348.458" id="aclogout">
                <path
                  d="M204.661,55.646V79.08c55.185,13.862,94.864,64.183,94.864,121.343c0,69.084-56.218,125.289-125.297,125.289
  c-69.082,0-125.29-56.205-125.29-125.289c0-56.974,39.469-107.108,94.857-121.201V55.704
  c-68.19,14.319-117.61,75.054-117.61,144.725c0,81.629,66.416,148.029,148.042,148.029c81.63,0,148.043-66.4,148.043-148.029
  C322.271,130.658,272.863,69.968,204.661,55.646z"
                />
                <rect x="162.859" width="22.731" height="123.12" />
              </symbol>
              <symbol viewBox="0 0 409.165 409.164" id="acluser">
                <path
                  d="M204.583,216.671c50.664,0,91.74-48.075,91.74-107.378c0-82.237-41.074-107.377-91.74-107.377
  c-50.668,0-91.74,25.14-91.74,107.377C112.844,168.596,153.916,216.671,204.583,216.671z"
                />
                <path
                  d="M407.164,374.717L360.88,270.454c-2.117-4.771-5.836-8.728-10.465-11.138l-71.83-37.392
  c-1.584-0.823-3.502-0.663-4.926,0.415c-20.316,15.366-44.203,23.488-69.076,23.488c-24.877,0-48.762-8.122-69.078-23.488
  c-1.428-1.078-3.346-1.238-4.93-0.415L58.75,259.316c-4.631,2.41-8.346,6.365-10.465,11.138L2.001,374.717
  c-3.191,7.188-2.537,15.412,1.75,22.005c4.285,6.592,11.537,10.526,19.4,10.526h362.861c7.863,0,15.117-3.936,19.402-10.527
  C409.699,390.129,410.355,381.902,407.164,374.717z"
                />
              </symbol>
            </svg>
          </div>
          <div id="alert" />
          <Header />
          <main></main>
        </div>
        <div id="common-home" className="container-fluid">
          <div className="row">
            <div id="content" className="col">
              <div className="col-xs-12">
                <MainSlider />
              </div>
              <div className="wbimg">
                <Category />
              </div>
              <div>
                <div className="dinfo">
                  <div className="container">
                    <div className="row">
                      <div className="col-md-4 service">
                        <div className="home-sup">
                          <img alt="icon" src="image/catalog/support.svg" />
                          <div className="home-sup-ctn">
                            <h4>Finished Products</h4>
                            <p>products and gift wrapping</p>
                          </div>
                        </div>
                      </div>
                      <div className="col-md-4 service">
                        <div className="home-sup">
                          <img alt="icon" src="image/catalog/pay.svg" />
                          <div className="home-sup-ctn">
                            <h4>Large And Frequent</h4>
                            <p>Promotions With Numerous Discounts</p>
                          </div>
                        </div>
                      </div>
                      <div className="col-md-4 service">
                        <div className="home-sup">
                          <img alt="icon" src="image/catalog/ship.svg" />
                          <div className="home-sup-ctn">
                            <h4>Free Shipping</h4>
                            <p>On Any Order From $ 150</p>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div className="special-section ">
                <div className="container">
                  <div className="row">
                    <div className="col-md-6 col-xs-12">
                      <div className="special_secheading">
                        <h1 className="heading text-left">
                          <span>Top Picks</span>
                          <p>
                            Discover our most popular and exquisite diamond
                            pieces, hand-selected for their exceptional quality
                            and brilliance.
                          </p>
                        </h1>
                        <a
                          className="btn btn-primary btn-section"
                          href="#"
                          tabIndex={0}
                        >
                          <span>
                            check more product
                            <img
                              alt="stor-bg"
                              src="image/catalog/stor-bg.svg"
                            />
                          </span>
                        </a>
                      </div>
                    </div>
                    <div className="col-md-6 col-xs-12">
                      <div className="beffect">
                        <a href="#">
                          <img
                            src="https://opencart.workdo.io/diamond/image/cache/catalog/left-banner/1-580x465.png"
                            alt="left-banner"
                            className="mx-auto img-fluid"
                          />
                        </a>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div className="selected_bg">
                <div className="container">
                  <div className="row">
                    <div className="select-ctn">
                      <h4>Jewellery &amp; diamonds</h4>
                    </div>
                    <div className="col-xs-12 selected_pro">
                      <WdSelectedSlider />
                    </div>
                  </div>
                </div>
              </div>

              <div className="specialbanner">
                <div className="container">
                  <div className="row">
                    <div className="col-md-6 col-xs-12">
                      <div className="spe-text">
                        <h3>Jewellery &amp; diamonds</h3>
                        <p>
                          Lorem Ipsum is simply dummy text of the printing and
                          typesetting industry. Lorem Ipsum has been the
                          industry's standard dummy.Lorem Ipsum is simply dummy
                          text of the printing and typesetting industry. Lorem
                          Ipsum has been the industry's standard dummy.
                        </p>
                        <p>
                          <a
                            className="btn btn-primary btn-section"
                            href="#"
                            tabIndex={0}
                          >
                            <span>
                              check more product
                              <img
                                alt="stor-bg"
                                src="image/catalog/stor-bg.svg"
                              />
                            </span>
                          </a>
                        </p>
                      </div>
                    </div>
                    <div className="col-md-6 col-xs-12">
                      <div className="beffect">
                        <a href="#">
                          <img
                            src="https://opencart.workdo.io/diamond/image/cache/catalog/specialbanner/1-580x465.png"
                            alt="special-banner"
                            className="mx-auto img-fluid"
                          />
                        </a>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              {/* Rings Section */}
              {/* <div className="selected_bg">
                <div className="container">
                  <div className="row">
                    <div className="col-md-12">
                      <div className="secheading">
                        <h1 className="heading">
                          <span>Necklaces</span>
                        </h1>
                        <p>
                          Explore our stunning collection of diamond rings, from
                          classic solitaires to intricate designs, perfect for
                          every occasion.
                        </p>
                      </div>
                    </div>
                    <div className="col-xs-12 selected_pro">
                      <WdSelectedSlider2 />
                    </div>
                  </div>
                </div>
              </div> */}
              <div className="category-bg">
                <div className="container top-category">
                  <div className="row">
                    <div className="col-md-6 col-xs-12">
                      <div className="category_secheading">
                        <h3>Explore Our Exquisite Collections</h3>
                        <p>
                          Discover our stunning range of jewellery and diamonds,
                          crafted to perfection. From timeless classics to
                          contemporary designs, our collections cater to every
                          style and occasion. Whether you're looking for an
                          elegant necklace, a dazzling ring, or a sophisticated
                          bracelet, you'll find the perfect piece to elevate
                          your look.
                        </p>
                        <a
                          className="btn btn-primary btn-section"
                          href="#"
                          tabIndex={0}
                        >
                          <span>
                            Check More Products
                            <img
                              alt="stor-bg"
                              src="image/catalog/stor-bg.svg"
                            />
                          </span>
                        </a>
                      </div>
                    </div>
                    <div className="col-md-6 col-xs-12">
                      <WdCategorySlider />
                    </div>
                  </div>
                </div>
              </div>
              <div>
                <div className="test-pad">
                  <div className="container parallex">
                    <div className="secheading">
                      <h1 className="heading">
                        <span>Testimonials</span>
                      </h1>
                    </div>
                    <div className="row">
                      <div className="col-xs-12 testi">
                        <TestimonialSlider
                          testimonials={testimonials}
                          isLoadingTestimonials={isLoadingTestimonials}
                          errorTestimonials={errorTestimonials}
                        />
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div className="blog-bg">
                <div className="container">
                  <div className="secheading">
                    <h1 className="heading text-left">
                      <span>From Our Blog</span>
                    </h1>
                  </div>
                  <div className="row">
                    <div className="col-xs-12 box-content">
                      <div className="box-product">
                        <BlogSlider
                          blogs={blogs}
                          isLoadingBlogs={isLoadingBlogs}
                          errorBlogs={errorBlogs}
                        />
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        <Footer />
        <a
          href=""
          id="scroll"
          title="Scroll to Top"
          style={{ display: "none" }}
        >
          <i className="fa fa-angle-double-up" />
        </a>
        {/* product qty + - */}
      </>
    </div>
  );
};

export default Index;

// File: \srk assignment\Shivam\my-diamond-app\pages\pair.js
import React, { useState, useEffect, useRef } from "react";
import Head from "next/head";
import Link from "next/link";
import Glide from "@glidejs/glide"; // Import Glide

// Import Glide CSS
import "@glidejs/glide/dist/css/glide.core.min.css";
import "@glidejs/glide/dist/css/glide.theme.min.css";

import {
  getCartItemsFromLocalStorage,
  addToCart,
  removeFromCart,
  updateCartItemQuantity,
} from "../utils/cartfns";
import { Skeleton } from "@chakra-ui/react";

const Pair = () => {
  const [isOpen, setIsOpen] = useState(false);
  const toggleDrawer = () => {
    setIsOpen(!isOpen);
  };
  const [solitaires, setSolitaires] = useState([
    // Dummy data for two solitaires
    {
      SolitaireID: 1,
      SolitaireName: "Radiant-13",
      Slug: "radiant-13",
      ShapeName: "Radiant",
      Carat: 2.5,
      ColorName: "E",
      FluorName: "None",
      PurityName: "VS1",
      CutName: "Excellent",
      LabName: "GIA",
      PolishName: "Excellent",
      SymmetryName: "Very Good",
      LocationName: "New York",
      CertificateNumber: "123456789",
      UniqueCode: "RAD1234",
      Image1:
        "https://opencart.workdo.io/diamond/image/cache/catalog/product/1/1-1000x1000.png",
      Image2:
        "https://opencart.workdo.io/diamond/image/cache/catalog/product/1/2-1000x1000.png",
      Image3:
        "https://opencart.workdo.io/diamond/image/cache/catalog/product/2/1-1000x1000.png", // Add a third image
      Image4: null,
      Image5: null,
      PDFKey: "dummy.pdf",
      VideoKey: "https://www.youtube.com/watch?v=dQw4w9WgXcQ",
      IsActive: true,
      Price: 9999.99, // Add a price
      BrandName: "Example Brand", // Add a brand name
    },
    {
      SolitaireID: 2,
      SolitaireName: "Emerald-8",
      Slug: "emerald-8",
      ShapeName: "Emerald",
      Carat: 1.8,
      ColorName: "D",
      FluorName: "Faint",
      PurityName: "VVS2",
      CutName: "Very Good",
      LabName: "IGI",
      PolishName: "Good",
      SymmetryName: "Excellent",
      LocationName: "London",
      CertificateNumber: "987654321",
      UniqueCode: "EME5678",
      Image1:
        "https://opencart.workdo.io/diamond/image/cache/catalog/product/11/1-1000x1000.png",
      Image2:
        "https://opencart.workdo.io/diamond/image/cache/catalog/product/11/2-1000x1000.png",
      Image3:
        "https://opencart.workdo.io/diamond/image/cache/catalog/product/12/1-1000x1000.png", // Add a third image
      Image4: null,
      Image5: null,
      PDFKey: "dummy.pdf",
      VideoKey: "https://www.youtube.com/watch?v=dQw4w9WgXcQ",
      IsActive: true,
      Price: 6800.5, // Add a price
      BrandName: "Another Brand",
    },
  ]);

  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [quantities, setQuantities] = useState([1, 1]); // Quantities for each solitaire
  const [cartItems, setCartItems] = useState([]);
  const [cartDropdownOpen, setCartDropdownOpen] = useState(false);
  const [mainImageUrls, setMainImageUrls] = useState([null, null]);
  const [showSkeletons, setShowSkeletons] = useState([false, false]);

  const galleryRefs = [useRef(null), useRef(null)];

  useEffect(() => {
    const updateCart = () => {
      setCartItems(getCartItemsFromLocalStorage());
    };

    window.addEventListener("storage", updateCart);
    return () => window.removeEventListener("storage", updateCart);
  }, []);

  useEffect(() => {
    setCartItems(getCartItemsFromLocalStorage());
  }, []);

  // Function to remove item from cart and update state
  const handleRemoveFromCart = (solitaireId) => {
    removeFromCart(solitaireId);
    setCartItems(getCartItemsFromLocalStorage());
  };

  const handleSubmit = () => {
    console.log("submitted");
  };
  // Toggle the cart dropdown
  const toggleCartDropdown = () => {
    setCartDropdownOpen(!cartDropdownOpen);
  };

  // Initialize Glide for each solitaire
  useEffect(() => {
    solitaires.forEach((solitaire, index) => {
      if (galleryRefs[index].current) {
        new Glide(galleryRefs[index].current, {
          type: "carousel",
          perView: 4,
          gap: 10,
          rewind: false,
        }).mount();
      }
    });
  }, [solitaires]);

  // Set main image URLs when solitaires data changes
  useEffect(() => {
    setMainImageUrls(solitaires.map((solitaire) => solitaire.Image1));
  }, [solitaires]);

  const handleGalleryImageClick = (solitaireIndex, imageUrl) => {
    const newSkeletons = [...showSkeletons];
    newSkeletons[solitaireIndex] = true;
    setShowSkeletons(newSkeletons);

    setTimeout(() => {
      const newImageUrls = [...mainImageUrls];
      newImageUrls[solitaireIndex] = imageUrl;
      setMainImageUrls(newImageUrls);

      newSkeletons[solitaireIndex] = false;
      setShowSkeletons(newSkeletons);
    }, 300);
  };

  // Handle quantity changes
  const handleQuantityChange = (solitaireIndex, newQuantity) => {
    const newQuantities = [...quantities];
    newQuantities[solitaireIndex] = parseInt(newQuantity) || 1;
    setQuantities(newQuantities);
  };

  const increaseQuantity = (solitaireIndex) => {
    const newQuantities = [...quantities];
    newQuantities[solitaireIndex]++;
    setQuantities(newQuantities);
  };

  const decreaseQuantity = (solitaireIndex) => {
    const newQuantities = [...quantities];
    if (newQuantities[solitaireIndex] > 1) {
      newQuantities[solitaireIndex]--;
    }
    setQuantities(newQuantities);
  };
  const areSolitairesInCart = solitaires.map((solitaire) =>
    cartItems.some((item) => item.SolitaireID === solitaire.SolitaireID)
  );
  const handleAddToCart = (solitaireIndex) => {
    const solitaireToAdd = {
      ...solitaires[solitaireIndex],
      quantity: quantities[solitaireIndex],
    };
    addToCart(solitaireToAdd);
    setCartItems(getCartItemsFromLocalStorage());
  };

  // Calculate subtotal and total
  const subTotal = cartItems.reduce(
    (total, item) => total + item.Price * item.quantity,
    0
  );
  const total = subTotal; // For now, total is the same as subtotal

  return (
    <div>
      <Head>
        <title>Pair - Diamond Store</title>
        {/* ... [Add other meta tags] ... */}
      </Head>

      {/* Header */}
      <header>
        <div className="top-header hidden-xs" style={{ fontFamily: "outfit" }}>
          <div className="container">
            <div className="row">
              <div className="topbspinner">
                <div className="col-md-6 col-xs-12">
                  <div className="ebook">
                    <div className="ebook-ctn">
                      <h4 style={{ opacity: 0.7 }}>
                        Monday - Friday: 8:00 AM - 9:00 PM
                      </h4>
                    </div>
                  </div>
                </div>
                <div className="col-md-6 col-xs-12">
                  <div className="custom-link">
                    <a href="index.php?route=information/information&language=en-gb&information_id=1">
                      About
                    </a>
                    <a href="index.php?route=information/sitemap&language=en-gb">
                      Site Map
                    </a>
                    <a href="index.php?route=product/manufacturer&language=en-gb">
                      Brand
                    </a>
                    <a href="index.php?route=information/contact&language=en-gb">
                      Contact
                    </a>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div className="homemenu">
          <div className="container">
            <div className="row">
              <div className="sub_megamenu">
                <div className="container_wb_megamenu">
                  <div
                    id="stamenu"
                    className={` ${isOpen ? "active" : ""} menu-fixed`}
                  >
                    <nav id="menu" className="navbar">
                      <div className="navbar-expand-md">
                        <button
                          type="button"
                          className="btn-navbar navbar-toggler"
                          onClick={toggleDrawer}
                          data-bs-toggle="collapse"
                          data-bs-target=".navbar-ex1-collapse"
                        >
                          <i className="fa fa-bars" />
                        </button>
                      </div>
                      <div id="wr-menu-icon ">
                        <div
                          className="wrmenu collapsed"
                          data-bs-toggle="collapse"
                          data-bs-target="#under-menu"
                          aria-expanded="false"
                          aria-controls="collapseExample"
                        ></div>
                      </div>
                      <div
                        id="mySidenav"
                        className={`sidenav menu-vertical ${
                          isOpen ? "open" : ""
                        }`}
                      >
                        <div id="under-menu" className="">
                          <div className="close-nav">
                            <span
                              className="categories"
                              style={{ color: "var(--main-color)" }}
                            >
                              Categories
                            </span>
                            <button
                              type="button"
                              className=" float-end"
                              onClick={toggleDrawer}
                            >
                              <i className="fa fa-close" />
                            </button>
                          </div>
                          <div className="navbar-collapse navbar-ex1-collapse">
                            <ul className="nav navbar-nav">
                              <li className="nav-item">
                                <Link href={"/solitaire"} className="nav-item">
                                  Solitaire
                                </Link>
                              </li>
                              <li className="nav-item">
                                <a
                                  href="https://opencart.workdo.io/diamond/index.php?route=product/category&language=en-gb&path=60"
                                  className="nav-link"
                                >
                                  {/*<img src="https://opencart.workdo.io/diamond/image/cache/catalog/menu-icon/meat-fish-14x14.png" alt="Amethyst" title="Amethyst"> */}{" "}
                                  Amethyst
                                </a>
                              </li>
                              <li className="nav-item">
                                <a
                                  href="https://opencart.workdo.io/diamond/index.php?route=product/category&language=en-gb&path=67"
                                  className="nav-link"
                                >
                                  {/*<img src="" alt="Blue Sapphire" title="Blue Sapphire"> */}{" "}
                                  Blue Sapphire
                                </a>
                              </li>
                            </ul>
                          </div>
                        </div>
                      </div>
                    </nav>
                    <div
                      className="w3-overlay w3-animate-opacity"
                      onclick={toggleDrawer}
                      style={{
                        cursor: "pointer",
                        display: isOpen ? "block" : "none",
                      }}
                      id="myOverlay"
                    />
                  </div>
                </div>
              </div>
              <div className="col-md-5 head-manu">
                <div className="top-manu">
                  <div className="megamenu">
                    <div className="container_wb_megamenu">
                      <div
                        id="stamenu"
                        // className={` ${isOpen ? "active" : ""} menu-fixed`}
                      >
                        <nav id="menu" className="navbar">
                          <div className="navbar-expand-md">
                            <button
                              type="button"
                              className="btn-navbar navbar-toggler"
                              onClick={toggleDrawer}
                              data-bs-toggle="collapse"
                              data-bs-target=".navbar-ex1-collapse"
                            >
                              <i className="fa fa-bars" />
                            </button>
                          </div>
                          <div id="wr-menu-icon ">
                            <div
                              className="wrmenu collapsed"
                              data-bs-toggle="collapse"
                              data-bs-target="#under-menu"
                              aria-expanded="false"
                              aria-controls="collapseExample"
                            ></div>
                          </div>
                          <div
                            id="mySidenav"
                            className={`sidenav menu-vertical ${
                              isOpen ? "open" : ""
                            }`}
                          >
                            <div id="under-menu" className="">
                              <div className="close-nav">
                                <span
                                  className="categories"
                                  style={{ color: "var(--main-color)" }}
                                >
                                  Categories
                                </span>
                                <button
                                  type="button"
                                  className=" float-end"
                                  onClick={toggleDrawer}
                                >
                                  <i className="fa fa-close" />
                                </button>
                              </div>
                              <div className="navbar-collapse navbar-ex1-collapse">
                                <ul className="nav navbar-nav">
                                  <li className="nav-item">
                                    <Link
                                      href={"/solitaire"}
                                      className="nav-item"
                                    >
                                      Solitaire
                                    </Link>
                                  </li>
                                  <li className="nav-item">
                                    <a
                                      href="https://opencart.workdo.io/diamond/index.php?route=product/category&language=en-gb&path=60"
                                      className="nav-link"
                                    >
                                      {/*<img src="https://opencart.workdo.io/diamond/image/cache/catalog/menu-icon/meat-fish-14x14.png" alt="Amethyst" title="Amethyst"> */}{" "}
                                      Amethyst
                                    </a>
                                  </li>
                                  <li className="nav-item">
                                    <a
                                      href="https://opencart.workdo.io/diamond/index.php?route=product/category&language=en-gb&path=67"
                                      className="nav-link"
                                    >
                                      {/*<img src="" alt="Blue Sapphire" title="Blue Sapphire"> */}{" "}
                                      Blue Sapphire
                                    </a>
                                  </li>
                                </ul>
                              </div>
                            </div>
                          </div>
                        </nav>
                        <div
                          className="w3-overlay w3-animate-opacity"
                          onclick={toggleDrawer}
                          style={{
                            cursor: "pointer",
                            // display: isOpen ? "block" : "none",
                          }}
                          id="myOverlay"
                        />
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div className="col-md-2 col-sm-2 text-left header-logo">
                <div id="logo">
                  <Link href="/">
                    <h4 style={{ color: "var(--main-color)" }}>HKSURANA</h4>
                  </Link>
                </div>
              </div>
              <div className="col-md-5 col-sm-5 megamenu_border">
                <div className="main-header">
                  <div className="h-icon">
                    <div id="top-links">
                      <div className="h-search">
                        <div className="top-search">
                          <ul>
                            <li
                              id="search"
                              className="desktop-search d-inline-block"
                            >
                              <div className="d-search">
                                <button
                                  id="search_toggle"
                                  className="search-toggle"
                                  data-toggle="collapse"
                                  onclick="openSearch()"
                                >
                                  <span>Search</span>
                                  <img
                                    src="image/catalog/search.png"
                                    alt="search"
                                  />
                                </button>
                              </div>
                              <div id="search" className="wbSearch">
                                <div id="search_block_top">
                                  <select id="workdo-search-category">
                                    <option value={0}>Categories</option>
                                    <option value={60}>Amethyst</option>
                                    <option value={20}>bead</option>
                                    <option value={27}>
                                      &nbsp;&nbsp;&nbsp;&nbsp;bracelet
                                    </option>
                                    <option value={61}>
                                      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alexandrite
                                    </option>
                                    <option value={63}>
                                      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fashion
                                    </option>
                                    <option value={67}>Blue Sapphire</option>
                                    <option value={25}>Burma Ruby</option>
                                    <option value={29}>
                                      &nbsp;&nbsp;&nbsp;&nbsp;Citrine
                                    </option>
                                    <option value={65}>
                                      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Colombian
                                      Emerald
                                    </option>
                                    <option value={66}>
                                      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Diamond
                                    </option>
                                    <option value={64}>
                                      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Garnet
                                    </option>
                                    <option value={28}>
                                      &nbsp;&nbsp;&nbsp;&nbsp;Morganite
                                    </option>
                                    <option value={17}>Black Diamond</option>
                                    <option value={68}>Ametrine</option>
                                  </select>
                                  <div className="input-group">
                                    <input
                                      type="text"
                                      name="search"
                                      defaultValue=""
                                      placeholder="Search Product..."
                                      className="search_query form-control input-lg workdo-search"
                                    />
                                    <div className="input-group-btn">
                                      <button
                                        type="button"
                                        className="btn btn-primary btn-lg"
                                      >
                                        <img
                                          src="image/catalog/search.png"
                                          alt="search"
                                        />
                                      </button>
                                      <a
                                        href="javascript:void(0)"
                                        className="closebtn close-nav"
                                        onclick="closeSearch()"
                                      >
                                        <i className="fa fa-close" />
                                      </a>
                                    </div>
                                    {/* workdo Search Start  */}
                                    <div className="workdo-search text-left">
                                      <div
                                        className="workdo-search-loader"
                                        style={{ display: "none" }}
                                      >
                                        <div className="loaders" />
                                      </div>
                                      {/* Add Loader */}
                                      <div className="workdo-search-result">
                                        {/* search results */}
                                      </div>
                                    </div>
                                    {/* workdo Search End  */}
                                  </div>
                                </div>
                              </div>
                            </li>
                          </ul>
                        </div>
                      </div>
                      <ul className="list-inline d-flex user-bg">
                        <li className="userapp" />
                        <li className="huser">
                          <div className="dropdown">
                            <a
                              href=""
                              className="dropdown-toggle huser-drop"
                              data-bs-toggle="dropdown"
                            >
                              <div className="xuser">
                                <img src="image/catalog/huser.svg" alt="user" />
                                <span>My Profile</span>
                                <i className="fa fa-angle-down enaleng" />
                              </div>
                              <div className="xuser-desc d-none">
                                <span>
                                  <span className="d-none d-lg-inline">
                                    My Account
                                  </span>
                                </span>
                              </div>
                            </a>
                            <ul className="dropdown-menu dropdown-menu-right haccount  hlogout">
                              <h5 className="text-left">Your Account</h5>
                              <h6 className="text-left">
                                Access account and manage orders
                              </h6>
                              <li className="acd">
                                <a
                                  href="https://opencart.workdo.io/diamond/index.php?route=account/register&language=en-gb"
                                  className="dropdown-item"
                                >
                                  <i className="fa fa-user-plus" />
                                  Register
                                </a>
                              </li>
                              <li className="acd">
                                <a
                                  href="https://opencart.workdo.io/diamond/index.php?route=account/login&language=en-gb"
                                  className="dropdown-item"
                                >
                                  <i className="fa fa-lock" />
                                  Login
                                </a>
                              </li>
                              <li className="wishcom">
                                <a href="">
                                  <i className="fa fa-compress" />
                                  compare
                                </a>
                              </li>
                              <li className="wishcom">
                                <a href="https://opencart.workdo.io/diamond/index.php?route=account/wishlist&language=en-gb">
                                  <i className="fa fa-heart" />
                                  wishlist
                                </a>
                              </li>
                              <li className="xsla d-inline-block">
                                {" "}
                                <form
                                  action="https://opencart.workdo.io/diamond/index.php?route=common/currency|save&language=en-gb"
                                  method="post"
                                  encType="multipart/form-data"
                                  id="form-currency"
                                >
                                  <div className="dropdown">
                                    <button
                                      className="btn-link dropdown-toggle test"
                                      data-bs-toggle="dropdown"
                                    >
                                      <strong>$</strong>
                                      <span className="d-md-inline">
                                        Currency
                                      </span>{" "}
                                      <i className="fa fa-angle-down" />
                                    </button>
                                    <ul className="dropdown-menu">
                                      <li>
                                        <a href="EUR" className="dropdown-item">
                                          € Euro
                                        </a>
                                      </li>
                                      <li>
                                        <a href="GBP" className="dropdown-item">
                                          £ Pound Sterling
                                        </a>
                                      </li>
                                      <li>
                                        <a href="USD" className="dropdown-item">
                                          $ US Dollar
                                        </a>
                                      </li>
                                    </ul>
                                  </div>
                                  <input
                                    type="hidden"
                                    name="code"
                                    defaultValue=""
                                  />{" "}
                                  <input
                                    type="hidden"
                                    name="redirect"
                                    defaultValue="https://opencart.workdo.io/diamond/index.php?route=common/home"
                                  />
                                </form>
                              </li>
                            </ul>
                            <ul></ul>
                          </div>
                        </li>
                      </ul>
                      <div className="d-inline-block">
                        <span id="header-cart">
                          <div id="cart" className="dropdown btn-block">
                            <button
                              type="button"
                              data-bs-toggle="dropdown"
                              className="btn btn-inverse dropdown-toggle"
                              onClick={toggleCartDropdown}
                              aria-expanded={cartDropdownOpen}
                            >
                              {/* ... [Your existing cart icon and text] ...  */}
                              <div className="xuser">
                                <img src="image/catalog/hcart.svg" alt="cart" />
                              </div>
                              <span className="cartl">
                                <span className="cartt">
                                  {cartItems.reduce(
                                    (acc, item) => acc + item.quantity,
                                    0
                                  )}{" "}
                                </span>
                                <span className="cartna">cart: items</span>
                                <strong>Items</strong>
                              </span>
                            </button>

                            {/* Cart Dropdown (Custom Styled) */}
                            <ul
                              className={`dropdown-menu dropdown-menu-right${
                                cartDropdownOpen ? " show" : ""
                              }`}
                              aria-labelledby="cart"
                              style={{
                                padding: "1rem",
                                maxWidth: "300px",
                                backgroundColor: "rgb(33, 37, 41)", // Dark background color
                                boxShadow: "0 2px 4px rgba(0, 0, 0, 0.1)",
                                border: "1px solid #dee2e6",
                              }}
                            >
                              {cartItems.length === 0 ? (
                                <li className="text-center">
                                  Your shopping cart is empty!
                                </li>
                              ) : (
                                <>
                                  <div
                                    style={{
                                      maxHeight: "250px",
                                      overflowY: "auto",
                                    }}
                                  >
                                    {cartItems.map((item) => (
                                      <div
                                        key={item.SolitaireID}
                                        className="d-flex align-items-center mb-3"
                                      >
                                        <Link href={`/${item.SolitaireID}`}>
                                          <img
                                            src={item.Image1}
                                            alt={
                                              item.ShapeName +
                                              "-" +
                                              item.SolitaireID
                                            }
                                            style={{
                                              width: "50px",
                                              height: "50px",
                                              objectFit: "cover",
                                              marginRight: "10px",
                                            }}
                                          />
                                        </Link>
                                        <div>
                                          <Link href={`/${item.SolitaireID}`}>
                                            <h6
                                              className="mb-0"
                                              style={{
                                                color: "var(--main-color)",
                                                fontFamily: "outfit",
                                              }}
                                            >
                                              {item.ShapeName +
                                                "-" +
                                                item.SolitaireID}
                                            </h6>
                                          </Link>
                                          <span className="text-muted small">
                                            Qty: {item.quantity} x ${item.Price}
                                          </span>
                                        </div>
                                        <button
                                          type="button"
                                          className="btn btn-sm btn-link text-danger ml-auto"
                                          onClick={() =>
                                            handleRemoveFromCart(
                                              item.SolitaireID
                                            )
                                          }
                                        >
                                          <i className="fa fa-times"></i>
                                        </button>
                                      </div>
                                    ))}
                                  </div>

                                  {/* Cart Totals */}
                                  <div className="text-right">
                                    <p className="mb-1">
                                      Subtotal:{" "}
                                      <span className="font-weight-bold">
                                        ${subTotal.toFixed(2)}
                                      </span>
                                    </p>
                                    <p className="mb-1">
                                      Total:{" "}
                                      <span className="font-weight-bold">
                                        ${total.toFixed(2)}
                                      </span>
                                    </p>
                                    <Link
                                      href="/cart"
                                      className="btn btn-primary btn-block"
                                    >
                                      View Cart
                                    </Link>
                                  </div>
                                </>
                              )}
                            </ul>
                          </div>
                        </span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main>
        <div className="container mt-5">
          <div
            className="row mt-2 mb-3"
            style={{ alignItems: "center", textAlign: "center" }}
          >
            <h1> Demo Pair Details</h1>
          </div>
          <div className="row">
            {/* Solitaire 1 */}
            {solitaires.map((solitaire, solitaireIndex) => (
              <div
                key={solitaire.SolitaireID}
                className={`col-lg-6 col-md-12 ${
                  solitaires.length === 1 ? "col-sm-12" : "col-sm-6" // Adjust column classes based on number of solitaires
                } mb-4`}
              >
                <div className="productbg p-bg">
                  <div className="container">
                    <div className="row">
                      <div
                        className={`col-lg-5 col-md-6 col-xs-12 zoom-left sticky t-50 ${
                          solitaires.length > 1 ? "order-lg-1 order-md-2" : ""
                        }`}
                      >
                        {/* Main Image */}
                        <div className="pro-bg">
                          <div className="image magnific-popup row">
                            <div className="col-md-12 col-sm-12 col-xs-12 big-img">
                              {mainImageUrls[solitaireIndex] ? (
                                <a
                                  href={mainImageUrls[solitaireIndex]}
                                  title={solitaire.SolitaireName}
                                >
                                  {/* Skeleton Overlay */}
                                  {showSkeletons[solitaireIndex] && (
                                    <Skeleton
                                      startColor="brown.300"
                                      endColor="gray.500"
                                      className="img-thumbnail img-fluid"
                                      height="100%"
                                      minWidth={"350px"}
                                      minHeight={"350px"}
                                      opacity={100}
                                      zIndex="5"
                                    />
                                  )}

                                  <img
                                    id={`img_01_${solitaireIndex}`} // Unique ID
                                    src={mainImageUrls[solitaireIndex]}
                                    data-zoom-image={
                                      mainImageUrls[solitaireIndex]
                                    }
                                    title={solitaire.SolitaireName}
                                    alt={solitaire.SolitaireName}
                                    className="img-thumbnail img-fluid"
                                    style={{
                                      width: "100%",
                                      height: "auto",
                                      maxWidth: "400px",
                                      display: "block",
                                      boxShadow:
                                        "4px 4px 4px 4px rgb(0,0,0,0.3)",
                                      borderRadius: "20px",
                                      zIndex: "1",
                                    }}
                                  />
                                </a>
                              ) : (
                                <div>Loading image...</div>
                              )}
                            </div>

                            {/* Gallery Images */}
                            <div
                              className="col-md-12 col-sm-12 col-xs-12 mt-3"
                              style={{
                                display: "flex",
                                justifyContent: "center",
                              }}
                            >
                              <div
                                style={{ width: "100%" }}
                                ref={galleryRefs[solitaireIndex]}
                              >
                                <div className="glide">
                                  <div
                                    className="glide__track"
                                    data-glide-el="track"
                                  >
                                    <ul className="glide__slides">
                                      {[
                                        solitaire.Image1,
                                        solitaire.Image2,
                                        solitaire.Image3,
                                        solitaire.Image4,
                                        solitaire.Image5,
                                      ]
                                        .filter(Boolean)
                                        .map((imageUrl, index) => (
                                          <li
                                            key={index}
                                            className="glide__slide"
                                          >
                                            <a
                                              href="#"
                                              title={solitaire.SolitaireName}
                                            >
                                              <img
                                                src={imageUrl}
                                                onClick={() =>
                                                  handleGalleryImageClick(
                                                    solitaireIndex,
                                                    imageUrl
                                                  )
                                                }
                                                alt={`Gallery Image ${
                                                  index + 1
                                                }`}
                                                style={{
                                                  width: "100%",
                                                  height: "auto",
                                                  maxWidth: "100px",
                                                  border: "1px solid #ccc",
                                                  padding: "5px",
                                                  borderRadius: "5px",
                                                }}
                                              />
                                            </a>
                                          </li>
                                        ))}
                                    </ul>
                                  </div>
                                  {/* Navigation Arrows (moved and styled) */}
                                  <div
                                    className="glide__arrows"
                                    data-glide-el="controls"
                                    style={{
                                      position: "absolute",
                                      top: "50%",
                                      transform: "translateY(-50%)",
                                      width: "100%",
                                      display: "flex",
                                      justifyContent: "space-between",
                                    }}
                                  >
                                    <button
                                      className="glide__arrow glide__arrow--left"
                                      data-glide-dir="<"
                                      style={{
                                        backgroundColor: "rgb(0,0,0,0.2)",
                                        border: "none",
                                        padding: "10px",
                                        borderRadius: "50%",
                                        cursor: "pointer",
                                      }}
                                    >
                                      <i className="fas fa-chevron-left fa-lg text-dark"></i>
                                    </button>
                                    <button
                                      className="glide__arrow glide__arrow--right"
                                      data-glide-dir=">"
                                      style={{
                                        backgroundColor: "rgb(0,0,0,0.2)",
                                        border: "none",
                                        padding: "10px",
                                        borderRadius: "40%",
                                        cursor: "pointer",
                                      }}
                                    >
                                      <i className="fas fa-chevron-right fa-lg text-dark"></i>
                                    </button>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>

                      {/* Product Details */}
                      <div
                        className={`col-lg-7 col-md-6 col-xs-12 pro-content t-50 ${
                          solitaires.length > 1 ? "order-lg-2 order-md-1" : ""
                        }`}
                      >
                        {/* ... [Your pro-content JSX, using solitaire data] ... */}

                        <h1>{solitaire.SolitaireName}</h1>
                        {/* ... [Your products-specific and product JSX] ... */}
                        <div
                          className="products-specific"
                          style={{ fontFamily: "outfit" }}
                        >
                          <ul className="list-unstyled">
                            <li className="d-flex align-items-center">
                              {/* Use flexbox for alignment */}
                              <i className="fas fa-gem mr-2" />      
                              {/* Icon column - adjust icon class */}
                              <span className="text-decor">Shape:</span>{" "}
                              {solitaire.ShapeName}
                            </li>
                            <li className="d-flex align-items-center">
                              <i className="fas fa-balance-scale-left mr-2" />{" "}
                                  
                              {/* Adjust icon class */}
                              <span className="text-decor">Carat:</span>{" "}
                              {solitaire.Carat}
                            </li>
                            <li className="d-flex align-items-center">
                              <i className="fas fa-palette mr-2" />      
                              {/* Adjust icon class */}
                              <span className="text-decor">Color:</span>{" "}
                              {solitaire.ColorName}
                            </li>
                            <li className="d-flex align-items-center">
                              <i className="fas fa-search-plus mr-2" />      
                              {/* Adjust icon class */}
                              <span className="text-decor">Clarity:</span>{" "}
                              {solitaire.PurityName}
                            </li>
                            <li className="d-flex align-items-center">
                              <i className="fas fa-map-marker-alt mr-2" />      
                              {/* Adjust icon class */}
                              <span className="text-decor">Location:</span>{" "}
                              {solitaire.LocationName}
                            </li>
                          </ul>

                          <ul className="list-unstyled">
                            <li className="d-flex align-items-center">
                              <i className="fas fa-cut mr-2" />      
                              {/* Adjust icon class */}
                              <span className="text-decor">Cut:</span>{" "}
                              {solitaire.CutName}
                            </li>
                            <li className="d-flex align-items-center">
                              <i className="fas fa-flask mr-2" />      
                              {/* Adjust icon class */}
                              <span className="text-decor">Lab:</span>{" "}
                              {solitaire.LabName}
                            </li>
                            <li className="d-flex align-items-center">
                              <i className="fas fa-magic mr-2" />      
                              {/* Adjust icon class */}
                              <span className="text-decor">Polish:</span>{" "}
                              {solitaire.PolishName}
                            </li>
                            <li className="d-flex align-items-center">
                              <i className="fas fa-arrows-alt-h mr-2" />      
                              {/* Adjust icon class */}
                              <span className="text-decor">Symmetry:</span>{" "}
                              {solitaire.SymmetryName}
                            </li>
                          </ul>
                        </div>

                        {/* Product Form (replace OpenCart logic)  */}
                        <div id="product" className="clearfix">
                          <form id="form-product" onSubmit={handleSubmit}>
                            {/* ... [Your web_option JSX] ... */}

                            {/* Quantity Input */}
                            <div className="pro-qut">
                              <label
                                htmlFor="input-quantity"
                                className="form-label text-decorop"
                              >
                                Qty
                              </label>
                              <div className="op-box qty-plus-minus">
                                <button
                                  type="button"
                                  className="form-control pull-left btn-number btnminus"
                                  disabled={quantities[solitaireIndex] === 1}
                                  onClick={() =>
                                    decreaseQuantity(solitaireIndex)
                                  }
                                >
                                  <span className="fa fa-minus"></span>
                                </button>
                                <input
                                  id={`input-quantity-${solitaireIndex}`}
                                  type="text"
                                  name="quantity"
                                  value={quantities[solitaireIndex]}
                                  size="2"
                                  className="form-control input-number pull-left"
                                  onChange={(e) =>
                                    handleQuantityChange(
                                      solitaireIndex,
                                      e.target.value
                                    )
                                  }
                                />
                                <button
                                  type="button"
                                  className="form-control pull-left btn-number btnplus"
                                  onClick={() =>
                                    increaseQuantity(solitaireIndex)
                                  }
                                >
                                  <span className="fa fa-plus"></span>
                                </button>
                                <div
                                  id={`error-quantity-${solitaireIndex}`}
                                  className="form-text"
                                ></div>
                              </div>
                            </div>

                            {/* Price */}
                            <div className="pro-price">
                              <ul className="list-unstyled">
                                <li className="text-decor-bold">
                                  <h2>
                                    <span
                                      className="price-new"
                                      style={{
                                        fontFamily: "outfit",
                                        fontWeight: "200",
                                      }}
                                    >
                                      $999{solitaire.Price}
                                    </span>
                                  </h2>
                                </li>
                              </ul>
                            </div>

                            {/* Add to Cart Button */}
                            <div className="qty-flex">
                              {areSolitairesInCart[solitaireIndex] ? ( // Check if this solitaire is in the cart
                                <div
                                  style={{
                                    display: "flex",
                                    alignItems: "center",
                                    justifyContent: "center",
                                  }}
                                >
                                  <button
                                    className="btn btn-primary btn-lg btn-block text-success"
                                    style={{
                                      marginRight: "10px",
                                      display: "flex",
                                      alignItems: "center",
                                      scale: "0.7",
                                    }}
                                    disabled
                                  >
                                    Already in cart!
                                  </button>
                                  <Link
                                    href="/cart"
                                    className="btn btn-primary btn-lg btn-block"
                                    style={{
                                      display: "flex",
                                      alignItems: "center",
                                      scale: "0.7",
                                    }}
                                  >
                                    Open Cart
                                    <img
                                      alt="stor-bg"
                                      src="image/catalog/stor-bg.svg"
                                      style={{ marginLeft: "5px" }}
                                    />
                                  </Link>
                                </div>
                              ) : (
                                <button
                                  onClick={() =>
                                    handleAddToCart(solitaireIndex)
                                  }
                                  className="btn btn-primary btn-lg btn-block"
                                >
                                  Add to Cart
                                  <img
                                    alt="stor-bg"
                                    src="image/catalog/stor-bg.svg"
                                  />
                                </button>
                              )}

                              <input
                                type="hidden"
                                name="product_id"
                                value={solitaire.SolitaireID}
                              />
                            </div>
                          </form>
                        </div>
                        {/* ... [Replace AddToAny section as needed] ... */}
                        {/*  PDF and Video Panels (Dummy Data) */}
                      </div>
                    </div>
                    <div className="row mt-4">
                      <div className="row">
                        {/* PDF Panel */}
                        <div className="col-md-12">
                          <div className="card">
                            <div
                              className="card-header"
                              style={{
                                color: "var(--main-color)",
                                fontFamily: "outfit",
                                textAlign: "center",
                              }}
                            >
                              Product Certificate (PDF)
                            </div>
                            <div className="card-body embed-responsive embed-responsive-4by3">
                              <iframe
                                src="/pdf/dummy.pdf"
                                title="Product Certificate"
                                className="embed-responsive-item"
                              ></iframe>
                            </div>
                          </div>
                        </div>

                        {/* Video Panel */}
                        <div className="col-md-12">
                          <div
                            className="card"
                            style={{
                              alignItems: "center",
                              justifyContent: "center",
                            }}
                          >
                            <div
                              className="card-header"
                              style={{
                                color: "var(--main-color)",
                                fontFamily: "outfit",
                                textAlign: "center",
                              }}
                            >
                              Product Video
                            </div>
                            <div
                              className="card-body embed-responsive embed-responsive-16by9"
                              style={{
                                width: "100%",
                                height: "100%",
                                minHeight: "300px",
                                alignItems: "center",
                                justifyContent: "center",
                              }}
                            >
                              <iframe
                                src="https://www.youtube.com/embed/dQw4w9WgXcQ"
                                title="Product Video"
                                allowFullScreen
                                className="embed-responsive-item"
                                style={{
                                  width: "100%",
                                  height: "100%",
                                  minHeight: "250px",
                                }}
                              ></iframe>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                {/* ... [Your product-reviews and pro-banner JSX - remove jQuery/inline scripts] ...  */}
              </div>
            ))}
          </div>
        </div>
      </main>

      {/* ... [Your footer JSX - replace jQuery/inline scripts] ... */}
    </div>
  );
};

export default Pair;

// File: \srk assignment\Shivam\my-diamond-app\pages\privacy-policy.js
import React, { useState, useEffect } from "react";
import Head from "next/head";
import Link from "next/link";
import MainSlider from "@/components/MainSlider";
import Breadcrumb from "../components/Breadcrumb";
import BlogSlider from "@/components/BlogSlider";
import Footer from "../components/Footer";
import Header from "../components/Header";
import Category from "../components/Category";
import axios from "axios";

const TermsConditions = () => {
  const [isLoadingSlider, setIsLoadingSlider] = useState(true);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [errorSlider, setErrorSlider] = useState(null);
  const [page, setPage] = useState({});
  useEffect(() => {
    fetchData();
  }, []);
  const fetchData = async () => {
    setIsLoading(true);
    setError(null);

    try {
      const response = await axios.get(
        "/api/pages?slug=privacy-policy"
      );
      console.log("response", response);
      if (response.status === 200) {
        if(response.data.data.length>0){
          setPage(response.data.data[0]);
        }
       
      } else {
        console.error("Error fetching products:", response.data.error);
        setError("Error fetching products");
      }
    } catch (error) {
      console.error("Error fetching products:", error);
      setError("An error occurred");
    } finally {
      setIsLoading(false);
    }
  };
  return (
    <div>
      <>
        <Header />
        <div className="contact-top-bg pb-30">
          <div className="container">
            <Breadcrumb name={"Privacy Policy"} />
          </div>
        </div>
        <div className="information">
          <div id="information-information" className="container">
            {/* Breadcrumb */}
            {/* Breadcrumb end */}
            <div className="row">
              <div id="content" className="col">
                <h1>{page.title}</h1>
                
                <div className="row" dangerouslySetInnerHTML={{ __html: page.description }}></div>
              </div>
            </div>
          </div>
        </div>
        <Footer/>
      </>
    </div>
  );
};

export default TermsConditions;

// File: \srk assignment\Shivam\my-diamond-app\pages\search.js
import axios from "axios";
import { useRouter } from "next/router";
import { useEffect, useState, useRef } from "react";
import { useSelector } from "react-redux";
import { Skeleton, SkeletonCircle, SkeletonText } from "@chakra-ui/react";
import { ChevronDownIcon } from "@chakra-ui/icons";
import Link from "next/link";
import Header from "../components/Header";

const SearchResults = () => {
  const router = useRouter();
  const filters = useSelector((state) => state.filters);
  const [solitaires, setSolitaires] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [showAllSolitaires, setShowAllSolitaires] = useState(false);
  const [error, setError] = useState(null);
  const [showLoading, setShowLoading] = useState(true);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1); // To track total pages
  const [isFetching, setIsFetching] = useState(false);
  const [isNearBottom, setIsNearBottom] = useState(false);
  const solitairesPerPage = 15;

  const fetchSolitaires = async (pageNumber = currentPage) => {
    // if (isFetching) return;
    setIsLoading(true);
    setShowLoading(true);
    // setIsFetching(true);
    try {
      const response = await axios.get("/api/searchsolitaire", {
        params: {
          pageNumber: pageNumber,
          pageSize: solitairesPerPage,
        },
      });
      // console.log("response", response);
      if (response.data.statusid === 1) {
        console.log("solitaires", response.data.solitaires);
        setSolitaires((prevSolitaires) => [
          ...prevSolitaires,
          ...response.data.solitaires,
        ]);
        // console.log("after set solitaires", solitaires);
        // setTotalPages(
        //   Math.ceil(Number(response.data.totalcount) / solitairesPerPage)
        // );
      }
    } catch (error) {
      console.error("Error fetching solitaires:", error);
      setError("Error fetching solitaires. Please try again later.");
    } finally {
      setIsLoading(false);
      setShowLoading(false);
      setIsFetching(false);
    }
  };

  useEffect(() => {
    setShowLoading(true);
    const timer = setTimeout(() => {
      setShowLoading(false);
    }, 500);
    return () => clearTimeout(timer);
  }, [currentPage, showAllSolitaires]);

  useEffect(() => {
    // Clear callbackUrl from query parameters
    if (router.query.callbackUrl) {
      router.replace(
        {
          pathname: router.pathname,
          query: {}, // Remove all query parameters
        },
        undefined,
        { shallow: true }
      );
    }
  }, [router]); // Run this effect when the router changes

  const [hasFetchedData, setHasFetchedData] = useState(false);

  useEffect(() => {
    // if (!hasFetchedData) {
    // Only fetch if data hasn't been fetched yet
    fetchSolitaires();
    // setHasFetchedData(true);
    // }
  }, []);

  const isSolitaireMatch = (solitaire) => {
    const caratMatch = filters.carat.some((caratValue) => {
      if (typeof caratValue === "number") {
        return solitaire.Carat <= caratValue;
      }
      return false;
    });

    const validFilters = Object.fromEntries(
      Object.entries(filters).map(([key, values]) => [
        key,
        Array.isArray(values) && values.length > 0
          ? values.filter((value) => value !== undefined)
          : values,
      ])
    );

    const shapeMatch =
      validFilters.shape.length > 0 &&
      validFilters.shape.includes(solitaire.ShapeName);
    const colorMatch =
      validFilters.color.length > 0 &&
      validFilters.color.includes(solitaire.ColorName);
    const fluorMatch =
      validFilters.fluor.length > 0 &&
      validFilters.fluor.includes(solitaire.FluorName);
    const clarityMatch =
      validFilters.clarity.length > 0 &&
      validFilters.clarity.includes(solitaire.PurityName);
    const cutMatch =
      validFilters.cut.length > 0 &&
      validFilters.cut.includes(solitaire.CutName);
    const labMatch =
      validFilters.lab.length > 0 &&
      validFilters.lab.includes(solitaire.LabName);
    const polishMatch =
      validFilters.polish.length > 0 &&
      validFilters.polish.includes(solitaire.PolishName);
    const symmMatch =
      validFilters.symm.length > 0 &&
      validFilters.symm.includes(solitaire.SymmetryName);
    const locationMatch =
      validFilters.location.length > 0 &&
      validFilters.location.includes(solitaire.LocationName);

    return (
      caratMatch ||
      shapeMatch ||
      colorMatch ||
      fluorMatch ||
      clarityMatch ||
      cutMatch ||
      labMatch ||
      polishMatch ||
      symmMatch ||
      locationMatch
    );
  };

  // Filter solitaires after fetching
  const matchedSolitaires = solitaires.filter(isSolitaireMatch);
  const indexOfLastSolitaire = currentPage * solitairesPerPage;
  const indexOfFirstSolitaire = indexOfLastSolitaire - solitairesPerPage;
  const currentSolitaires = showAllSolitaires
    ? solitaires.slice(indexOfFirstSolitaire, indexOfLastSolitaire)
    : matchedSolitaires.slice(indexOfFirstSolitaire, indexOfLastSolitaire);

  const handleSort = (column) => {
    // ... [Your existing sorting logic] ...
  };

  // const fetchNextPage = () => {
  //   if (currentPage < totalPages && hasFetchedData && !isFetching) {
  //     setCurrentPage((prevPage) => prevPage + 1);
  //     fetchSolitaires(currentPage + 1);
  //   }
  // };

  // // Scroll to bottom listener for lazy loading
  // const scrollRef = useRef(null);
  // useEffect(() => {
  //   const handleScroll = () => {
  //     if (scrollRef.current) {
  //       const { scrollTop, clientHeight, scrollHeight } = scrollRef.current;

  //       console.log("Scroll Top:", scrollTop);
  //       console.log("Client Height:", clientHeight);
  //       console.log("Scroll Height:", scrollHeight);

  //       // Check if the user has scrolled within a certain distance from the bottom
  //       const threshold = 10; // Adjust this threshold as needed

  //       // Set the isNearBottom flag when near the bottom
  //       if (scrollHeight - scrollTop - clientHeight <= threshold) {
  //         setIsNearBottom(true);
  //         setTotalPages((prevTotalPages) => prevTotalPages + 1);
  //       } else {
  //         setIsNearBottom(false);
  //       }
  //     }
  //   };

  //   if (scrollRef.current) {
  //     scrollRef.current.addEventListener("scroll", handleScroll);

  //     return () => {
  //       if (scrollRef.current) {
  //         scrollRef.current.removeEventListener("scroll", handleScroll);
  //       }
  //     };
  //   }
  // }, []); // No dependencies needed here

  // useEffect for fetching next page
  // useEffect(() => {
  //   if (
  //     isNearBottom &&
  //     currentPage < totalPages &&
  //     hasFetchedData &&
  //     !isFetching
  //   ) {
  //     console.log("Reached the bottom! Fetching next page...");
  //     fetchNextPage();
  //   }
  // }, [isNearBottom]);

  const uniqueSolitaires = matchedSolitaires.reduce((acc, solitaire) => {
    if (!acc.some((item) => item.SolitaireID === solitaire.SolitaireID)) {
      acc.push(solitaire);
    }
    return acc;
  }, []);

  const uniqueAllSolitaires = solitaires.reduce((acc, solitaire) => {
    if (!acc.some((item) => item.SolitaireID === solitaire.SolitaireID)) {
      acc.push(solitaire);
    }
    return acc;
  }, []);

  const handleMoreClick = () => {
    setCurrentPage((prevPage) => prevPage + 1);
    fetchSolitaires(currentPage + 1);
  };

  // console.log(" matched  solitaires", matchedSolitaires);
  return (
    <div style={{ width: "100vw" }}>
      <Header />
      <div
        className="container-fluid mt-5"
        style={{
          minHeight: "100vh",
          display: "flex",
          flexDirection: "column",
          justifyContent: "space-between",
          padding: "0px",
        }}
      >
        <h1
          className="mb-4 text-white"
          style={{ textAlign: "center", color: "var(--main-color) !important" }}
        >
          Search Results
        </h1>
        {isLoading && <p className="text-center text-white">Loading...</p>}
        {error && <p className="text-center text-danger">{error}</p>}
        <div className="row" style={{ overflowY: "auto" }}>
          {/* Skeleton While Loading */}
          {showLoading && (
            <div className="row">
              {[...Array(solitairesPerPage)].map((_, index) => (
                <div key={index} className="col-md-3 col-lg-2 mb-4">
                  <div className="product-block cless">
                    <div className="blogshadow blog-thumbnail">
                      <div className="card-body">
                        <Skeleton height="150px" />
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
          {!showLoading &&
            (showAllSolitaires ? uniqueAllSolitaires : uniqueSolitaires).map(
              (solitaire) => (
                <div
                  key={solitaire.SolitaireID}
                  className="col-6 col-sm-6 col-md-3 col-lg-3 mb-4"
                >
                  <div className="product-block cless">
                    <div
                      className="blogshadow blog-thumbnail"
                      style={{
                        border: "0px", // Remove the border
                        boxShadow: "0 4px 8px rgba(0, 0, 0, 0.1)", // Add a subtle box-shadow
                        borderRadius: "20px", // Maintain the border-radius for a smooth look
                      }}
                    >
                      <div className="blog-left">
                        <div
                          className="workdo-blog-image"
                          style={{
                            height: "201px",
                            display: "flex",
                            overflow: "hidden",
                            borderTopLeftRadius: "20px",
                            borderTopRightRadius: "20px",
                            backgroundColor: "#ffffff",
                            justifyContent: "center",
                            alignItems: "center",
                          }}
                        >
                          {solitaire.Image1 && (
                            <img
                              src={solitaire.Image1}
                              alt={`Solitaire  ${solitaire.SolitaireID}`}
                              className="img-fluid"
                              style={{ maxWidth: "100%", height: "auto" }}
                            />
                          )}
                          <div className="blog-post-image-hover"></div>
                        </div>
                      </div>
                      <div className="blog-right">
                        <h4>
                          <a href="#">{solitaire.SolitaireName}</a>
                        </h4>
                        <div className="blog-desc">
                          {/* <p className="card-text">Shape: {solitaire.ShapeName}</p> */}
                          <p className="card-text">Carat: {solitaire.Carat}</p>
                          <p className="card-text">
                            Description: Lorem ipsum dolor sit amet, consectetur
                            adipiscing elit.
                          </p>
                        </div>
                        <div className="blog-date blog-bottom">
                          <div className="read_link">
                            <Link
                              href={`/${solitaire.Slug}`}
                              className="btn btn-primary read_more"
                            >
                              View Details
                            </Link>
                          </div>
                          {/*  Add to Cart Button with isInCart Logic  */}
                          {/* {cartItems.some(
                            (item) => item.SolitaireID === solitaire.SolitaireID
                          ) ? (
                            <button
                              className="btn btn-primary"
                              disabled
                              style={{ fontSize: "0.7rem" }}
                            >
                              Added to Cart
                            </button>
                          ) : (
                            <button
                              className="btn btn-primary"
                              onClick={() => handleAddToCart(solitaire)}
                            >
                              Add to Cart
                            </button>
                          )} */}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )
            )}
          {console.log("current page", currentPage, "total pages", totalPages)}
          {!showLoading &&
            currentPage === totalPages &&
            solitaires.length > 0 && (
              <div className="col-md-12 text-center mt-4">
                <p
                  className="text-muted small"
                  style={{ fontFamily: "outfit" }}
                >
                  No more solitaires to show.
                </p>
              </div>
            )}
        </div>
        {/* "No Results" Message */}
        {!showLoading && solitaires.length === 0 && (
          <div className="col-md-12">
            <p className="alert alert-warning">NO MATCHING SOLITAIRE FOUND</p>
          </div>
        )}
        {/* "More" Button */}
        {
          <div className="row mt-3">
            <div className="col-md-12 text-center">
              <button
                onClick={handleMoreClick}
                style={{
                  backgroundColor: "black",
                  color: "var(--sub-color)",
                  borderRadius: "20px",
                  fontFamily: "Outfit, sans-serif",
                }}
                className="btn btn-secondary"
                sx={{
                  "&:hover": {
                    backgroundColor: "var(--sub-color)",
                    color: "black",
                  },
                }}
              >
                More <ChevronDownIcon />
              </button>
            </div>
          </div>
        }
        {/* Toggle Button (Removed Pagination) */}
        <div className="row mt-3">
          <div className="col-md-4">
            <button
              onClick={() => setShowAllSolitaires(!showAllSolitaires)}
              className="btn btn-secondary btn-block"
              style={{
                backgroundColor: "black",
                color: "var(--sub-color)",
                borderRadius: "20px",
                fontFamily: "Outfit, sans-serif",
              }}
              sx={{
                "&:hover": {
                  backgroundColor: "var(--sub-color)",
                  color: "black",
                },
              }}
            >
              {showAllSolitaires
                ? "Hide All Solitaires"
                : "View All Solitaires"}
            </button>
          </div>
        </div>{" "}
      </div>
    </div>
  );
};

export default SearchResults;

// File: \srk assignment\Shivam\my-diamond-app\pages\shipping-policy.js
import React, { useState, useEffect } from "react";
import Head from "next/head";
import Link from "next/link";
import MainSlider from "@/components/MainSlider";
import Breadcrumb from "../components/Breadcrumb";
import BlogSlider from "@/components/BlogSlider";
import Footer from "../components/Footer";
import Header from "../components/Header";
import Category from "../components/Category";
import axios from "axios";

const ShippingPolicy = () => {
  const [isLoadingSlider, setIsLoadingSlider] = useState(true);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [errorSlider, setErrorSlider] = useState(null);
  const [page, setPage] = useState({});
  useEffect(() => {
    fetchData();
  }, []);
  const fetchData = async () => {
    setIsLoading(true);
    setError(null);

    try {
      const response = await axios.get(
        "/api/pages?slug=shipping-policy"
      );
      console.log("response", response);
      if (response.status === 200) {
        if(response.data.data.length>0){
          setPage(response.data.data[0]);
        }
       
      } else {
        console.error("Error fetching products:", response.data.error);
        setError("Error fetching products");
      }
    } catch (error) {
      console.error("Error fetching products:", error);
      setError("An error occurred");
    } finally {
      setIsLoading(false);
    }
  };
  return (
    <div>
      <>
        <Header />
        <div className="contact-top-bg pb-30">
          <div className="container">
            <Breadcrumb name={"Privacy Policy"} />
          </div>
        </div>
        <div className="information">
          <div id="information-information" className="container">
            {/* Breadcrumb */}
            {/* Breadcrumb end */}
            <div className="row">
              <div id="content" className="col">
                <h1>{page.title}</h1>
                
                <div className="row" dangerouslySetInnerHTML={{ __html: page.description }}></div>
              </div>
            </div>
          </div>
        </div>
        <Footer/>
      </>
    </div>
  );
};

export default ShippingPolicy;

// File: \srk assignment\Shivam\my-diamond-app\pages\solitaire.js
// pages/index.js
import { useState, useEffect, useRef } from "react";
import { useRouter } from "next/router";
import { useSession, signIn, signOut } from "next-auth/react";
import { useDispatch, useSelector } from "react-redux";
import { setFilter, resetFilters } from "../filterSlice";
import {
  Box,
  Flex,
  Heading,
  Button,
  SimpleGrid,
  useDisclosure,
  Drawer,
  DrawerBody,
  DrawerOverlay,
  DrawerContent,
  DrawerCloseButton,
  DrawerHeader,
  useBreakpointValue,
  Text,
  Grid,
  GridItem,
} from "@chakra-ui/react";
import { ChevronDownIcon, HamburgerIcon } from "@chakra-ui/icons";
import Image from "next/image";
import vercel from "../public/next.svg";
import Link from "next/link";
// Components
import Sidebar from "../components/Sidebar";
import DiamondShape from "../components/DiamondShape";
import FilterSection from "../components/FilterSection";
import {
  getCartItemsFromLocalStorage,
  addToCart,
  removeFromCart,
  updateCartItemQuantity,
} from "../utils/cartfns";
import SearchBar from "@/components/SearchBar";

import axios from "axios";

const Solitaire = () => {
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);
  // const { isOpen, onOpen, onClose } = useDisclosure();
  const router = useRouter();
  const { data: session } = useSession();
  const dispatch = useDispatch();
  const filtersFromRedux = useSelector((state) => state.filters); // Get filters from Redux store
  const [shapes, setShapes] = useState([]);
  const [loadingShapes, setLoadingShapes] = useState(true);
  const [carats, setCarats] = useState([]);
  const [colors, setColors] = useState([]);
  const [flours, setFlours] = useState([]);
  const [purities, setPurities] = useState([]);
  const [cuts, setCuts] = useState([]);
  const [labs, setLabs] = useState([]);
  const [polishs, setPolishs] = useState([]);
  const [symmetries, setSymmetries] = useState([]);
  const [locations, setLocations] = useState([]);
  const [totalCount, setTotalCount] = useState(0); // New state for total count
  const [cartItems, setCartItems] = useState([]);
  const [cartDropdownOpen, setCartDropdownOpen] = useState(false); // For dropdown
  const [isOpen, setIsOpen] = useState(false);

  const toggleDrawer = () => {
    setIsOpen(!isOpen);
  };
  useEffect(() => {
    const updateCart = () => {
      setCartItems(getCartItemsFromLocalStorage());
    };

    window.addEventListener("storage", updateCart);
    return () => window.removeEventListener("storage", updateCart);
  }, []);

  useEffect(() => {
    setCartItems(getCartItemsFromLocalStorage());
  }, []);

  // Function to remove item from cart and update state
  const handleRemoveFromCart = (solitaireId) => {
    removeFromCart(solitaireId);
    setCartItems(getCartItemsFromLocalStorage());
  };

  // Toggle the cart dropdown
  const toggleCartDropdown = () => {
    setCartDropdownOpen(!cartDropdownOpen);
  };
  // Calculate subtotal and total
  const subTotal = cartItems.reduce(
    (total, item) => total + item.Price * item.quantity,
    0
  );
  const total = subTotal;

  const sidebarWidth = useBreakpointValue({
    base: "60px",
    md: isSidebarOpen ? "200px" : "60px",
  });

  const sidebarContainerRef = useRef(null);

  const toggleSidebar = () => {
    setIsSidebarOpen(!isSidebarOpen);
  };

  useEffect(() => {
    setSelectedFilters(filtersFromRedux);
  }, [filtersFromRedux]);

  useEffect(() => {
    fetchAllFilterData();
  }, []);

  const fetchAllFilterData = async () => {
    setLoadingShapes(true);
    // setError(null); // Reset error state

    try {
      const response = await axios.get("/api/solitaire");
      // console.log("fetch all filter data response:", response);
      if (response.status === 200) {
        setShapes(response.data.shapes);
        setCarats(response.data.carats);
        setColors(response.data.colors);
        setFlours(response.data.flours);
        setPurities(response.data.purities);
        setCuts(response.data.cuts);
        setLabs(response.data.labs);
        setPolishs(response.data.polishs);
        setSymmetries(response.data.symmetries);
        setLocations(response.data.locations);
        setTotalCount(response.data.totalCount);
      } else {
        console.error("Error fetching filter data:", response.data.error);
        // setError("Error fetching filter data.");
      }
    } catch (error) {
      console.error("Error fetching all filter data:", error);
      // setError("An error occurred. Please try again.");
    } finally {
      setLoadingShapes(false);
    }
  };

  // useEffect(() => {
  //   if (sidebarWidth !== "60px") {
  //     onClose();
  //   }
  // }, [sidebarWidth, onClose]);

  const [selectedFilters, setSelectedFilters] = useState({
    carat: [],
    fluor: [],
    cut: [],
    polish: [],
    color: [],
    clarity: [],
    lab: [],
    symm: [],
    location: [],
    shape: [], // Make sure 'shape' is in your selectedFilters
  });

  const filters = {
    // Define the filters object
    carat: selectedFilters.carat,
    fluor: selectedFilters.fluor,
    cut: selectedFilters.cut,
    polish: selectedFilters.polish,
    color: selectedFilters.color,
    clarity: selectedFilters.clarity,
    lab: selectedFilters.lab,
    symm: selectedFilters.symm,
    location: selectedFilters.location,
    shape: selectedFilters.shape,
  };

  const handleFilterChange = (filterType, value) => {
    setSelectedFilters((prevFilters) => {
      const filterValues = prevFilters[filterType] || [];

      const isValueSelected = filterValues.includes(value);

      const updatedFilterValues = isValueSelected
        ? filterValues.filter((val) => val !== value)
        : [...filterValues, value];

      return {
        ...prevFilters,
        [filterType]: updatedFilterValues,
      };
    });
  };
  useEffect(() => {
    console.log("Selected Filters:", selectedFilters);
  }, [selectedFilters]);

  const handleSearch = () => {
    console.log("Search Filters:", selectedFilters);

    // Helper function to get the name from an ID
    const getNameFromId = (filterType, id) => {
      switch (filterType) {
        case "carat":
          return carats.find((c) => c.CaratID === id)?.HighLimit; // Return the high limit of the carat range
        case "fluor":
          return flours.find((f) => f.FluorID === id)?.FluorName;
        case "cut":
          return cuts.find((c) => c.CutID === id)?.CutName;
        case "polish":
          return polishs.find((p) => p.PolishID === id)?.PolishName;
        case "color":
          return colors.find((c) => c.ColorID === id)?.ColorName;
        case "clarity":
          return purities.find((p) => p.PurityID === id)?.PurityName;
        case "lab":
          return labs.find((l) => l.LabID === id)?.LabName;
        case "symm":
          return symmetries.find((s) => s.SymmetryID === id)?.SymmetryName;
        case "location":
          return locations.find((l) => l.LocationID === id)?.LocationName;
        case "shape":
          return shapes.find((s) => s.ShapeID === id)?.ShapeName;
        default:
          return null;
      }
    };

    // Dispatch filter names to Redux
    dispatch(
      setFilter({
        filterType: "carat",
        values: selectedFilters.carat.map((id) => getNameFromId("carat", id)),
      })
    );
    dispatch(
      setFilter({
        filterType: "fluor",
        values: selectedFilters.fluor.map((id) => getNameFromId("fluor", id)),
      })
    );
    dispatch(
      setFilter({
        filterType: "cut",
        values: selectedFilters.cut.map((id) => getNameFromId("cut", id)),
      })
    );
    dispatch(
      setFilter({
        filterType: "polish",
        values: selectedFilters.polish.map((id) => getNameFromId("polish", id)),
      })
    );
    dispatch(
      setFilter({
        filterType: "color",
        values: selectedFilters.color.map((id) => getNameFromId("color", id)),
      })
    );
    dispatch(
      setFilter({
        filterType: "clarity",
        values: selectedFilters.clarity.map((id) =>
          getNameFromId("clarity", id)
        ),
      })
    );
    dispatch(
      setFilter({
        filterType: "lab",
        values: selectedFilters.lab.map((id) => getNameFromId("lab", id)),
      })
    );
    dispatch(
      setFilter({
        filterType: "symm",
        values: selectedFilters.symm.map((id) => getNameFromId("symm", id)),
      })
    );
    dispatch(
      setFilter({
        filterType: "location",
        values: selectedFilters.location.map((id) =>
          getNameFromId("location", id)
        ),
      })
    );
    dispatch(
      setFilter({
        filterType: "shape",
        values: selectedFilters.shape.map((id) => getNameFromId("shape", id)),
      })
    );
    // Add your search logic here
    // if (session) {
    //   // Authenticated user - redirect to the "search results" page
    //   router.push({
    //     pathname: "/search", // Or your desired results page
    //     query: filters, // Pass filters in the query string
    //   });
    // } else {
    //   // Unauthenticated user - redirect to login with callback URL
    //   router.push({
    //     pathname: "/auth/login",
    //     query: { callbackUrl: router.asPath }, // Pass current URL as callback
    //   });
    // }
    router.push({
      pathname: "/search", // Or your desired results page
      // query: filters, // Pass filters in the query string
    });
  };

  const handleNavigation = () => {
    if (session) {
      if (session.user.role === "admin") {
        router.push("/admin/dashboard");
      } else {
        router.push("/user/dashboard");
      }
    } else {
      router.push("/auth/login");
    }
  };

  return (
    <Box backgroundColor={"transparent"}>
      {/* Header */}
      {/* <Flex
        backgroundColor="blue.700"
        p={2}
        align="center"
        position={"-webkit-sticky"}
        top={0}
        right={0}
        ml={{ base: 0, md: isSidebarOpen ? "205px" : "50px" }}
        transition="margin-left 0.3s, width 0s"
        overflowX={"hidden"}
        width={{
          base: "100%",
          md: isSidebarOpen ? "calc(100% - 205px)" : "calc(100% - 50px)",
        }}
        zIndex={100}
        // width="100%"
        justifyContent="space-between" // Add justifyContent
      >
        <Flex align="center">
          {" "}
          {/* Wrap HamburgerIcon and Image in a Flex */}
      {/* <HamburgerIcon
            display={{ base: "block", md: "none" }}
            onClick={onOpen}
            color={"white"}
          />
          <Image
            src={vercel}
            alt="Logo"
            width={100}
            height={50}
            style={{ marginLeft: "20px", marginRight: "20px" }}
          />
          <SearchBar />
        </Flex> */}
      {/* {session ? (
          <Button colorScheme={"blackAlpha"} onClick={() => signOut()}>
            Logout
          </Button>
        ) : (
          <Button
            // mr={50}
            colorScheme="whiteAlpha"
            onClick={() => {
              dispatch(
                setFilter({
                  filterType: "carat",
                  values: selectedFilters.carat,
                })
              );
              dispatch(
                setFilter({
                  filterType: "fluor",
                  values: selectedFilters.fluor,
                })
              );
              dispatch(
                setFilter({
                  filterType: "length",
                  values: selectedFilters.length,
                })
              );
              dispatch(
                setFilter({
                  filterType: "polish",
                  values: selectedFilters.polish,
                })
              );
              dispatch(
                setFilter({
                  filterType: "color",
                  values: selectedFilters.color,
                })
              );
              dispatch(
                setFilter({
                  filterType: "clarity",
                  values: selectedFilters.clarity,
                })
              );
              dispatch(
                setFilter({
                  filterType: "lab",
                  values: selectedFilters.lab,
                })
              );
              dispatch(
                setFilter({
                  filterType: "symm",
                  values: selectedFilters.symm,
                })
              );
              dispatch(
                setFilter({
                  filterType: "location",
                  values: selectedFilters.location,
                })
              );
              dispatch(
                setFilter({
                  filterType: "shape",
                  values: selectedFilters.shape,
                })
              );

              router.push({
                pathname: "/auth/login",
                query: { callbackUrl: router.asPath },
              });
            }}
          >
            Login
          </Button>
        )}
      </Flex>  */}
      <header>
        <div className="top-header hidden-xs" style={{ fontFamily: "outfit" }}>
          <div className="container">
            <div className="row">
              <div className="topbspinner">
                <div className="col-md-6 col-xs-12">
                  <div className="ebook">
                    <div className="ebook-ctn">
                      <h4 style={{ opacity: 0.7 }}>
                        Monday - Friday: 8:00 AM - 9:00 PM
                      </h4>
                    </div>
                  </div>
                </div>
                <div className="col-md-6 col-xs-12">
                  <div className="custom-link">
                    <a href="index.php?route=information/information&language=en-gb&information_id=1">
                      About
                    </a>
                    <a href="index.php?route=information/sitemap&language=en-gb">
                      Site Map
                    </a>
                    <a href="index.php?route=product/manufacturer&language=en-gb">
                      Brand
                    </a>
                    <a href="index.php?route=information/contact&language=en-gb">
                      Contact
                    </a>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div className="homemenu">
          <div className="container">
            <div className="row">
              <div className="sub_megamenu">
                <div className="container_wb_megamenu">
                  <div
                    id="stamenu"
                    className={` ${isOpen ? "active" : ""} menu-fixed`}
                  >
                    <nav id="menu" className="navbar">
                      <div className="navbar-expand-md">
                        <button
                          type="button"
                          className="btn-navbar navbar-toggler"
                          onClick={toggleDrawer}
                          data-bs-toggle="collapse"
                          data-bs-target=".navbar-ex1-collapse"
                        >
                          <i className="fa fa-bars" />
                        </button>
                      </div>
                      <div id="wr-menu-icon ">
                        <div
                          className="wrmenu collapsed"
                          data-bs-toggle="collapse"
                          data-bs-target="#under-menu"
                          aria-expanded="false"
                          aria-controls="collapseExample"
                        ></div>
                      </div>
                      <div
                        id="mySidenav"
                        className={`sidenav menu-vertical ${
                          isOpen ? "open" : ""
                        }`}
                      >
                        <div id="under-menu" className="">
                          <div className="close-nav">
                            <span
                              className="categories"
                              style={{ color: "var(--main-color)" }}
                            >
                              Categories
                            </span>
                            <button
                              type="button"
                              className=" float-end"
                              onClick={toggleDrawer}
                            >
                              <i className="fa fa-close" />
                            </button>
                          </div>
                          <div className="navbar-collapse navbar-ex1-collapse">
                            <ul className="nav navbar-nav">
                              <li className="nav-item">
                                <Link href={"/solitaire"} className="nav-item">
                                  Solitaire
                                </Link>
                              </li>
                              <li className="nav-item">
                                <a
                                  href="https://opencart.workdo.io/diamond/index.php?route=product/category&language=en-gb&path=60"
                                  className="nav-link"
                                >
                                  {/*<img src="https://opencart.workdo.io/diamond/image/cache/catalog/menu-icon/meat-fish-14x14.png" alt="Amethyst" title="Amethyst"> */}{" "}
                                  Amethyst
                                </a>
                              </li>
                              <li className="nav-item">
                                <a
                                  href="https://opencart.workdo.io/diamond/index.php?route=product/category&language=en-gb&path=67"
                                  className="nav-link"
                                >
                                  {/*<img src="" alt="Blue Sapphire" title="Blue Sapphire"> */}{" "}
                                  Blue Sapphire
                                </a>
                              </li>
                            </ul>
                          </div>
                        </div>
                      </div>
                    </nav>
                    <div
                      className="w3-overlay w3-animate-opacity"
                      onclick={toggleDrawer}
                      style={{
                        cursor: "pointer",
                        display: isOpen ? "block" : "none",
                      }}
                      id="myOverlay"
                    />
                  </div>
                </div>
              </div>
              <div className="col-md-5 head-manu">
                <div className="top-manu">
                  <div className="megamenu">
                    <div className="container_wb_megamenu">
                      <div
                        id="stamenu"
                        // className={` ${isOpen ? "active" : ""} menu-fixed`}
                      >
                        <nav id="menu" className="navbar">
                          <div className="navbar-expand-md">
                            <button
                              type="button"
                              className="btn-navbar navbar-toggler"
                              onClick={toggleDrawer}
                              data-bs-toggle="collapse"
                              data-bs-target=".navbar-ex1-collapse"
                            >
                              <i className="fa fa-bars" />
                            </button>
                          </div>
                          <div id="wr-menu-icon ">
                            <div
                              className="wrmenu collapsed"
                              data-bs-toggle="collapse"
                              data-bs-target="#under-menu"
                              aria-expanded="false"
                              aria-controls="collapseExample"
                            ></div>
                          </div>
                          <div
                            id="mySidenav"
                            className={`sidenav menu-vertical ${
                              isOpen ? "open" : ""
                            }`}
                          >
                            <div id="under-menu" className="">
                              <div className="close-nav">
                                <span
                                  className="categories"
                                  style={{ color: "var(--main-color)" }}
                                >
                                  Categories
                                </span>
                                <button
                                  type="button"
                                  className=" float-end"
                                  onClick={toggleDrawer}
                                >
                                  <i className="fa fa-close" />
                                </button>
                              </div>
                              <div className="navbar-collapse navbar-ex1-collapse">
                                <ul className="nav navbar-nav">
                                  <li className="nav-item">
                                    <Link
                                      href={"/solitaire"}
                                      className="nav-item"
                                    >
                                      Solitaire
                                    </Link>
                                  </li>
                                  <li className="nav-item">
                                    <a
                                      href="https://opencart.workdo.io/diamond/index.php?route=product/category&language=en-gb&path=60"
                                      className="nav-link"
                                    >
                                      {/*<img src="https://opencart.workdo.io/diamond/image/cache/catalog/menu-icon/meat-fish-14x14.png" alt="Amethyst" title="Amethyst"> */}{" "}
                                      Amethyst
                                    </a>
                                  </li>
                                  <li className="nav-item">
                                    <a
                                      href="https://opencart.workdo.io/diamond/index.php?route=product/category&language=en-gb&path=67"
                                      className="nav-link"
                                    >
                                      {/*<img src="" alt="Blue Sapphire" title="Blue Sapphire"> */}{" "}
                                      Blue Sapphire
                                    </a>
                                  </li>
                                </ul>
                              </div>
                            </div>
                          </div>
                        </nav>
                        <div
                          className="w3-overlay w3-animate-opacity"
                          onclick={toggleDrawer}
                          style={{
                            cursor: "pointer",
                            // display: isOpen ? "block" : "none",
                          }}
                          id="myOverlay"
                        />
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div className="col-md-2 col-sm-2 text-left header-logo">
                <div id="logo">
                  <Link href="/">
                    <h4 style={{ color: "var(--main-color)" }}>HKSURANA</h4>
                  </Link>
                </div>
              </div>
              <div className="col-md-5 col-sm-5 megamenu_border">
                <div className="main-header">
                  <div className="h-icon">
                    <div id="top-links">
                      <div className="h-search">
                        <div className="top-search">
                          <ul>
                            <li
                              id="search"
                              className="desktop-search d-inline-block"
                            >
                              <div className="d-search">
                                <button
                                  id="search_toggle"
                                  className="search-toggle"
                                  data-toggle="collapse"
                                  onclick="openSearch()"
                                >
                                  <span>Search</span>
                                  <img
                                    src="image/catalog/search.png"
                                    alt="search"
                                  />
                                </button>
                              </div>
                              <div id="search" className="wbSearch">
                                <div id="search_block_top">
                                  <select id="workdo-search-category">
                                    <option value={0}>Categories</option>
                                    <option value={60}>Amethyst</option>
                                    <option value={20}>bead</option>
                                    <option value={27}>
                                      &nbsp;&nbsp;&nbsp;&nbsp;bracelet
                                    </option>
                                    <option value={61}>
                                      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Alexandrite
                                    </option>
                                    <option value={63}>
                                      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fashion
                                    </option>
                                    <option value={67}>Blue Sapphire</option>
                                    <option value={25}>Burma Ruby</option>
                                    <option value={29}>
                                      &nbsp;&nbsp;&nbsp;&nbsp;Citrine
                                    </option>
                                    <option value={65}>
                                      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Colombian
                                      Emerald
                                    </option>
                                    <option value={66}>
                                      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Diamond
                                    </option>
                                    <option value={64}>
                                      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Garnet
                                    </option>
                                    <option value={28}>
                                      &nbsp;&nbsp;&nbsp;&nbsp;Morganite
                                    </option>
                                    <option value={17}>Black Diamond</option>
                                    <option value={68}>Ametrine</option>
                                  </select>
                                  <div className="input-group">
                                    <input
                                      type="text"
                                      name="search"
                                      defaultValue=""
                                      placeholder="Search Product..."
                                      className="search_query form-control input-lg workdo-search"
                                    />
                                    <div className="input-group-btn">
                                      <button
                                        type="button"
                                        className="btn btn-primary btn-lg"
                                      >
                                        <img
                                          src="image/catalog/search.png"
                                          alt="search"
                                        />
                                      </button>
                                      <a
                                        href="javascript:void(0)"
                                        className="closebtn close-nav"
                                        onclick="closeSearch()"
                                      >
                                        <i className="fa fa-close" />
                                      </a>
                                    </div>
                                    {/* workdo Search Start  */}
                                    <div className="workdo-search text-left">
                                      <div
                                        className="workdo-search-loader"
                                        style={{ display: "none" }}
                                      >
                                        <div className="loaders" />
                                      </div>
                                      {/* Add Loader */}
                                      <div className="workdo-search-result">
                                        {/* search results */}
                                      </div>
                                    </div>
                                    {/* workdo Search End  */}
                                  </div>
                                </div>
                              </div>
                            </li>
                          </ul>
                        </div>
                      </div>
                      <ul className="list-inline d-flex user-bg">
                        <li className="userapp" />
                        <li className="huser">
                          <div className="dropdown">
                            <a
                              href=""
                              className="dropdown-toggle huser-drop"
                              data-bs-toggle="dropdown"
                            >
                              <div className="xuser">
                                <img src="image/catalog/huser.svg" alt="user" />
                                <span>My Profile</span>
                                <i className="fa fa-angle-down enaleng" />
                              </div>
                              <div className="xuser-desc d-none">
                                <span>
                                  <span className="d-none d-lg-inline">
                                    My Account
                                  </span>
                                </span>
                              </div>
                            </a>
                            <ul className="dropdown-menu dropdown-menu-right haccount  hlogout">
                              <h5 className="text-left">Your Account</h5>
                              <h6 className="text-left">
                                Access account and manage orders
                              </h6>
                              <li className="acd">
                                <a
                                  href="https://opencart.workdo.io/diamond/index.php?route=account/register&language=en-gb"
                                  className="dropdown-item"
                                >
                                  <i className="fa fa-user-plus" />
                                  Register
                                </a>
                              </li>
                              <li className="acd">
                                <a
                                  href="https://opencart.workdo.io/diamond/index.php?route=account/login&language=en-gb"
                                  className="dropdown-item"
                                >
                                  <i className="fa fa-lock" />
                                  Login
                                </a>
                              </li>
                              <li className="wishcom">
                                <a href="">
                                  <i className="fa fa-compress" />
                                  compare
                                </a>
                              </li>
                              <li className="wishcom">
                                <a href="https://opencart.workdo.io/diamond/index.php?route=account/wishlist&language=en-gb">
                                  <i className="fa fa-heart" />
                                  wishlist
                                </a>
                              </li>
                              <li className="xsla d-inline-block">
                                {" "}
                                <form
                                  action="https://opencart.workdo.io/diamond/index.php?route=common/currency|save&language=en-gb"
                                  method="post"
                                  encType="multipart/form-data"
                                  id="form-currency"
                                >
                                  <div className="dropdown">
                                    <button
                                      className="btn-link dropdown-toggle test"
                                      data-bs-toggle="dropdown"
                                    >
                                      <strong>$</strong>
                                      <span className="d-md-inline">
                                        Currency
                                      </span>{" "}
                                      <i className="fa fa-angle-down" />
                                    </button>
                                    <ul className="dropdown-menu">
                                      <li>
                                        <a href="EUR" className="dropdown-item">
                                          € Euro
                                        </a>
                                      </li>
                                      <li>
                                        <a href="GBP" className="dropdown-item">
                                          £ Pound Sterling
                                        </a>
                                      </li>
                                      <li>
                                        <a href="USD" className="dropdown-item">
                                          $ US Dollar
                                        </a>
                                      </li>
                                    </ul>
                                  </div>
                                  <input
                                    type="hidden"
                                    name="code"
                                    defaultValue=""
                                  />{" "}
                                  <input
                                    type="hidden"
                                    name="redirect"
                                    defaultValue="https://opencart.workdo.io/diamond/index.php?route=common/home"
                                  />
                                </form>
                              </li>
                            </ul>
                            <ul></ul>
                          </div>
                        </li>
                      </ul>
                      <div className="d-inline-block">
                        <span id="header-cart">
                          <div id="cart" className="dropdown btn-block">
                            <button
                              type="button"
                              data-bs-toggle="dropdown"
                              className="btn btn-inverse dropdown-toggle"
                              onClick={toggleCartDropdown}
                              aria-expanded={cartDropdownOpen}
                            >
                              {/* ... [Your existing cart icon and text] ...  */}
                              <div className="xuser">
                                <img src="image/catalog/hcart.svg" alt="cart" />
                              </div>
                              <span className="cartl">
                                <span className="cartt">
                                  {cartItems.reduce(
                                    (acc, item) => acc + item.quantity,
                                    0
                                  )}{" "}
                                </span>
                                <span className="cartna">cart: items</span>
                                <strong>Items</strong>
                              </span>
                            </button>

                            {/* Cart Dropdown (Custom Styled) */}
                            <ul
                              className={`dropdown-menu dropdown-menu-right${
                                cartDropdownOpen ? " show" : ""
                              }`}
                              aria-labelledby="cart"
                              style={{
                                padding: "1rem",
                                maxWidth: "300px",
                                backgroundColor: "rgb(33, 37, 41)", // Dark background color
                                boxShadow: "0 2px 4px rgba(0, 0, 0, 0.1)",
                                border: "1px solid #dee2e6",
                              }}
                            >
                              {cartItems.length === 0 ? (
                                <li className="text-center">
                                  Your shopping cart is empty!
                                </li>
                              ) : (
                                <>
                                  <div
                                    style={{
                                      maxHeight: "250px",
                                      overflowY: "auto",
                                    }}
                                  >
                                    {cartItems.map((item) => (
                                      <div
                                        key={item.SolitaireID}
                                        className="d-flex align-items-center mb-3"
                                      >
                                        <Link href={`/${item.SolitaireID}`}>
                                          <img
                                            src={item.Image1}
                                            alt={
                                              item.ShapeName +
                                              "-" +
                                              item.SolitaireID
                                            }
                                            style={{
                                              width: "50px",
                                              height: "50px",
                                              objectFit: "cover",
                                              marginRight: "10px",
                                            }}
                                          />
                                        </Link>
                                        <div>
                                          <Link href={`/${item.SolitaireID}`}>
                                            <h6
                                              className="mb-0"
                                              style={{
                                                color: "var(--main-color)",
                                                fontFamily: "outfit",
                                              }}
                                            >
                                              {item.ShapeName +
                                                "-" +
                                                item.SolitaireID}
                                            </h6>
                                          </Link>
                                          <span className="text-muted small">
                                            Qty: {item.quantity} x ${item.Price}
                                          </span>
                                        </div>
                                        <button
                                          type="button"
                                          className="btn btn-sm btn-link text-danger ml-auto"
                                          onClick={() =>
                                            handleRemoveFromCart(
                                              item.SolitaireID
                                            )
                                          }
                                        >
                                          <i className="fa fa-times"></i>
                                        </button>
                                      </div>
                                    ))}
                                  </div>

                                  {/* Cart Totals */}
                                  <div className="text-right">
                                    <p className="mb-1">
                                      Subtotal:{" "}
                                      <span className="font-weight-bold">
                                        ${subTotal.toFixed(2)}
                                      </span>
                                    </p>
                                    <p className="mb-1">
                                      Total:{" "}
                                      <span className="font-weight-bold">
                                        ${total.toFixed(2)}
                                      </span>
                                    </p>
                                    <Link
                                      href="/cart"
                                      className="btn btn-primary btn-block"
                                    >
                                      View Cart
                                    </Link>
                                  </div>
                                </>
                              )}
                            </ul>
                          </div>
                        </span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </header>

      <Flex ref={sidebarContainerRef} mt={0}    backgroundColor={"#F2DFCF"}>
        {/* Drawer (Mobile) */}
        {/* <Drawer
          isOpen={isOpen}
          placement="left"
          onClose={onClose}
          size="xs"
          // display={{ base: "block", md: "none", lg: "none" }}
        >
          <DrawerOverlay />
          <DrawerContent>
            <DrawerCloseButton />
            <DrawerHeader>Menu</DrawerHeader>
            <DrawerBody>
              <Sidebar isOpen={isOpen} onClose={onClose} />
            </DrawerBody>
          </DrawerContent>
        </Drawer> */}

        {/* Sidebar (Desktop) */}
        {/* <Sidebar
          isOpen={isSidebarOpen}
          onClose={toggleSidebar}
          onOpen={onOpen}
          top={0}
          width={sidebarWidth}
          display={{ base: "none", md: "block" }}
        /> */}

        {/* Main Content Area */}
        <Box
          flex="1"
          // transform={{
          //   base: "scale(0.9)",
          //   md: "scale(0.9)",
          //   lg: "scale(0.9)",
          // }}
          m={5}
          p={4}
          borderRadius={"20px"}
          backgroundColor={"transparent"}
          ml={{ base: 0, md: isSidebarOpen ? "205px" : "50px" }}
          overflowX="hidden"
          transition="margin-left 0.3s"
          fontFamily="outfit"
        >
          {/* Diamond Shape Section */}
          <Box mb={6}>
            <Heading as="h2" size="md" color="var(--main-color)" mb={5}>
              Shape
            </Heading>
            {loadingShapes ? (
              <Text color="var(--main-color)">Loading shapes...</Text>
            ) : (
              <SimpleGrid columns={{ base: 4, md: 8, lg: 12 }} spacing={4}>
                {shapes ? (
                  shapes.map((shape) => (
                    <DiamondShape
                      key={shape.ShapeID}
                      shape={shape}
                      isSelected={selectedFilters.shape.includes(shape.ShapeID)}
                      onClick={() => {
                        handleFilterChange("shape", shape.ShapeID); // Use handleFilterChange
                      }}
                    />
                  ))
                ) : (
                  <span color="var(--main-color)">error fetching shapes</span>
                )}
              </SimpleGrid>
            )}
          </Box>

          <hr style={{ color: "var(--main-color)", margin: "2px" }} />
          <hr
            style={{
              color: "var(--main-color)",
              margin: "2px",
              marginBottom: "16px",
            }}
          />

          {/* Filters Section - Using Grid for two-column layout */}
          <Grid templateColumns={{ base: "1fr", md: "1fr 1fr" }} gap={6}>
            {/* Column 1 */}
            <GridItem>
              <FilterSection
                label="Carat"
                options={carats.map((carat) => ({
                  label: `${carat.LowLimit} - ${carat.HighLimit}`,
                  value: carat.CaratID,
                }))}
                selectedValues={selectedFilters.carat}
                onFilterChange={(value) => handleFilterChange("carat", value)}
              />
              <FilterSection
                label="Fluor."
                options={flours.map((fluor) => ({
                  label: fluor.FluorName,
                  value: fluor.FluorID,
                }))}
                selectedValues={selectedFilters.fluor}
                onFilterChange={(value) => handleFilterChange("fluor", value)}
              />
              <FilterSection
                label="Cut"
                options={cuts.map((cut) => ({
                  label: cut.CutName,
                  value: cut.CutID,
                }))}
                selectedValues={selectedFilters.cut}
                onFilterChange={(value) => handleFilterChange("cut", value)}
              />
              <FilterSection
                label="Polish"
                options={polishs.map((polish) => ({
                  // Assuming 'polishs' is the correct state variable
                  label: polish.PolishName,
                  value: polish.PolishID,
                }))}
                selectedValues={selectedFilters.polish}
                onFilterChange={(value) => handleFilterChange("polish", value)}
              />
            </GridItem>

            {/* Column 2 */}
            <GridItem>
              <Box mb={4}>
                <Text
                  fontWeight="bold"
                  mb={2}
                  // fontFamily="Playfair Display"
                  color="var(--main-color)"
                >
                  Color
                </Text>
                <FilterSection
                  options={colors.map((color) => ({
                    label: color.ColorName,
                    value: color.ColorID,
                  }))}
                  selectedValues={selectedFilters.color}
                  onFilterChange={(value) => handleFilterChange("color", value)}
                />
              </Box>
              <Box mb={4}>
                <Text
                  fontWeight="bold"
                  mb={2}
                  // fontFamily="Playfair Display"
                  color="var(--main-color)"
                >
                  Purity
                </Text>
                <FilterSection
                  options={purities.map((purity) => ({
                    label: purity.PurityName,
                    value: purity.PurityID,
                  }))}
                  selectedValues={selectedFilters.clarity}
                  onFilterChange={(value) =>
                    handleFilterChange("clarity", value)
                  }
                />
              </Box>
              <Box mb={4}>
                <Text
                  fontWeight="bold"
                  mb={2}
                  // fontFamily="Playfair Display"
                  color="var(--main-color)"
                >
                  Lab
                </Text>
                <FilterSection
                  options={labs.map((lab) => ({
                    label: lab.LabName,
                    value: lab.LabID,
                  }))}
                  selectedValues={selectedFilters.lab}
                  onFilterChange={(value) => handleFilterChange("lab", value)}
                />
              </Box>
              <Box mb={4}>
                <Text
                  fontWeight="bold"
                  mb={2}
                  // fontFamily="Playfair Display"
                  color="var(--main-color)"
                >
                  Symmerty
                </Text>
                <FilterSection
                  options={symmetries.map((symm) => ({
                    label: symm.SymmetryName,
                    value: symm.SymmetryID,
                  }))}
                  selectedValues={selectedFilters.symm}
                  onFilterChange={(value) => handleFilterChange("symm", value)}
                />
              </Box>
              <Box mb={4}>
                <Text
                  fontWeight="bold"
                  mb={2}
                  // fontFamily="Playfair Display"
                  color="var(--main-color)"
                >
                  Location
                </Text>
                <FilterSection
                  options={locations.map((location) => ({
                    label: location.LocationName,
                    value: location.LocationID,
                  }))}
                  selectedValues={selectedFilters.location}
                  onFilterChange={(value) =>
                    handleFilterChange("location", value)
                  }
                />
              </Box>
            </GridItem>
          </Grid>

          <Button
            backgroundColor="black"
            color="var(--sub-color)"
            size="sm"
            mt={4}
            mb={6}
            borderRadius="20px"
            onClick={handleSearch}
            sx={{
              "&:hover": {
                backgroundColor: "var(--sub-color)",
                color: "black",
              },
            }}
          >
            Show Advance Filters
          </Button>

          {/* Search Buttons */}
          <Flex mt={6} justify="flex-end">
            <Button
              backgroundColor="black"
              color="var(--sub-color)"
              mr={2}
              borderRadius="20px"
              sx={{
                "&:hover": {
                  backgroundColor: "var(--sub-color)",
                  color: "black",
                },
              }}
            >
              Cancel
            </Button>
            <Button
              backgroundColor="black"
              color="var(--sub-color)"
              mr={2}
              borderRadius="20px"
              onClick={() => {
                dispatch(resetFilters()); // Reset filters in Redux store
              }}
              sx={{
                "&:hover": {
                  backgroundColor: "var(--sub-color)",
                  color: "black",
                },
              }}
            >
              Reset
            </Button>
            <Button
              backgroundColor="black"
              color="var(--sub-color)"
              borderRadius="20px"
              onClick={() => {
                handleSearch();
              }}
              sx={{
                "&:hover": {
                  backgroundColor: "var(--sub-color)",
                  color: "black",
                },
              }}
            >
              Search
            </Button>
            <Button
              backgroundColor="black"
              color="var(--sub-color)"
              ml={2}
              borderRadius="20px"
              rightIcon={<ChevronDownIcon />}
              onClick={handleSearch} // Redirect on "Save Search"
              sx={{
                "&:hover": {
                  backgroundColor: "var(--sub-color)",
                  color: "black",
                },
              }}
            >
              Save Search
            </Button>
          </Flex>
        </Box>
      </Flex>
    </Box>
  );
};

export default Solitaire;

// File: \srk assignment\Shivam\my-diamond-app\pages\terms-conditions.js
import React, { useState, useEffect } from "react";
import Head from "next/head";
import Link from "next/link";
import MainSlider from "@/components/MainSlider";
import Breadcrumb from "../components/Breadcrumb";
import BlogSlider from "@/components/BlogSlider";
import Footer from "../components/Footer";
import Header from "../components/Header";
import Category from "../components/Category";
import axios from "axios";

const TermsConditions = () => {
  const [isLoadingSlider, setIsLoadingSlider] = useState(true);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [errorSlider, setErrorSlider] = useState(null);
  const [page, setPage] = useState({});
  useEffect(() => {
    fetchData();
  }, []);
  const fetchData = async () => {
    setIsLoading(true);
    setError(null);

    try {
      const response = await axios.get(
        "/api/pages?slug=terms-conditions"
      );
      console.log("response", response);
      if (response.status === 200) {
        if(response.data.data.length>0){
          setPage(response.data.data[0]);
        }
       
      } else {
        console.error("Error fetching products:", response.data.error);
        setError("Error fetching products");
      }
    } catch (error) {
      console.error("Error fetching products:", error);
      setError("An error occurred");
    } finally {
      setIsLoading(false);
    }
  };
  return (
    <div>
      <>
        <Header />
        <div className="contact-top-bg pb-30">
          <div className="container">
            <Breadcrumb name={"Terms & Conditions"} />
          </div>
        </div>
        <div className="information">
          <div id="information-information" className="container">
            {/* Breadcrumb */}
            {/* Breadcrumb end */}
            <div className="row">
              <div id="content" className="col">
                <h1>{page.title}</h1>
                
                <div className="row" dangerouslySetInnerHTML={{ __html: page.description }}></div>
              </div>
            </div>
          </div>
        </div>
        <Footer/>
      </>
    </div>
  );
};

export default TermsConditions;

// File: \srk assignment\Shivam\my-diamond-app\pages\tree.txt


// File: \srk assignment\Shivam\my-diamond-app\pages\[solitaireSlug].js

// File: \srk assignment\Shivam\my-diamond-app\pages\_app.js

import { Provider } from "react-redux";
import { store } from "../store";
import { ChakraProvider } from "@chakra-ui/react";
import { SessionProvider } from "next-auth/react";

import theme from "../lib/theme";

function MyApp({ Component, pageProps: { session, ...pageProps } }) {
  return (
    <Provider store={store}>
      <ChakraProvider theme={theme}>
        {/* Wrap your app with SessionProvider */}
        <SessionProvider session={session}>
          <Component {...pageProps} />
        </SessionProvider>
      </ChakraProvider>
    </Provider>
  );
}

export default MyApp;

// File: \srk assignment\Shivam\my-diamond-app\pages\_document.js
import Document, { Html, Head, Main, NextScript } from "next/document";

class MyDocument extends Document {
  static async getInitialProps(ctx) {
    const originalRenderPage = ctx.renderPage;

    // Run the React rendering logic synchronously
    ctx.renderPage = () =>
      originalRenderPage({
        // Useful for wrapping the whole react tree
        enhanceApp: (App) => App,
        // Useful for wrapping in a per-page basis
        enhanceComponent: (Component) => Component,
      });

    // Run the parent `getInitialProps`, it now includes the custom `renderPage`
    const initialProps = await Document.getInitialProps(ctx);

    return initialProps;
  }

  render() {
    return (
      <Html lang="en">
        <Head>
          <meta charSet="UTF-8" />

          <meta httpEquiv="X-UA-Compatible" content="IE=edge" />

          {/* <base href="https://opencart.workdo.io/diamond/" />
          <meta name="description" content="Product Store" /> */}

          <link
            href="/js/jquery/swiper/css/slick.css"
            rel="stylesheet"
          />
          <link
            href="/js/jquery/swiper/css/slick-theme.css"
            rel="stylesheet"
          />
          <link
            href="/js/font-awesome/css/font-awesome.min.css"
            rel="stylesheet"
            type="text/css"
          />
          <script
            src="/js/jquery/jquery-3.6.0.min.js"
            type="text/javascript"
          ></script>
          <link
            href="/css/bootstrap.css"
            type="text/css"
            rel="stylesheet"
            media="screen"
          />
          <link
            href="/css/fonts/fontawesome/css/all.min.css"
            type="text/css"
            rel="stylesheet"
          />
          <link
            href="/css/stylesheet.css"
            type="text/css"
            rel="stylesheet"
          />

          <script
            type="text/javascript"
            src="/js/jquery/datetimepicker/moment.min.js"
          ></script>
          <script
            type="text/javascript"
            src="/js/jquery/datetimepicker/moment-with-locales.min.js"
          ></script>
          <script
            type="text/javascript"
            src="/js/jquery/datetimepicker/daterangepicker.js"
          ></script>
          <link
            href="/js/jquery/datetimepicker/daterangepicker.css"
            rel="stylesheet"
            type="text/css"
          />

          <link
            href="https://fonts.googleapis.com/css2?family=Outfit:wght@100;200;300;400;500;600;700;800;900&display=swap"
            rel="stylesheet"
          />
          <link
            href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;500;600;700;800;900&display=swap"
            rel="stylesheet"
          />


        </Head>
        <body>
          <Main />
          <NextScript />
        </body>
      </Html>
    );
  }
}

export default MyDocument;

// File: \srk assignment\Shivam\my-diamond-app\pages\admin\dashboard.js
// pages/admin/dashboard.js
import { useSession } from "next-auth/react";
import { useRouter } from "next/router";
import { useEffect } from "react";

const AdminDashboard = () => {
  const router = useRouter();
  const { data: session } = useSession();

  useEffect(() => {
    if (!session || session.user.role !== "admin") {
      // Redirect to login or unauthorized page
      router.push("/auth/login");
    }
  }, [session, router]);

  //  admin dashboard content
  return (
    <div>
      <h1>ADMIN Dashboard</h1>
    </div>
  );
};

export default AdminDashboard;

// File: \srk assignment\Shivam\my-diamond-app\pages\api\auth\[...nextauth].js

// File: \srk assignment\Shivam\my-diamond-app\pages\api\product\category-products.js
// pages/api/products.js
import { callStoredProcedure } from "../db";

export default async (req, res) => {
  if (req.method === "GET") {
    try {
      const { category } = req.query;
      const result = await callStoredProcedure("sp_GetProductsByCategory",{
        category:category
      });

      if (result.status === 1) {
        res.status(200).json({
          products: result.data,
          totalCount: result.total,
        });
      } else {
        throw new Error(result.message);
      }
    } catch (error) {
      console.error(error);
      res.status(500).json({ error: "Error fetching products" });
    }
  } else {
    res.status(405).end(); // Method Not Allowed
  }
};

// File: \srk assignment\Shivam\my-diamond-app\pages\api\product\products-details.js
// pages/api/products.js
import { callStoredProcedure } from "../db";

export default async (req, res) => {
  if (req.method === "GET") {
    try {
      const { product } = req.query;
      const result = await callStoredProcedure("sp_GetProductsBySlug",{
        slug:product
      });

      if (result.status === 1) {
        res.status(200).json({
          products: result.data,
          totalCount: result.total,
        });
      } else {
        throw new Error(result.message);
      }
    } catch (error) {
      console.error(error);
      res.status(500).json({ error: "Error fetching products" });
    }
  } else {
    res.status(405).end(); // Method Not Allowed
  }
};

// File: \srk assignment\Shivam\my-diamond-app\pages\api\product\products.js
// pages/api/products.js
import { callStoredProcedure } from "../db";

export default async (req, res) => {
  if (req.method === "GET") {
    try {
      const result = await callStoredProcedure("sp_GetProductsForSliders");

      if (result.status === 1) {
        res.status(200).json({
          products: result.data,
          totalCount: result.total,
        });
      } else {
        throw new Error(result.message);
      }
    } catch (error) {
      console.error(error);
      res.status(500).json({ error: "Error fetching products" });
    }
  } else {
    res.status(405).end(); // Method Not Allowed
  }
};

// File: \srk assignment\Shivam\my-diamond-app\pages\api\solitairebySlug\[solitaireSlug].js

// File: \srk assignment\Shivam\my-diamond-app\pages\api\blogs.js
import { callStoredProcedure } from "./db";

export default async (req, res) => {
  if (req.method === "GET") {
    try {
      const result = await callStoredProcedure("sp_GetActiveBlogs");

      if (result.status === 1) {
        res.status(200).json({
          blogs: result.data,
          totalCount: result.total,
        });
      } else {
        throw new Error(result.message);
      }
    } catch (error) {
      console.error(error);
      res.status(500).json({ error: "Error fetching blogs." });
    }
  } else {
    res.status(405).end();
  }
};

// File: \srk assignment\Shivam\my-diamond-app\pages\api\categories.js
import { callStoredProcedure } from "./db";

export default async (req, res) => {
  if (req.method === "GET") {
    try {
      const result = await callStoredProcedure("sp_GetCategories");

      if (result.status === 1) {
        res.status(200).json({
          data: result.data,
          totalCount: result.total,
        });
      } else {
        throw new Error(result.message);
      }
    } catch (error) {
      console.error(error);
      res.status(500).json({ error: "Error fetching blogs." });
    }
  } else {
    res.status(405).end();
  }
};

// File: \srk assignment\Shivam\my-diamond-app\pages\api\db.js
// lib/db.js
import sql from "mssql";

const config = {
  user: process.env.SQL_USERNAME,
  password: process.env.SQL_PASSWORD, // *** VERY IMPORTANT *** Change this password immediately
  server: process.env.SQL_HOST,
  database: process.env.SQL_DBNAME,
  options: {
    encrypt: false,
    trustServerCertificate: true,
  },
};

const dbClientService = async () => {
  try {
    const pool = await sql.connect(config);
    return pool;
  } catch (error) {
    console.error("Error connecting to database:", error);
    throw error;
  }
};

async function callStoredProcedure(procedureName, params = {}) {
  try {
    const pool = await dbClientService();
    const request = pool.request();

    // Add parameters if provided
    if (Object.keys(params).length > 0) {
      for (const paramName in params) {
        request.input(paramName, params[paramName]);
      }
    }

    // Add output parameters
    request.output("StatusID", sql.Int);
    request.output("StatusMessage", sql.VarChar(200));
    request.output("TotalCount", sql.Int);

    const result = await request.execute(procedureName);

    return {
      status: result.output.StatusID,
      message: result.output.StatusMessage,
      total: result.output.TotalCount,
      data: result.recordset,
    };
  } catch (error) {
    console.error("Error occurred:", error);
    throw error;
  }
}

export { dbClientService, callStoredProcedure };

// File: \srk assignment\Shivam\my-diamond-app\pages\api\faq.js
// pages/api/products.js
import { callStoredProcedure } from "./db";

export default async (req, res) => {
  if (req.method === "GET") {
    try {
      
      const result = await callStoredProcedure("sp_GetFaq",{
       
      });

      if (result.status === 1) {
        res.status(200).json({
          data: result.data,
          totalCount: result.total,
        });
      } else {
        throw new Error(result.message);
      }
    } catch (error) {
      console.error(error);
      res.status(500).json({ error: "Error fetching products" });
    }
  } else {
    res.status(405).end(); // Method Not Allowed
  }
};

// File: \srk assignment\Shivam\my-diamond-app\pages\api\hello.js
// Next.js API route support: https://nextjs.org/docs/api-routes/introduction

export default function handler(req, res) {
  res.status(200).json({ name: "John Doe" });
}

// File: \srk assignment\Shivam\my-diamond-app\pages\api\pages.js
// pages/api/products.js
import { callStoredProcedure } from "./db";

export default async (req, res) => {
  if (req.method === "GET") {
    try {
      const { slug } = req.query;
      const result = await callStoredProcedure("sp_GetPage",{
        slug:slug
      });

      if (result.status === 1) {
        res.status(200).json({
          data: result.data,
          totalCount: result.total,
        });
      } else {
        throw new Error(result.message);
      }
    } catch (error) {
      console.error(error);
      res.status(500).json({ error: "Error fetching products" });
    }
  } else {
    res.status(405).end(); // Method Not Allowed
  }
};

// File: \srk assignment\Shivam\my-diamond-app\pages\api\s3.js
// s3.js

import {
  S3Client,
  PutObjectCommand,
  DeleteObjectCommand,
  GetObjectCommand,
} from "@aws-sdk/client-s3";
import { getSignedUrl } from "@aws-sdk/s3-request-presigner";

const bucketName = process.env.MY_AWS_BUCKET_NAME;
const region = process.env.MY_AWS_BUCKET_REGION;
const accessKeyId = process.env.MY_AWS_ACCESS_KEY;
const secretAccessKey = process.env.MY_AWS_SECRET_ACCESS_KEY;

const s3Client = new S3Client({
  region,
  credentials: {
    accessKeyId,
    secretAccessKey,
  },
});

export async function uploadFile(fileBuffer, fileName, mimetype) {
  const uploadParams = {
    Bucket: bucketName,
    Body: fileBuffer,
    Key: fileName,
    ContentType: mimetype,
  };

  try {
    const data = await s3Client.send(new PutObjectCommand(uploadParams));
    console.log("Successfully uploaded file s3.js:", data);
    return data;
  } catch (error) {
    console.error("Error uploading file s3.js:", error);
    throw error;
  }
}

export async function deleteFile(fileName) {
  const deleteParams = {
    Bucket: bucketName,
    Key: fileName,
  };

  return s3Client.send(new DeleteObjectCommand(deleteParams));
}

// get signed url for image to be displayed in browser
export async function getObjectSignedUrl(key) {
  const params = {
    Bucket: bucketName,
    Key: key,
  };

  try {
    // https://aws.amazon.com/blogs/developer/generate-presigned-url-modular-aws-sdk-javascript/
    const command = new GetObjectCommand(params);
    const seconds = 86400;
    const url = await getSignedUrl(s3Client, command, { expiresIn: seconds });
    console.log("Signed URL in S3.js:", url);
    return url;
  } catch (error) {
    console.error("Error generating signed URL:", error);
    throw new Error("Could not generate signed URL:" + error);
  }
}

// File: \srk assignment\Shivam\my-diamond-app\pages\api\searchsolitaire.js
import { callStoredProcedure } from "./db";
import { getObjectSignedUrl } from "./s3";

export default async (req, res) => {
  if (req.method === "GET") {
    try {
      const pageNumber = parseInt(req.query.pageNumber) || 1; // Default to page 1
      const pageSize = parseInt(req.query.pageSize) || 20; // Default to page size 20

      const result = await callStoredProcedure(
        "sp_GetSolitairesByPage",
        {
          PageNumber: pageNumber,
          PageSize: pageSize,
        },
        ["StatusID", "StatusMessage", "TotalCount"]
      );

      if (result.status === 1) {
        const solitairesWithUrls = await Promise.all(
          result.data.map(async (solitaire) => {
            const imageKeys = [
              "Image1",
              "Image2",
              "Image3",
              "Image4",
              "Image5",
            ];
            const imageUrls = await Promise.all(
              imageKeys.map(async (key) => {
                let imageUrl = null;
                if (solitaire[key]) {
                  try {
                    imageUrl = await getObjectSignedUrl(solitaire[key]);
                    console.log(
                      `Signed URL for solitaire ${solitaire.SolitaireID} (${key}):`,
                      imageUrl
                    );
                  } catch (error) {
                    console.error(
                      `Error generating signed URL for solitaire ${solitaire.SolitaireID} (${key}):`,
                      error
                    );
                  }
                }
                return imageUrl;
              })
            );

            // Generate signed URLs for PDF and Video
            let pdfUrl = null;
            if (solitaire.PDFKey) {
              try {
                pdfUrl = await getObjectSignedUrl(solitaire.PDFKey);
                console.log(
                  `Signed PDF URL for solitaire ${solitaire.SolitaireID}:`,
                  pdfUrl
                );
              } catch (error) {
                console.error(
                  `Error generating signed PDF URL for solitaire ${solitaire.SolitaireID}:`,
                  error
                );
              }
            }

            let videoUrl = null;
            if (solitaire.VideoKey) {
              try {
                videoUrl = await getObjectSignedUrl(solitaire.VideoKey);
                console.log(
                  `Signed Video URL for solitaire ${solitaire.SolitaireID}:`,
                  videoUrl
                );
              } catch (error) {
                console.error(
                  `Error generating signed Video URL for solitaire ${solitaire.SolitaireID}:`,
                  error
                );
              }
            }

            return {
              ...solitaire,
              Image1: imageUrls[0],
              Image2: imageUrls[1],
              Image3: imageUrls[2],
              Image4: imageUrls[3],
              Image5: imageUrls[4],
              pdfUrl: pdfUrl,
              videoUrl: videoUrl,
            };
          })
        );

        res.setHeader("Cache-Control", "no-cache, no-store, must-revalidate"); //  Prevent caching
        res.setHeader("Pragma", "no-cache"); //  Prevent caching
        res.setHeader("Expires", "0"); //  Prevent caching
        res.json({
          statusid: result.status,
          statusmessage: result.message,
          totalcount: result.total,
          solitaires: solitairesWithUrls,
        });
      } else {
        throw new Error(result.statusmessage);
      }
    } catch (error) {
      console.error("Error fetching solitaires:", error);
      res
        .status(500)
        .json({ statusid: 0, statusmessage: "Error fetching solitaires" });
    }
  } else {
    res.status(405).end(); // Method Not Allowed
  }
};

// File: \srk assignment\Shivam\my-diamond-app\pages\api\shapes.js
// pages/api/shapes.js
import { callStoredProcedure } from "./db"; // Import from db.js

export default async (req, res) => {
  try {
    const result = await callStoredProcedure("sp_GetShapes");

    if (result.status === 1) {
      res.status(200).json({
        shapes: result.data,
        totalCount: result.total,
      });
      // console.log("Shapes fetched successfully");
      // console.log("Shapes:", result.data);
    } else {
      throw new Error(result.message);
    }
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "Error fetching shapes" });
  }
};

// File: \srk assignment\Shivam\my-diamond-app\pages\api\sliders.js
import { callStoredProcedure } from "./db";

export default async (req, res) => {
  if (req.method === "GET") {
    try {
      const result = await callStoredProcedure("sp_GetSliders");

      if (result.status === 1) {
        res.status(200).json({
          data: result.data,
          totalCount: result.total,
        });
      } else {
        throw new Error(result.message);
      }
    } catch (error) {
      console.error(error);
      res.status(500).json({ error: "Error fetching blogs." });
    }
  } else {
    res.status(405).end();
  }
};

// File: \srk assignment\Shivam\my-diamond-app\pages\api\solitaire.js
import { callStoredProcedure } from "./db"; // Import from db.js
import { getObjectSignedUrl } from "./s3";

export default async function handler(req, res) {
  if (req.method === "GET") {
    try {
      const result = await callStoredProcedure("sp_AdminGetAllFilters", {}, [
        "StatusID",
        "StatusMessage",
        "TotalCount",
      ]); // Include TotalCount output parameter
      // console.log("Result from sp_AdminGetAllFilters:", result);
      if (result.status === 1) {
        const filterData = result.data[0]; // Extract data from the first row

        // Parse the JSON strings into JavaScript arrays
        const shapes = JSON.parse(filterData.Shapes);
        const carats = JSON.parse(filterData.Carats);
        const colors = JSON.parse(filterData.Colors);
        const flours = JSON.parse(filterData.Flours);
        const purities = JSON.parse(filterData.Purities);
        const cuts = JSON.parse(filterData.Cuts);
        const labs = JSON.parse(filterData.Labs);
        const polishs = JSON.parse(filterData.Polishs);
        const symmetries = JSON.parse(filterData.Symmetries);
        const locations = JSON.parse(filterData.Locations);

        // Generate signed URLs for shapes
        const shapesWithUrls = await Promise.all(
          shapes.map(async (shape) => {
            let imageUrl = null;
            if (shape.ImageKey) {
              try {
                imageUrl = await getObjectSignedUrl(shape.ImageKey);
              } catch (error) {
                console.error(
                  `Error generating signed URL for shape ${shape.ShapeID}:`,
                  error
                );
              }
            }
            return { ...shape, imageUrl };
          })
        );

        res.status(200).json({
          shapes: shapesWithUrls,
          carats: carats, // Use the parsed arrays
          colors: colors,
          flours: flours,
          purities: purities,
          cuts: cuts,
          labs: labs,
          polishs: polishs,
          symmetries: symmetries,
          locations: locations,
          totalCount: result.totalcount,
        });
      } else {
        res.status(400).json({ error: "Error fetching filter data." });
      }
    } catch (error) {
      console.error("Error fetching all filter data:", error);
      res.status(500).json({ error: "Error fetching filter data." });
    }
  } else {
    res.status(405).end(); // Method Not Allowed
  }
}

// File: \srk assignment\Shivam\my-diamond-app\pages\api\testimonials.js
import { callStoredProcedure } from "./db";

export default async (req, res) => {
  if (req.method === "GET") {
    try {
      const result = await callStoredProcedure("sp_GetTestimonials");

      if (result.status === 1) {
        res.status(200).json({
          testimonials: result.data,
          totalCount: result.total,
        });
      } else {
        throw new Error(result.message);
      }
    } catch (error) {
      console.error(error);
      res.status(500).json({ error: "Error fetching testimonials." });
    }
  } else {
    res.status(405).end();
  }
};

// File: \srk assignment\Shivam\my-diamond-app\pages\api\users.js
// pages/api/users.js
import { callStoredProcedure } from "./db";

export default async (req, res) => {
  if (req.method === "POST") {
    try {
      const { email, password, role } = req.body;
      const result = await callStoredProcedure("sp_CreateUser", {
        Email: email,
        PasswordHash: password, // Password is already hashed in the frontend
        Role: role,
      });

      res.status(200).json(result);
    } catch (error) {
      console.error(error);
      res.status(500).json({ error: "Error creating user" });
    }
  } else {
    res.status(405).json({ error: "Method not allowed" });
  }
};

// File: \srk assignment\Shivam\my-diamond-app\pages\api\auth\[...nextauth].js

// File: \srk assignment\Shivam\my-diamond-app\pages\api\product\category-products.js
// pages/api/products.js
import { callStoredProcedure } from "../db";

export default async (req, res) => {
  if (req.method === "GET") {
    try {
      const { category } = req.query;
      const result = await callStoredProcedure("sp_GetProductsByCategory",{
        category:category
      });

      if (result.status === 1) {
        res.status(200).json({
          products: result.data,
          totalCount: result.total,
        });
      } else {
        throw new Error(result.message);
      }
    } catch (error) {
      console.error(error);
      res.status(500).json({ error: "Error fetching products" });
    }
  } else {
    res.status(405).end(); // Method Not Allowed
  }
};

// File: \srk assignment\Shivam\my-diamond-app\pages\api\product\products-details.js
// pages/api/products.js
import { callStoredProcedure } from "../db";

export default async (req, res) => {
  if (req.method === "GET") {
    try {
      const { product } = req.query;
      const result = await callStoredProcedure("sp_GetProductsBySlug",{
        slug:product
      });

      if (result.status === 1) {
        res.status(200).json({
          products: result.data,
          totalCount: result.total,
        });
      } else {
        throw new Error(result.message);
      }
    } catch (error) {
      console.error(error);
      res.status(500).json({ error: "Error fetching products" });
    }
  } else {
    res.status(405).end(); // Method Not Allowed
  }
};

// File: \srk assignment\Shivam\my-diamond-app\pages\api\product\products.js
// pages/api/products.js
import { callStoredProcedure } from "../db";

export default async (req, res) => {
  if (req.method === "GET") {
    try {
      const result = await callStoredProcedure("sp_GetProductsForSliders");

      if (result.status === 1) {
        res.status(200).json({
          products: result.data,
          totalCount: result.total,
        });
      } else {
        throw new Error(result.message);
      }
    } catch (error) {
      console.error(error);
      res.status(500).json({ error: "Error fetching products" });
    }
  } else {
    res.status(405).end(); // Method Not Allowed
  }
};

// File: \srk assignment\Shivam\my-diamond-app\pages\api\solitairebySlug\[solitaireSlug].js

// File: \srk assignment\Shivam\my-diamond-app\pages\auth\login.js
// pages/auth/login.js
import { useEffect, useState } from "react";
import { useRouter } from "next/router";
import { getSession, signIn, useSession } from "next-auth/react";
import {
  Box,
  Flex,
  Heading,
  FormControl,
  FormLabel,
  Input,
  Button,
  Tab,
  Tabs,
  TabList,
  TabPanel,
  TabPanels,
  Alert,
  AlertIcon,
  AlertTitle,
  CloseButton,
  Checkbox,
} from "@chakra-ui/react";
import bcrypt from "bcryptjs";
import axios from "axios";

const LoginSignup = () => {
  const [tabIndex, setTabIndex] = useState(0);
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState(null);
  const [remember, setRemember] = useState(false);
  //   const { data: session, status } = useSession();
  const router = useRouter();

  const handleEmailChange = (event) => setEmail(event.target.value);
  const handlePasswordChange = (event) => setPassword(event.target.value);
  const handleRememberChange = (event) => setRemember(event.target.checked);

  //   useEffect(() => {
  //     console.log(remember);
  //   }, [remember]);

  const handleSubmit = async (event) => {
    event.preventDefault();

    setError(null);

    try {
      if (tabIndex === 0) {
        // Login
        const result = await signIn("credentials", {
          redirect: false,
          email,
          password,
          remember,
        });
        console.log("Login result:", result);

        if (result.error) {
          setError(result.error);
        } else {
          // Redirect to the appropriate dashboard based on role
          // ...
          if (result.ok) {
            // Check if login was successful
            const session = await getSession();
            if (session?.user?.role === "admin") {
              // Optional chaining for safety
              router.push("/admin/dashboard");
            } else {
              router.push(router.query.callbackUrl || "/user/dashboard");
            }
          }
        }
      } else {
        // Signup
        const hashedPassword = await bcrypt.hash(password, 10);
        const res = await axios.post("/api/users", {
          email,
          password: hashedPassword,
          role: "user", // Set default role
        });

        if (res.data.status === 1) {
          // Redirect to login page
          setTabIndex(0);
          setEmail("");
          setPassword("");
        } else {
          setError(res.data.message);
        }
      }
    } catch (error) {
      console.error(error);
      setError("An error occurred. Please try again.");
    }
  };

  return (
    <Flex
      minHeight="100vh"
      width="full"
      align="center"
      justifyContent="center"
      backgroundColor="gray.200" // Set background color for base breakpoint
    >
      <Box
        display={{ base: "block", md: "flex" }} // Show as flex on medium and larger screens
        maxWidth={{ base: "100%", md: "80%", lg: "100%" }} // Full width on base, 80% on medium, 100% on large
        width="100%"
      >
        {/* Video Background (lg only) */}
        <Box
          position="relative"
          w={{ base: "0%", md: "0%", lg: "66%" }} // Adjust width based on breakpoint
          h="100vh"
          display={{ base: "none", lg: "block" }} // Only display on large screens
          overflow="hidden"
        >
          <video
            src="/vid/login-video.mp4" // Replace with your stock video URL
            autoPlay
            loop
            muted
            style={{
              position: "absolute",
              top: 0,
              left: 0,
              width: "100%",
              height: "100%",
              objectFit: "cover",
            }}
          />
          <Box
            position="absolute"
            top={0}
            left={0}
            w="100%"
            h="100%"
            bg="blackAlpha.50" // Add a semi-transparent overlay for better readability
          />
        </Box>

        {/* Login UI */}
        <Flex
          direction="column"
          alignItems="center"
          justifyContent="center"
          w={{ base: "100%", md: "auto", lg: "34%" }} // Adjust width based on breakpoint
          p={8}
          backgroundColor="white"
          borderRadius={{ base: 0, md: "8px", lg: "8px" }} // Add borderRadius on medium and larger screens
          boxShadow={{ base: "none", md: "lg", lg: "lg" }} // Add boxShadow on medium and larger screens
        >
          <Heading mb={6} textAlign="center">
            {tabIndex === 0 ? "Login" : "Signup"}
          </Heading>

          {/* Error Alert */}
          {error && (
            <Alert status="error" mb={4}>
              <AlertIcon />
              <AlertTitle mr={2}>{error}</AlertTitle>
              <CloseButton
                position="absolute"
                right="8px"
                top="8px"
                onClick={() => setError(null)}
              />
            </Alert>
          )}

          {/* Tabs */}
          <Tabs
            index={tabIndex}
            onChange={setTabIndex}
            variant="soft-rounded"
            colorScheme="blue"
          >
            <TabList mb={4}>
              <Tab>Login</Tab>
              <Tab>Signup</Tab>
            </TabList>
            <TabPanels>
              {/* Login Form */}
              <TabPanel>
                <form onSubmit={handleSubmit}>
                  <FormControl id="email" isRequired mb={3}>
                    <FormLabel>Email</FormLabel>
                    <Input
                      value={email}
                      onChange={handleEmailChange}
                      type="email"
                    />
                  </FormControl>
                  <FormControl id="password" isRequired mb={3}>
                    <FormLabel>Password</FormLabel>
                    <Input
                      value={password}
                      onChange={handlePasswordChange}
                      type="password"
                    />
                  </FormControl>
                  <FormControl
                    id="remember"
                    display="flex"
                    alignItems="center"
                    mb={6}
                  >
                    <FormLabel htmlFor="remember" mb="0">
                      Remember me
                    </FormLabel>
                    <Checkbox
                      id="remember"
                      onChange={(event) => handleRememberChange(event)}
                      ml={2}
                    />
                  </FormControl>
                  <Button colorScheme="blue" type="submit" width="full">
                    Login
                  </Button>
                </form>
              </TabPanel>

              {/* Signup Form */}
              <TabPanel>
                {/* ... (Your signup form code remains the same) ... */}
                <form onSubmit={handleSubmit}>
                  <FormControl id="email" isRequired mb={3}>
                    <FormLabel>Email</FormLabel>
                    <Input
                      value={email}
                      onChange={handleEmailChange}
                      type="email"
                    />
                  </FormControl>
                  <FormControl id="password" isRequired mb={6}>
                    <FormLabel>Password</FormLabel>
                    <Input
                      value={password}
                      onChange={handlePasswordChange}
                      type="password"
                    />
                  </FormControl>
                  <Button colorScheme="teal" type="submit">
                    Signup
                  </Button>
                </form>
              </TabPanel>
            </TabPanels>
          </Tabs>
        </Flex>
      </Box>
    </Flex>
  );
};

export default LoginSignup;

// File: \srk assignment\Shivam\my-diamond-app\pages\category\[slug].js

// File: \srk assignment\Shivam\my-diamond-app\pages\product\[productSlug].js

// File: \srk assignment\Shivam\my-diamond-app\pages\user\dashboard.js
// pages/user/dashboard.js
import { useSession } from "next-auth/react";
import { useRouter } from "next/router";
import { useEffect } from "react";

const UserDashboard = () => {
  const router = useRouter();
  const { data: session } = useSession();

  useEffect(() => {
    if (!session || session.user.role !== "user") {
      // Check for 'user' role
      // Redirect to login or unauthorized page
      router.push("/auth/login");
    }
  }, [session, router]);

  // ... Your user dashboard content ...
  return (
    <div>
      <h1>User Dashboard</h1>
    </div>
  );
};

export default UserDashboard;

// File: \srk assignment\Shivam\my-diamond-app\utils\cartfns.js
"use-client";
// Helper functions for local storage (add these to your components or a utility file)

const getCartItemsFromLocalStorage = () => {
  if (typeof window !== "undefined") {
    const cart = localStorage.getItem("cart");
    return cart ? JSON.parse(cart) : [];
  } else {
    console.warn("localStorage is not available in this environment");
    return [];
  }
};

const addToCart = (item) => {
  if (typeof window !== "undefined") {
    const cartItems = getCartItemsFromLocalStorage();
    const existingItemIndex = cartItems.findIndex(
      (cartItem) => cartItem.SolitaireID === item.SolitaireID
    );

    if (existingItemIndex !== -1) {
      // If item exists, update quantity
      cartItems[existingItemIndex].quantity += item.quantity; // Add the passed quantity
    } else {
      // If item doesn't exist, add it to the cart with the given quantity
      cartItems.push(item);
    }

    localStorage.setItem("cart", JSON.stringify(cartItems));
  } else {
    console.warn("localStorage is not available in this environment.");
  }
};
const removeFromCart = (solitaireId) => {
  if (typeof window !== "undefined") {
    const cartItems = getCartItemsFromLocalStorage();
    const updatedCartItems = cartItems.filter(
      (item) => item.SolitaireID !== solitaireId
    );
    localStorage.setItem("cart", JSON.stringify(updatedCartItems));
  } else {
    console.warn("localStorage is not available in this environment");
  }
};

const updateCartItemQuantity = (solitaireId, newQuantity) => {
  if (typeof window !== "undefined") {
    const cartItems = getCartItemsFromLocalStorage();
    const itemToUpdate = cartItems.find(
      (item) => item.SolitaireID === solitaireId
    );

    if (itemToUpdate) {
      itemToUpdate.quantity = newQuantity;
      localStorage.setItem("cart", JSON.stringify(cartItems));
    }
  } else {
    console.warn("localStorage is not available in this environment");
  }
};

export {
  getCartItemsFromLocalStorage,
  addToCart,
  removeFromCart,
  updateCartItemQuantity,
};

